// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_ftmap_address0,
        input_ftmap_ce0,
        input_ftmap_q0,
        conv1_weights_address0,
        conv1_weights_ce0,
        conv1_weights_q0,
        conv1_biases_address0,
        conv1_biases_ce0,
        conv1_biases_q0,
        feat1_address0,
        feat1_ce0,
        feat1_we0,
        feat1_d0,
        grp_fu_692_p_din0,
        grp_fu_692_p_din1,
        grp_fu_692_p_opcode,
        grp_fu_692_p_dout0,
        grp_fu_692_p_ce,
        grp_fu_696_p_din0,
        grp_fu_696_p_din1,
        grp_fu_696_p_dout0,
        grp_fu_696_p_ce
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] input_ftmap_address0;
output   input_ftmap_ce0;
input  [31:0] input_ftmap_q0;
output  [12:0] conv1_weights_address0;
output   conv1_weights_ce0;
input  [31:0] conv1_weights_q0;
output  [5:0] conv1_biases_address0;
output   conv1_biases_ce0;
input  [31:0] conv1_biases_q0;
output  [21:0] feat1_address0;
output   feat1_ce0;
output   feat1_we0;
output  [31:0] feat1_d0;
output  [31:0] grp_fu_692_p_din0;
output  [31:0] grp_fu_692_p_din1;
output  [1:0] grp_fu_692_p_opcode;
input  [31:0] grp_fu_692_p_dout0;
output   grp_fu_692_p_ce;
output  [31:0] grp_fu_696_p_din0;
output  [31:0] grp_fu_696_p_din1;
input  [31:0] grp_fu_696_p_dout0;
output   grp_fu_696_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_ftmap_ce0;
reg conv1_weights_ce0;
reg conv1_biases_ce0;
reg feat1_ce0;
reg feat1_we0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [16:0] sext_ln40_fu_255_p1;
reg  signed [16:0] sext_ln40_reg_610;
wire    ap_CS_fsm_state2;
wire   [10:0] add_ln40_fu_271_p2;
reg   [10:0] add_ln40_reg_615;
wire   [6:0] add_ln11_fu_283_p2;
reg   [6:0] add_ln11_reg_623;
wire   [0:0] icmp_ln11_fu_277_p2;
wire   [31:0] acc_fu_289_p1;
reg   [31:0] acc_reg_633;
wire    ap_CS_fsm_state3;
wire   [21:0] sub_ln46_1_fu_318_p2;
reg   [21:0] sub_ln46_1_reg_638;
wire    ap_CS_fsm_state4;
wire   [9:0] zext_ln12_fu_324_p1;
reg   [9:0] zext_ln12_reg_643;
wire   [7:0] add_ln12_fu_334_p2;
reg   [7:0] add_ln12_reg_651;
reg   [21:0] feat1_addr_reg_656;
wire    ap_CS_fsm_state5;
wire   [9:0] zext_ln13_fu_358_p1;
reg   [9:0] zext_ln13_reg_661;
wire   [7:0] add_ln13_fu_368_p2;
reg   [7:0] add_ln13_reg_669;
wire   [12:0] add_ln40_2_fu_399_p2;
reg   [12:0] add_ln40_2_reg_674;
wire    ap_CS_fsm_state6;
wire   [3:0] add_ln18_fu_411_p2;
reg   [3:0] add_ln18_reg_682;
wire   [15:0] sub_ln40_fu_490_p2;
reg   [15:0] sub_ln40_reg_687;
wire   [0:0] icmp_ln18_fu_405_p2;
wire    ap_CS_fsm_state7;
wire   [3:0] add_ln29_fu_516_p2;
reg   [3:0] add_ln29_reg_700;
wire   [0:0] icmp_ln29_fu_510_p2;
reg   [31:0] input_ftmap_load_reg_710;
wire    ap_CS_fsm_state8;
reg   [31:0] conv1_weights_load_reg_715;
wire   [31:0] bitcast_ln40_fu_595_p1;
wire   [31:0] bitcast_ln40_1_fu_599_p1;
reg   [31:0] mul_reg_730;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
reg   [7:0] y_reg_139;
wire   [0:0] icmp_ln13_fu_362_p2;
reg   [7:0] x_reg_151;
wire   [0:0] icmp_ln12_fu_328_p2;
reg   [3:0] ky_reg_162;
reg   [31:0] acc_7_reg_173;
reg   [3:0] kx_reg_184;
reg   [31:0] acc_8_reg_195;
wire   [63:0] zext_ln11_fu_224_p1;
wire   [63:0] zext_ln46_7_fu_353_p1;
wire   [63:0] zext_ln40_5_fu_505_p1;
wire   [63:0] zext_ln40_6_fu_590_p1;
reg   [6:0] oc_fu_84;
wire    ap_CS_fsm_state12;
wire   [14:0] tmp_fu_237_p3;
wire   [15:0] zext_ln46_4_fu_245_p1;
wire   [15:0] zext_ln46_3_fu_233_p1;
wire   [15:0] sub_ln46_fu_249_p2;
wire   [9:0] tmp_s_fu_259_p3;
wire   [10:0] zext_ln40_fu_267_p1;
wire   [10:0] zext_ln46_fu_229_p1;
wire   [16:0] zext_ln46_5_fu_293_p1;
wire  signed [16:0] add_ln46_fu_297_p2;
wire   [13:0] trunc_ln46_fu_306_p1;
wire   [21:0] p_shl2_fu_310_p3;
wire  signed [21:0] sext_ln46_fu_302_p1;
wire   [21:0] zext_ln46_6_fu_344_p1;
wire   [21:0] add_ln46_1_fu_348_p2;
wire   [10:0] zext_ln40_1_fu_374_p1;
wire   [10:0] add_ln40_1_fu_378_p2;
wire   [9:0] trunc_ln40_fu_387_p1;
wire   [12:0] p_shl3_fu_391_p3;
wire   [12:0] zext_ln40_2_fu_383_p1;
wire  signed [3:0] add_ln19_fu_417_p2;
wire  signed [9:0] sext_ln19_fu_423_p1;
wire   [9:0] add_ln19_1_fu_427_p2;
wire  signed [7:0] sext_ln23_fu_446_p1;
wire   [0:0] tmp_5_fu_432_p3;
wire   [0:0] icmp_ln23_fu_440_p2;
wire   [0:0] or_ln21_fu_464_p2;
wire   [7:0] select_ln21_fu_456_p3;
wire   [7:0] add_ln23_fu_450_p2;
wire   [7:0] iy_fu_470_p3;
wire   [15:0] tmp_2_fu_482_p3;
wire   [15:0] zext_ln40_3_fu_478_p1;
wire   [12:0] zext_ln40_4_fu_496_p1;
wire   [12:0] add_ln40_3_fu_500_p2;
wire   [3:0] add_ln30_fu_522_p2;
wire  signed [9:0] sext_ln30_fu_528_p1;
wire   [9:0] add_ln30_1_fu_532_p2;
wire   [0:0] tmp_7_fu_551_p3;
wire   [0:0] tmp_6_fu_537_p3;
wire   [0:0] icmp_ln34_fu_545_p2;
wire   [0:0] or_ln32_fu_567_p2;
wire   [9:0] select_ln32_fu_559_p3;
wire   [9:0] ix_fu_573_p3;
wire  signed [15:0] sext_ln40_1_fu_581_p1;
wire   [15:0] add_ln40_4_fu_585_p2;
reg   [14:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln29_fu_510_p2 == 1'd1))) begin
        acc_7_reg_173 <= acc_8_reg_195;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln13_fu_362_p2 == 1'd0))) begin
        acc_7_reg_173 <= acc_reg_633;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        acc_8_reg_195 <= grp_fu_692_p_dout0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln18_fu_405_p2 == 1'd0))) begin
        acc_8_reg_195 <= acc_7_reg_173;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        kx_reg_184 <= add_ln29_reg_700;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln18_fu_405_p2 == 1'd0))) begin
        kx_reg_184 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln29_fu_510_p2 == 1'd1))) begin
        ky_reg_162 <= add_ln18_reg_682;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln13_fu_362_p2 == 1'd0))) begin
        ky_reg_162 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        oc_fu_84 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln12_fu_328_p2 == 1'd1))) begin
        oc_fu_84 <= add_ln11_reg_623;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln12_fu_328_p2 == 1'd0))) begin
        x_reg_151 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln18_fu_405_p2 == 1'd1))) begin
        x_reg_151 <= add_ln13_reg_669;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_139 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln13_fu_362_p2 == 1'd1))) begin
        y_reg_139 <= add_ln12_reg_651;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        acc_reg_633 <= acc_fu_289_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln11_reg_623 <= add_ln11_fu_283_p2;
        add_ln40_reg_615 <= add_ln40_fu_271_p2;
        sext_ln40_reg_610 <= sext_ln40_fu_255_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln12_reg_651 <= add_ln12_fu_334_p2;
        sub_ln46_1_reg_638 <= sub_ln46_1_fu_318_p2;
        zext_ln12_reg_643[7 : 0] <= zext_ln12_fu_324_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln13_reg_669 <= add_ln13_fu_368_p2;
        feat1_addr_reg_656 <= zext_ln46_7_fu_353_p1;
        zext_ln13_reg_661[7 : 0] <= zext_ln13_fu_358_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln18_reg_682 <= add_ln18_fu_411_p2;
        add_ln40_2_reg_674 <= add_ln40_2_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln29_reg_700 <= add_ln29_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv1_weights_load_reg_715 <= conv1_weights_q0;
        input_ftmap_load_reg_710 <= input_ftmap_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_reg_730 <= grp_fu_696_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln18_fu_405_p2 == 1'd0))) begin
        sub_ln40_reg_687 <= sub_ln40_fu_490_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln11_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln11_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv1_biases_ce0 = 1'b1;
    end else begin
        conv1_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv1_weights_ce0 = 1'b1;
    end else begin
        conv1_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        feat1_ce0 = 1'b1;
    end else begin
        feat1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln18_fu_405_p2 == 1'd1))) begin
        feat1_we0 = 1'b1;
    end else begin
        feat1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_ftmap_ce0 = 1'b1;
    end else begin
        input_ftmap_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln11_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln12_fu_328_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln13_fu_362_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln18_fu_405_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln29_fu_510_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_289_p1 = conv1_biases_q0;

assign add_ln11_fu_283_p2 = (oc_fu_84 + 7'd1);

assign add_ln12_fu_334_p2 = (y_reg_139 + 8'd1);

assign add_ln13_fu_368_p2 = (x_reg_151 + 8'd1);

assign add_ln18_fu_411_p2 = (ky_reg_162 + 4'd1);

assign add_ln19_1_fu_427_p2 = ($signed(sext_ln19_fu_423_p1) + $signed(zext_ln12_reg_643));

assign add_ln19_fu_417_p2 = ($signed(ky_reg_162) + $signed(4'd12));

assign add_ln23_fu_450_p2 = ($signed(sext_ln23_fu_446_p1) + $signed(y_reg_139));

assign add_ln29_fu_516_p2 = (kx_reg_184 + 4'd1);

assign add_ln30_1_fu_532_p2 = ($signed(sext_ln30_fu_528_p1) + $signed(zext_ln13_reg_661));

assign add_ln30_fu_522_p2 = ($signed(kx_reg_184) + $signed(4'd12));

assign add_ln40_1_fu_378_p2 = (add_ln40_reg_615 + zext_ln40_1_fu_374_p1);

assign add_ln40_2_fu_399_p2 = (p_shl3_fu_391_p3 + zext_ln40_2_fu_383_p1);

assign add_ln40_3_fu_500_p2 = (add_ln40_2_reg_674 + zext_ln40_4_fu_496_p1);

assign add_ln40_4_fu_585_p2 = ($signed(sub_ln40_reg_687) + $signed(sext_ln40_1_fu_581_p1));

assign add_ln40_fu_271_p2 = (zext_ln40_fu_267_p1 + zext_ln46_fu_229_p1);

assign add_ln46_1_fu_348_p2 = (sub_ln46_1_reg_638 + zext_ln46_6_fu_344_p1);

assign add_ln46_fu_297_p2 = ($signed(sext_ln40_reg_610) + $signed(zext_ln46_5_fu_293_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln40_1_fu_599_p1 = conv1_weights_load_reg_715;

assign bitcast_ln40_fu_595_p1 = input_ftmap_load_reg_710;

assign conv1_biases_address0 = zext_ln11_fu_224_p1;

assign conv1_weights_address0 = zext_ln40_5_fu_505_p1;

assign feat1_address0 = feat1_addr_reg_656;

assign feat1_d0 = acc_7_reg_173;

assign grp_fu_692_p_ce = 1'b1;

assign grp_fu_692_p_din0 = acc_8_reg_195;

assign grp_fu_692_p_din1 = mul_reg_730;

assign grp_fu_692_p_opcode = 2'd0;

assign grp_fu_696_p_ce = 1'b1;

assign grp_fu_696_p_din0 = bitcast_ln40_fu_595_p1;

assign grp_fu_696_p_din1 = bitcast_ln40_1_fu_599_p1;

assign icmp_ln11_fu_277_p2 = ((oc_fu_84 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_328_p2 = ((y_reg_139 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_362_p2 = ((x_reg_151 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_405_p2 = ((ky_reg_162 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_440_p2 = (($signed(add_ln19_1_fu_427_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_510_p2 = ((kx_reg_184 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_545_p2 = (($signed(add_ln30_1_fu_532_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign input_ftmap_address0 = zext_ln40_6_fu_590_p1;

assign ix_fu_573_p3 = ((or_ln32_fu_567_p2[0:0] == 1'b1) ? select_ln32_fu_559_p3 : add_ln30_1_fu_532_p2);

assign iy_fu_470_p3 = ((or_ln21_fu_464_p2[0:0] == 1'b1) ? select_ln21_fu_456_p3 : add_ln23_fu_450_p2);

assign or_ln21_fu_464_p2 = (tmp_5_fu_432_p3 | icmp_ln23_fu_440_p2);

assign or_ln32_fu_567_p2 = (tmp_6_fu_537_p3 | icmp_ln34_fu_545_p2);

assign p_shl2_fu_310_p3 = {{trunc_ln46_fu_306_p1}, {8'd0}};

assign p_shl3_fu_391_p3 = {{trunc_ln40_fu_387_p1}, {3'd0}};

assign select_ln21_fu_456_p3 = ((tmp_5_fu_432_p3[0:0] == 1'b1) ? 8'd0 : 8'd254);

assign select_ln32_fu_559_p3 = ((tmp_7_fu_551_p3[0:0] == 1'b1) ? 10'd0 : 10'd254);

assign sext_ln19_fu_423_p1 = add_ln19_fu_417_p2;

assign sext_ln23_fu_446_p1 = add_ln19_fu_417_p2;

assign sext_ln30_fu_528_p1 = $signed(add_ln30_fu_522_p2);

assign sext_ln40_1_fu_581_p1 = $signed(ix_fu_573_p3);

assign sext_ln40_fu_255_p1 = $signed(sub_ln46_fu_249_p2);

assign sext_ln46_fu_302_p1 = add_ln46_fu_297_p2;

assign sub_ln40_fu_490_p2 = (tmp_2_fu_482_p3 - zext_ln40_3_fu_478_p1);

assign sub_ln46_1_fu_318_p2 = ($signed(p_shl2_fu_310_p3) - $signed(sext_ln46_fu_302_p1));

assign sub_ln46_fu_249_p2 = (zext_ln46_4_fu_245_p1 - zext_ln46_3_fu_233_p1);

assign tmp_2_fu_482_p3 = {{iy_fu_470_p3}, {8'd0}};

assign tmp_5_fu_432_p3 = add_ln19_1_fu_427_p2[32'd9];

assign tmp_6_fu_537_p3 = add_ln30_1_fu_532_p2[32'd9];

assign tmp_7_fu_551_p3 = add_ln30_1_fu_532_p2[32'd9];

assign tmp_fu_237_p3 = {{oc_fu_84}, {8'd0}};

assign tmp_s_fu_259_p3 = {{oc_fu_84}, {3'd0}};

assign trunc_ln40_fu_387_p1 = add_ln40_1_fu_378_p2[9:0];

assign trunc_ln46_fu_306_p1 = add_ln46_fu_297_p2[13:0];

assign zext_ln11_fu_224_p1 = oc_fu_84;

assign zext_ln12_fu_324_p1 = y_reg_139;

assign zext_ln13_fu_358_p1 = x_reg_151;

assign zext_ln40_1_fu_374_p1 = ky_reg_162;

assign zext_ln40_2_fu_383_p1 = add_ln40_1_fu_378_p2;

assign zext_ln40_3_fu_478_p1 = iy_fu_470_p3;

assign zext_ln40_4_fu_496_p1 = kx_reg_184;

assign zext_ln40_5_fu_505_p1 = add_ln40_3_fu_500_p2;

assign zext_ln40_6_fu_590_p1 = add_ln40_4_fu_585_p2;

assign zext_ln40_fu_267_p1 = tmp_s_fu_259_p3;

assign zext_ln46_3_fu_233_p1 = oc_fu_84;

assign zext_ln46_4_fu_245_p1 = tmp_fu_237_p3;

assign zext_ln46_5_fu_293_p1 = y_reg_139;

assign zext_ln46_6_fu_344_p1 = x_reg_151;

assign zext_ln46_7_fu_353_p1 = add_ln46_1_fu_348_p2;

assign zext_ln46_fu_229_p1 = oc_fu_84;

always @ (posedge ap_clk) begin
    zext_ln12_reg_643[9:8] <= 2'b00;
    zext_ln13_reg_661[9:8] <= 2'b00;
end

endmodule //srcnn_conv1

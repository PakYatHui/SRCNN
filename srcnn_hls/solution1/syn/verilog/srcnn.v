// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="srcnn_srcnn,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.272200,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=11134,HLS_SYN_DSP=0,HLS_SYN_FF=66471,HLS_SYN_LUT=16436,HLS_VERSION=2023_1}" *)

module srcnn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_ftmap_address0,
        input_ftmap_ce0,
        input_ftmap_q0,
        conv1_weights_address0,
        conv1_weights_ce0,
        conv1_weights_q0,
        conv1_biases_address0,
        conv1_biases_ce0,
        conv1_biases_q0,
        conv2_weights_address0,
        conv2_weights_ce0,
        conv2_weights_q0,
        conv2_biases_address0,
        conv2_biases_ce0,
        conv2_biases_q0,
        conv3_weights_address0,
        conv3_weights_ce0,
        conv3_weights_q0,
        conv3_biases,
        output_ftmap_address0,
        output_ftmap_ce0,
        output_ftmap_we0,
        output_ftmap_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] input_ftmap_address0;
output   input_ftmap_ce0;
input  [31:0] input_ftmap_q0;
output  [12:0] conv1_weights_address0;
output   conv1_weights_ce0;
input  [31:0] conv1_weights_q0;
output  [5:0] conv1_biases_address0;
output   conv1_biases_ce0;
input  [31:0] conv1_biases_q0;
output  [10:0] conv2_weights_address0;
output   conv2_weights_ce0;
input  [31:0] conv2_weights_q0;
output  [4:0] conv2_biases_address0;
output   conv2_biases_ce0;
input  [31:0] conv2_biases_q0;
output  [9:0] conv3_weights_address0;
output   conv3_weights_ce0;
input  [31:0] conv3_weights_q0;
input  [31:0] conv3_biases;
output  [15:0] output_ftmap_address0;
output   output_ftmap_ce0;
output   output_ftmap_we0;
output  [31:0] output_ftmap_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [21:0] feat1_address0;
reg    feat1_ce0;
reg    feat1_we0;
reg   [31:0] feat1_d0;
wire   [31:0] feat1_q0;
reg   [20:0] feat2_address0;
reg    feat2_ce0;
reg    feat2_we0;
reg   [31:0] feat2_d0;
wire   [31:0] feat2_q0;
wire  signed [16:0] sext_ln18_fu_2996_p1;
reg  signed [16:0] sext_ln18_reg_3314;
wire    ap_CS_fsm_state3;
wire   [6:0] add_ln18_fu_3006_p2;
reg   [6:0] add_ln18_reg_3322;
wire   [21:0] sub_ln21_1_fu_3042_p2;
reg   [21:0] sub_ln21_1_reg_3334;
wire    ap_CS_fsm_state4;
wire   [7:0] add_ln19_fu_3054_p2;
reg   [7:0] add_ln19_reg_3342;
reg   [21:0] feat1_addr_reg_3347;
wire    ap_CS_fsm_state5;
wire   [7:0] add_ln20_fu_3084_p2;
reg   [7:0] add_ln20_reg_3355;
reg   [31:0] feat1_load_reg_3360;
wire    ap_CS_fsm_state6;
wire  signed [15:0] sext_ln28_fu_3164_p1;
reg  signed [15:0] sext_ln28_reg_3367;
wire    ap_CS_fsm_state9;
wire   [5:0] add_ln28_fu_3174_p2;
reg   [5:0] add_ln28_reg_3375;
wire   [31:0] empty_fu_3180_p1;
reg   [31:0] empty_reg_3380;
wire   [0:0] icmp_ln28_fu_3168_p2;
wire   [20:0] sub_ln31_1_fu_3210_p2;
reg   [20:0] sub_ln31_1_reg_3385;
wire    ap_CS_fsm_state10;
wire   [7:0] add_ln29_fu_3222_p2;
reg   [7:0] add_ln29_reg_3393;
reg   [20:0] feat2_addr_reg_3398;
wire    ap_CS_fsm_state11;
wire   [7:0] add_ln30_fu_3252_p2;
reg   [7:0] add_ln30_reg_3406;
reg   [31:0] feat2_load_reg_3411;
wire    ap_CS_fsm_state12;
wire    grp_conv1_fu_1558_ap_start;
wire    grp_conv1_fu_1558_ap_done;
wire    grp_conv1_fu_1558_ap_idle;
wire    grp_conv1_fu_1558_ap_ready;
wire   [15:0] grp_conv1_fu_1558_input_ftmap_address0;
wire    grp_conv1_fu_1558_input_ftmap_ce0;
wire   [12:0] grp_conv1_fu_1558_conv1_weights_address0;
wire    grp_conv1_fu_1558_conv1_weights_ce0;
wire   [5:0] grp_conv1_fu_1558_conv1_biases_address0;
wire    grp_conv1_fu_1558_conv1_biases_ce0;
wire   [21:0] grp_conv1_fu_1558_feat1_address0;
wire    grp_conv1_fu_1558_feat1_ce0;
wire    grp_conv1_fu_1558_feat1_we0;
wire   [31:0] grp_conv1_fu_1558_feat1_d0;
wire   [31:0] grp_conv1_fu_1558_grp_fu_3418_p_din0;
wire   [31:0] grp_conv1_fu_1558_grp_fu_3418_p_din1;
wire   [1:0] grp_conv1_fu_1558_grp_fu_3418_p_opcode;
wire    grp_conv1_fu_1558_grp_fu_3418_p_ce;
wire   [31:0] grp_conv1_fu_1558_grp_fu_3422_p_din0;
wire   [31:0] grp_conv1_fu_1558_grp_fu_3422_p_din1;
wire    grp_conv1_fu_1558_grp_fu_3422_p_ce;
wire    grp_conv2_fu_2936_ap_start;
wire    grp_conv2_fu_2936_ap_done;
wire    grp_conv2_fu_2936_ap_idle;
wire    grp_conv2_fu_2936_ap_ready;
wire   [10:0] grp_conv2_fu_2936_conv2_weights_address0;
wire    grp_conv2_fu_2936_conv2_weights_ce0;
wire   [4:0] grp_conv2_fu_2936_conv2_biases_address0;
wire    grp_conv2_fu_2936_conv2_biases_ce0;
wire   [21:0] grp_conv2_fu_2936_feat1_address0;
wire    grp_conv2_fu_2936_feat1_ce0;
wire   [20:0] grp_conv2_fu_2936_feat2_address0;
wire    grp_conv2_fu_2936_feat2_ce0;
wire    grp_conv2_fu_2936_feat2_we0;
wire   [31:0] grp_conv2_fu_2936_feat2_d0;
wire   [31:0] grp_conv2_fu_2936_grp_fu_3418_p_din0;
wire   [31:0] grp_conv2_fu_2936_grp_fu_3418_p_din1;
wire   [1:0] grp_conv2_fu_2936_grp_fu_3418_p_opcode;
wire    grp_conv2_fu_2936_grp_fu_3418_p_ce;
wire   [31:0] grp_conv2_fu_2936_grp_fu_3422_p_din0;
wire   [31:0] grp_conv2_fu_2936_grp_fu_3422_p_din1;
wire    grp_conv2_fu_2936_grp_fu_3422_p_ce;
wire    grp_conv3_fu_2948_ap_start;
wire    grp_conv3_fu_2948_ap_done;
wire    grp_conv3_fu_2948_ap_idle;
wire    grp_conv3_fu_2948_ap_ready;
wire   [9:0] grp_conv3_fu_2948_conv3_weights_address0;
wire    grp_conv3_fu_2948_conv3_weights_ce0;
wire   [15:0] grp_conv3_fu_2948_output_ftmap_address0;
wire    grp_conv3_fu_2948_output_ftmap_ce0;
wire    grp_conv3_fu_2948_output_ftmap_we0;
wire   [31:0] grp_conv3_fu_2948_output_ftmap_d0;
wire   [20:0] grp_conv3_fu_2948_feat2_address0;
wire    grp_conv3_fu_2948_feat2_ce0;
wire   [31:0] grp_conv3_fu_2948_grp_fu_3418_p_din0;
wire   [31:0] grp_conv3_fu_2948_grp_fu_3418_p_din1;
wire   [1:0] grp_conv3_fu_2948_grp_fu_3418_p_opcode;
wire    grp_conv3_fu_2948_grp_fu_3418_p_ce;
wire   [31:0] grp_conv3_fu_2948_grp_fu_3422_p_din0;
wire   [31:0] grp_conv3_fu_2948_grp_fu_3422_p_din1;
wire    grp_conv3_fu_2948_grp_fu_3422_p_ce;
reg   [7:0] y_reg_1514;
wire   [0:0] icmp_ln20_fu_3078_p2;
wire   [0:0] icmp_ln18_fu_3000_p2;
reg   [7:0] x_reg_1525;
wire   [0:0] icmp_ln19_fu_3048_p2;
wire    ap_CS_fsm_state7;
reg   [7:0] y_1_reg_1536;
wire   [0:0] icmp_ln30_fu_3246_p2;
reg   [7:0] x_1_reg_1547;
wire   [0:0] icmp_ln29_fu_3216_p2;
wire    ap_CS_fsm_state13;
reg    grp_conv1_fu_1558_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_conv2_fu_2936_ap_start_reg;
wire    ap_CS_fsm_state8;
reg    grp_conv3_fu_2948_ap_start_reg;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln21_4_fu_3073_p1;
wire   [63:0] zext_ln31_4_fu_3241_p1;
reg   [6:0] c_fu_1474;
reg   [5:0] c_1_fu_1478;
wire   [31:0] select_ln21_fu_3131_p3;
wire   [31:0] select_ln31_fu_3299_p3;
reg   [31:0] grp_fu_2959_p0;
wire   [14:0] tmp_4_fu_2978_p3;
wire   [15:0] zext_ln21_1_fu_2986_p1;
wire   [15:0] zext_ln21_fu_2974_p1;
wire   [15:0] sub_ln21_fu_2990_p2;
wire   [16:0] zext_ln21_2_fu_3017_p1;
wire  signed [16:0] add_ln21_fu_3021_p2;
wire   [13:0] trunc_ln21_fu_3030_p1;
wire   [21:0] p_shl1_fu_3034_p3;
wire  signed [21:0] sext_ln21_fu_3026_p1;
wire   [21:0] zext_ln21_3_fu_3064_p1;
wire   [21:0] add_ln21_1_fu_3068_p2;
wire   [31:0] bitcast_ln21_fu_3090_p1;
wire   [7:0] tmp_fu_3093_p4;
wire   [22:0] trunc_ln21_1_fu_3103_p1;
wire   [0:0] icmp_ln21_1_fu_3113_p2;
wire   [0:0] icmp_ln21_fu_3107_p2;
wire   [0:0] or_ln21_fu_3119_p2;
wire   [0:0] grp_fu_2959_p2;
wire   [0:0] and_ln21_fu_3125_p2;
wire   [13:0] tmp_5_fu_3146_p3;
wire   [14:0] zext_ln31_1_fu_3154_p1;
wire   [14:0] zext_ln31_fu_3142_p1;
wire   [14:0] sub_ln31_fu_3158_p2;
wire   [15:0] zext_ln31_2_fu_3185_p1;
wire  signed [15:0] add_ln31_fu_3189_p2;
wire   [12:0] trunc_ln31_fu_3198_p1;
wire   [20:0] p_shl3_fu_3202_p3;
wire  signed [20:0] sext_ln31_fu_3194_p1;
wire   [20:0] zext_ln31_3_fu_3232_p1;
wire   [20:0] add_ln31_1_fu_3236_p2;
wire   [31:0] bitcast_ln31_fu_3258_p1;
wire   [7:0] tmp_2_fu_3261_p4;
wire   [22:0] trunc_ln31_1_fu_3271_p1;
wire   [0:0] icmp_ln31_1_fu_3281_p2;
wire   [0:0] icmp_ln31_fu_3275_p2;
wire   [0:0] or_ln31_fu_3287_p2;
wire   [0:0] and_ln31_fu_3293_p2;
wire   [31:0] grp_fu_3418_p2;
reg   [31:0] grp_fu_3418_p0;
reg   [31:0] grp_fu_3418_p1;
reg    grp_fu_3418_ce;
wire   [31:0] grp_fu_3422_p2;
reg   [31:0] grp_fu_3422_p0;
reg   [31:0] grp_fu_3422_p1;
reg    grp_fu_3422_ce;
reg   [13:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 grp_conv1_fu_1558_ap_start_reg = 1'b0;
#0 grp_conv2_fu_2936_ap_start_reg = 1'b0;
#0 grp_conv3_fu_2948_ap_start_reg = 1'b0;
end

srcnn_feat1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4161600 ),
    .AddressWidth( 22 ))
feat1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(feat1_address0),
    .ce0(feat1_ce0),
    .we0(feat1_we0),
    .d0(feat1_d0),
    .q0(feat1_q0)
);

srcnn_feat2_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 2080800 ),
    .AddressWidth( 21 ))
feat2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(feat2_address0),
    .ce0(feat2_ce0),
    .we0(feat2_we0),
    .d0(feat2_d0),
    .q0(feat2_q0)
);

srcnn_conv1 grp_conv1_fu_1558(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv1_fu_1558_ap_start),
    .ap_done(grp_conv1_fu_1558_ap_done),
    .ap_idle(grp_conv1_fu_1558_ap_idle),
    .ap_ready(grp_conv1_fu_1558_ap_ready),
    .input_ftmap_address0(grp_conv1_fu_1558_input_ftmap_address0),
    .input_ftmap_ce0(grp_conv1_fu_1558_input_ftmap_ce0),
    .input_ftmap_q0(input_ftmap_q0),
    .conv1_weights_address0(grp_conv1_fu_1558_conv1_weights_address0),
    .conv1_weights_ce0(grp_conv1_fu_1558_conv1_weights_ce0),
    .conv1_weights_q0(conv1_weights_q0),
    .conv1_biases_address0(grp_conv1_fu_1558_conv1_biases_address0),
    .conv1_biases_ce0(grp_conv1_fu_1558_conv1_biases_ce0),
    .conv1_biases_q0(conv1_biases_q0),
    .feat1_address0(grp_conv1_fu_1558_feat1_address0),
    .feat1_ce0(grp_conv1_fu_1558_feat1_ce0),
    .feat1_we0(grp_conv1_fu_1558_feat1_we0),
    .feat1_d0(grp_conv1_fu_1558_feat1_d0),
    .grp_fu_3418_p_din0(grp_conv1_fu_1558_grp_fu_3418_p_din0),
    .grp_fu_3418_p_din1(grp_conv1_fu_1558_grp_fu_3418_p_din1),
    .grp_fu_3418_p_opcode(grp_conv1_fu_1558_grp_fu_3418_p_opcode),
    .grp_fu_3418_p_dout0(grp_fu_3418_p2),
    .grp_fu_3418_p_ce(grp_conv1_fu_1558_grp_fu_3418_p_ce),
    .grp_fu_3422_p_din0(grp_conv1_fu_1558_grp_fu_3422_p_din0),
    .grp_fu_3422_p_din1(grp_conv1_fu_1558_grp_fu_3422_p_din1),
    .grp_fu_3422_p_dout0(grp_fu_3422_p2),
    .grp_fu_3422_p_ce(grp_conv1_fu_1558_grp_fu_3422_p_ce)
);

srcnn_conv2 grp_conv2_fu_2936(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv2_fu_2936_ap_start),
    .ap_done(grp_conv2_fu_2936_ap_done),
    .ap_idle(grp_conv2_fu_2936_ap_idle),
    .ap_ready(grp_conv2_fu_2936_ap_ready),
    .conv2_weights_address0(grp_conv2_fu_2936_conv2_weights_address0),
    .conv2_weights_ce0(grp_conv2_fu_2936_conv2_weights_ce0),
    .conv2_weights_q0(conv2_weights_q0),
    .conv2_biases_address0(grp_conv2_fu_2936_conv2_biases_address0),
    .conv2_biases_ce0(grp_conv2_fu_2936_conv2_biases_ce0),
    .conv2_biases_q0(conv2_biases_q0),
    .feat1_address0(grp_conv2_fu_2936_feat1_address0),
    .feat1_ce0(grp_conv2_fu_2936_feat1_ce0),
    .feat1_q0(feat1_q0),
    .feat2_address0(grp_conv2_fu_2936_feat2_address0),
    .feat2_ce0(grp_conv2_fu_2936_feat2_ce0),
    .feat2_we0(grp_conv2_fu_2936_feat2_we0),
    .feat2_d0(grp_conv2_fu_2936_feat2_d0),
    .grp_fu_3418_p_din0(grp_conv2_fu_2936_grp_fu_3418_p_din0),
    .grp_fu_3418_p_din1(grp_conv2_fu_2936_grp_fu_3418_p_din1),
    .grp_fu_3418_p_opcode(grp_conv2_fu_2936_grp_fu_3418_p_opcode),
    .grp_fu_3418_p_dout0(grp_fu_3418_p2),
    .grp_fu_3418_p_ce(grp_conv2_fu_2936_grp_fu_3418_p_ce),
    .grp_fu_3422_p_din0(grp_conv2_fu_2936_grp_fu_3422_p_din0),
    .grp_fu_3422_p_din1(grp_conv2_fu_2936_grp_fu_3422_p_din1),
    .grp_fu_3422_p_dout0(grp_fu_3422_p2),
    .grp_fu_3422_p_ce(grp_conv2_fu_2936_grp_fu_3422_p_ce)
);

srcnn_conv3 grp_conv3_fu_2948(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv3_fu_2948_ap_start),
    .ap_done(grp_conv3_fu_2948_ap_done),
    .ap_idle(grp_conv3_fu_2948_ap_idle),
    .ap_ready(grp_conv3_fu_2948_ap_ready),
    .conv3_weights_address0(grp_conv3_fu_2948_conv3_weights_address0),
    .conv3_weights_ce0(grp_conv3_fu_2948_conv3_weights_ce0),
    .conv3_weights_q0(conv3_weights_q0),
    .b_0_0_val(empty_reg_3380),
    .output_ftmap_address0(grp_conv3_fu_2948_output_ftmap_address0),
    .output_ftmap_ce0(grp_conv3_fu_2948_output_ftmap_ce0),
    .output_ftmap_we0(grp_conv3_fu_2948_output_ftmap_we0),
    .output_ftmap_d0(grp_conv3_fu_2948_output_ftmap_d0),
    .feat2_address0(grp_conv3_fu_2948_feat2_address0),
    .feat2_ce0(grp_conv3_fu_2948_feat2_ce0),
    .feat2_q0(feat2_q0),
    .grp_fu_3418_p_din0(grp_conv3_fu_2948_grp_fu_3418_p_din0),
    .grp_fu_3418_p_din1(grp_conv3_fu_2948_grp_fu_3418_p_din1),
    .grp_fu_3418_p_opcode(grp_conv3_fu_2948_grp_fu_3418_p_opcode),
    .grp_fu_3418_p_dout0(grp_fu_3418_p2),
    .grp_fu_3418_p_ce(grp_conv3_fu_2948_grp_fu_3418_p_ce),
    .grp_fu_3422_p_din0(grp_conv3_fu_2948_grp_fu_3422_p_din0),
    .grp_fu_3422_p_din1(grp_conv3_fu_2948_grp_fu_3422_p_din1),
    .grp_fu_3422_p_dout0(grp_fu_3422_p2),
    .grp_fu_3422_p_ce(grp_conv3_fu_2948_grp_fu_3422_p_ce)
);

srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U200(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2959_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_2959_p2)
);

srcnn_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U201(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3418_p0),
    .din1(grp_fu_3418_p1),
    .ce(grp_fu_3418_ce),
    .dout(grp_fu_3418_p2)
);

srcnn_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U202(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3422_p0),
    .din1(grp_fu_3422_p1),
    .ce(grp_fu_3422_ce),
    .dout(grp_fu_3422_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_conv1_fu_1558_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_conv1_fu_1558_ap_start_reg <= 1'b1;
        end else if ((grp_conv1_fu_1558_ap_ready == 1'b1)) begin
            grp_conv1_fu_1558_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_conv2_fu_2936_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln18_fu_3000_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_conv2_fu_2936_ap_start_reg <= 1'b1;
        end else if ((grp_conv2_fu_2936_ap_ready == 1'b1)) begin
            grp_conv2_fu_2936_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_conv3_fu_2948_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln28_fu_3168_p2 == 1'd1))) begin
            grp_conv3_fu_2948_ap_start_reg <= 1'b1;
        end else if ((grp_conv3_fu_2948_ap_ready == 1'b1)) begin
            grp_conv3_fu_2948_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_3000_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        c_1_fu_1478 <= 6'd0;
    end else if (((icmp_ln29_fu_3216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        c_1_fu_1478 <= add_ln28_reg_3375;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_fu_1474 <= 7'd0;
    end else if (((icmp_ln19_fu_3048_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_fu_1474 <= add_ln18_reg_3322;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        x_1_reg_1547 <= add_ln30_reg_3406;
    end else if (((icmp_ln29_fu_3216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        x_1_reg_1547 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_reg_1525 <= add_ln20_reg_3355;
    end else if (((icmp_ln19_fu_3048_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        x_reg_1525 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln28_fu_3168_p2 == 1'd0))) begin
        y_1_reg_1536 <= 8'd0;
    end else if (((icmp_ln30_fu_3246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        y_1_reg_1536 <= add_ln29_reg_3393;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_3000_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        y_reg_1514 <= 8'd0;
    end else if (((icmp_ln20_fu_3078_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        y_reg_1514 <= add_ln19_reg_3342;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln18_reg_3322 <= add_ln18_fu_3006_p2;
        sext_ln18_reg_3314 <= sext_ln18_fu_2996_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln19_reg_3342 <= add_ln19_fu_3054_p2;
        sub_ln21_1_reg_3334 <= sub_ln21_1_fu_3042_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln20_reg_3355 <= add_ln20_fu_3084_p2;
        feat1_addr_reg_3347 <= zext_ln21_4_fu_3073_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln28_reg_3375 <= add_ln28_fu_3174_p2;
        sext_ln28_reg_3367 <= sext_ln28_fu_3164_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln29_reg_3393 <= add_ln29_fu_3222_p2;
        sub_ln31_1_reg_3385 <= sub_ln31_1_fu_3210_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln30_reg_3406 <= add_ln30_fu_3252_p2;
        feat2_addr_reg_3398 <= zext_ln31_4_fu_3241_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln28_fu_3168_p2 == 1'd1))) begin
        empty_reg_3380 <= empty_fu_3180_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        feat1_load_reg_3360 <= feat1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        feat2_load_reg_3411 <= feat2_q0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((grp_conv3_fu_2948_ap_done == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_conv1_fu_1558_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((grp_conv2_fu_2936_ap_done == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((grp_conv3_fu_2948_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_conv3_fu_2948_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        feat1_address0 = feat1_addr_reg_3347;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        feat1_address0 = zext_ln21_4_fu_3073_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        feat1_address0 = grp_conv2_fu_2936_feat1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        feat1_address0 = grp_conv1_fu_1558_feat1_address0;
    end else begin
        feat1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        feat1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        feat1_ce0 = grp_conv2_fu_2936_feat1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        feat1_ce0 = grp_conv1_fu_1558_feat1_ce0;
    end else begin
        feat1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        feat1_d0 = select_ln21_fu_3131_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        feat1_d0 = grp_conv1_fu_1558_feat1_d0;
    end else begin
        feat1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        feat1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        feat1_we0 = grp_conv1_fu_1558_feat1_we0;
    end else begin
        feat1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        feat2_address0 = feat2_addr_reg_3398;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        feat2_address0 = zext_ln31_4_fu_3241_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        feat2_address0 = grp_conv3_fu_2948_feat2_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        feat2_address0 = grp_conv2_fu_2936_feat2_address0;
    end else begin
        feat2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11))) begin
        feat2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        feat2_ce0 = grp_conv3_fu_2948_feat2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        feat2_ce0 = grp_conv2_fu_2936_feat2_ce0;
    end else begin
        feat2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        feat2_d0 = select_ln31_fu_3299_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        feat2_d0 = grp_conv2_fu_2936_feat2_d0;
    end else begin
        feat2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        feat2_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        feat2_we0 = grp_conv2_fu_2936_feat2_we0;
    end else begin
        feat2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_2959_p0 = feat2_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_2959_p0 = feat1_q0;
    end else begin
        grp_fu_2959_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_3418_ce = grp_conv3_fu_2948_grp_fu_3418_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_3418_ce = grp_conv2_fu_2936_grp_fu_3418_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_3418_ce = grp_conv1_fu_1558_grp_fu_3418_p_ce;
    end else begin
        grp_fu_3418_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_3418_p0 = grp_conv3_fu_2948_grp_fu_3418_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_3418_p0 = grp_conv2_fu_2936_grp_fu_3418_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_3418_p0 = grp_conv1_fu_1558_grp_fu_3418_p_din0;
    end else begin
        grp_fu_3418_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_3418_p1 = grp_conv3_fu_2948_grp_fu_3418_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_3418_p1 = grp_conv2_fu_2936_grp_fu_3418_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_3418_p1 = grp_conv1_fu_1558_grp_fu_3418_p_din1;
    end else begin
        grp_fu_3418_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_3422_ce = grp_conv3_fu_2948_grp_fu_3422_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_3422_ce = grp_conv2_fu_2936_grp_fu_3422_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_3422_ce = grp_conv1_fu_1558_grp_fu_3422_p_ce;
    end else begin
        grp_fu_3422_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_3422_p0 = grp_conv3_fu_2948_grp_fu_3422_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_3422_p0 = grp_conv2_fu_2936_grp_fu_3422_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_3422_p0 = grp_conv1_fu_1558_grp_fu_3422_p_din0;
    end else begin
        grp_fu_3422_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_3422_p1 = grp_conv3_fu_2948_grp_fu_3422_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_3422_p1 = grp_conv2_fu_2936_grp_fu_3422_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_3422_p1 = grp_conv1_fu_1558_grp_fu_3422_p_din1;
    end else begin
        grp_fu_3422_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_conv1_fu_1558_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln18_fu_3000_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln19_fu_3048_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln20_fu_3078_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_conv2_fu_2936_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln28_fu_3168_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln29_fu_3216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln30_fu_3246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_conv3_fu_2948_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_3006_p2 = (c_fu_1474 + 7'd1);

assign add_ln19_fu_3054_p2 = (y_reg_1514 + 8'd1);

assign add_ln20_fu_3084_p2 = (x_reg_1525 + 8'd1);

assign add_ln21_1_fu_3068_p2 = (sub_ln21_1_reg_3334 + zext_ln21_3_fu_3064_p1);

assign add_ln21_fu_3021_p2 = ($signed(sext_ln18_reg_3314) + $signed(zext_ln21_2_fu_3017_p1));

assign add_ln28_fu_3174_p2 = (c_1_fu_1478 + 6'd1);

assign add_ln29_fu_3222_p2 = (y_1_reg_1536 + 8'd1);

assign add_ln30_fu_3252_p2 = (x_1_reg_1547 + 8'd1);

assign add_ln31_1_fu_3236_p2 = (sub_ln31_1_reg_3385 + zext_ln31_3_fu_3232_p1);

assign add_ln31_fu_3189_p2 = ($signed(sext_ln28_reg_3367) + $signed(zext_ln31_2_fu_3185_p1));

assign and_ln21_fu_3125_p2 = (or_ln21_fu_3119_p2 & grp_fu_2959_p2);

assign and_ln31_fu_3293_p2 = (or_ln31_fu_3287_p2 & grp_fu_2959_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln21_fu_3090_p1 = feat1_load_reg_3360;

assign bitcast_ln31_fu_3258_p1 = feat2_load_reg_3411;

assign conv1_biases_address0 = grp_conv1_fu_1558_conv1_biases_address0;

assign conv1_biases_ce0 = grp_conv1_fu_1558_conv1_biases_ce0;

assign conv1_weights_address0 = grp_conv1_fu_1558_conv1_weights_address0;

assign conv1_weights_ce0 = grp_conv1_fu_1558_conv1_weights_ce0;

assign conv2_biases_address0 = grp_conv2_fu_2936_conv2_biases_address0;

assign conv2_biases_ce0 = grp_conv2_fu_2936_conv2_biases_ce0;

assign conv2_weights_address0 = grp_conv2_fu_2936_conv2_weights_address0;

assign conv2_weights_ce0 = grp_conv2_fu_2936_conv2_weights_ce0;

assign conv3_weights_address0 = grp_conv3_fu_2948_conv3_weights_address0;

assign conv3_weights_ce0 = grp_conv3_fu_2948_conv3_weights_ce0;

assign empty_fu_3180_p1 = conv3_biases;

assign grp_conv1_fu_1558_ap_start = grp_conv1_fu_1558_ap_start_reg;

assign grp_conv2_fu_2936_ap_start = grp_conv2_fu_2936_ap_start_reg;

assign grp_conv3_fu_2948_ap_start = grp_conv3_fu_2948_ap_start_reg;

assign icmp_ln18_fu_3000_p2 = ((c_fu_1474 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_3048_p2 = ((y_reg_1514 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_3078_p2 = ((x_reg_1525 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_3113_p2 = ((trunc_ln21_1_fu_3103_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_3107_p2 = ((tmp_fu_3093_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_3168_p2 = ((c_1_fu_1478 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_3216_p2 = ((y_1_reg_1536 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_3246_p2 = ((x_1_reg_1547 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln31_1_fu_3281_p2 = ((trunc_ln31_1_fu_3271_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_3275_p2 = ((tmp_2_fu_3261_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_ftmap_address0 = grp_conv1_fu_1558_input_ftmap_address0;

assign input_ftmap_ce0 = grp_conv1_fu_1558_input_ftmap_ce0;

assign or_ln21_fu_3119_p2 = (icmp_ln21_fu_3107_p2 | icmp_ln21_1_fu_3113_p2);

assign or_ln31_fu_3287_p2 = (icmp_ln31_fu_3275_p2 | icmp_ln31_1_fu_3281_p2);

assign output_ftmap_address0 = grp_conv3_fu_2948_output_ftmap_address0;

assign output_ftmap_ce0 = grp_conv3_fu_2948_output_ftmap_ce0;

assign output_ftmap_d0 = grp_conv3_fu_2948_output_ftmap_d0;

assign output_ftmap_we0 = grp_conv3_fu_2948_output_ftmap_we0;

assign p_shl1_fu_3034_p3 = {{trunc_ln21_fu_3030_p1}, {8'd0}};

assign p_shl3_fu_3202_p3 = {{trunc_ln31_fu_3198_p1}, {8'd0}};

assign select_ln21_fu_3131_p3 = ((and_ln21_fu_3125_p2[0:0] == 1'b1) ? 32'd0 : feat1_load_reg_3360);

assign select_ln31_fu_3299_p3 = ((and_ln31_fu_3293_p2[0:0] == 1'b1) ? 32'd0 : feat2_load_reg_3411);

assign sext_ln18_fu_2996_p1 = $signed(sub_ln21_fu_2990_p2);

assign sext_ln21_fu_3026_p1 = add_ln21_fu_3021_p2;

assign sext_ln28_fu_3164_p1 = $signed(sub_ln31_fu_3158_p2);

assign sext_ln31_fu_3194_p1 = add_ln31_fu_3189_p2;

assign sub_ln21_1_fu_3042_p2 = ($signed(p_shl1_fu_3034_p3) - $signed(sext_ln21_fu_3026_p1));

assign sub_ln21_fu_2990_p2 = (zext_ln21_1_fu_2986_p1 - zext_ln21_fu_2974_p1);

assign sub_ln31_1_fu_3210_p2 = ($signed(p_shl3_fu_3202_p3) - $signed(sext_ln31_fu_3194_p1));

assign sub_ln31_fu_3158_p2 = (zext_ln31_1_fu_3154_p1 - zext_ln31_fu_3142_p1);

assign tmp_2_fu_3261_p4 = {{bitcast_ln31_fu_3258_p1[30:23]}};

assign tmp_4_fu_2978_p3 = {{c_fu_1474}, {8'd0}};

assign tmp_5_fu_3146_p3 = {{c_1_fu_1478}, {8'd0}};

assign tmp_fu_3093_p4 = {{bitcast_ln21_fu_3090_p1[30:23]}};

assign trunc_ln21_1_fu_3103_p1 = bitcast_ln21_fu_3090_p1[22:0];

assign trunc_ln21_fu_3030_p1 = add_ln21_fu_3021_p2[13:0];

assign trunc_ln31_1_fu_3271_p1 = bitcast_ln31_fu_3258_p1[22:0];

assign trunc_ln31_fu_3198_p1 = add_ln31_fu_3189_p2[12:0];

assign zext_ln21_1_fu_2986_p1 = tmp_4_fu_2978_p3;

assign zext_ln21_2_fu_3017_p1 = y_reg_1514;

assign zext_ln21_3_fu_3064_p1 = x_reg_1525;

assign zext_ln21_4_fu_3073_p1 = add_ln21_1_fu_3068_p2;

assign zext_ln21_fu_2974_p1 = c_fu_1474;

assign zext_ln31_1_fu_3154_p1 = tmp_5_fu_3146_p3;

assign zext_ln31_2_fu_3185_p1 = y_1_reg_1536;

assign zext_ln31_3_fu_3232_p1 = x_1_reg_1547;

assign zext_ln31_4_fu_3241_p1 = add_ln31_1_fu_3236_p2;

assign zext_ln31_fu_3142_p1 = c_1_fu_1478;

endmodule //srcnn

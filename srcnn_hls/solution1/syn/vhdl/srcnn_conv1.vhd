-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_ftmap_ce0 : OUT STD_LOGIC;
    input_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_weights_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv1_weights_ce0 : OUT STD_LOGIC;
    conv1_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_biases_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    conv1_biases_ce0 : OUT STD_LOGIC;
    conv1_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    feat1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    feat1_ce0 : OUT STD_LOGIC;
    feat1_we0 : OUT STD_LOGIC;
    feat1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_704_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_704_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_704_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_704_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_704_p_ce : OUT STD_LOGIC;
    grp_fu_708_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_708_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_708_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_708_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_20 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv7_7C : STD_LOGIC_VECTOR (6 downto 0) := "1111100";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_tile_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal out_tile_ce0 : STD_LOGIC;
    signal out_tile_we0 : STD_LOGIC;
    signal out_tile_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_tile_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_tile_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal in_tile_0_ce0 : STD_LOGIC;
    signal in_tile_0_we0 : STD_LOGIC;
    signal in_tile_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_tile_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_tile_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal w_tile_0_ce0 : STD_LOGIC;
    signal w_tile_0_we0 : STD_LOGIC;
    signal w_tile_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_tile_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_1_reg_1694 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln33_fu_540_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln33_reg_1704 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln34_fu_550_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln34_reg_1712 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln33_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln34_fu_564_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_reg_1717 : STD_LOGIC_VECTOR (7 downto 0);
    signal tH_fu_574_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tH_reg_1722 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub77_fu_586_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub77_reg_1729 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_fu_602_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln36_reg_1734 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln37_fu_612_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln37_reg_1742 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln36_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln37_fu_630_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln37_reg_1747 : STD_LOGIC_VECTOR (9 downto 0);
    signal tW_fu_640_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tW_reg_1752 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln37_1_fu_648_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_1_reg_1759 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_cast_fu_656_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_cast_reg_1764 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln41_fu_670_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln41_reg_1772 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln41_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub81_fu_702_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub81_reg_1782 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln45_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln45_reg_1787 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_3_fu_720_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_reg_1792 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln42_fu_738_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln42_reg_1800 : STD_LOGIC_VECTOR (5 downto 0);
    signal cmp37_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp37_reg_1805 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln43_fu_773_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln63_fu_809_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln63_reg_1821 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln58_fu_829_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln58_reg_1829 : STD_LOGIC_VECTOR (5 downto 0);
    signal cmp78_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp78_reg_1834 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln63_fu_912_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln63_reg_1839 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_tile_0_addr_reg_1844 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln59_fu_946_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln59_reg_1852 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln60_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln60_reg_1857 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln76_fu_1061_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln76_reg_1866 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln71_fu_1077_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln71_reg_1874 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln76_1_fu_1108_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln76_1_reg_1879 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln71_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln76_3_fu_1143_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln76_3_reg_1884 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln76_5_fu_1166_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln76_5_reg_1889 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln74_fu_1178_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln74_reg_1897 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_tile_0_addr_reg_1902 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln75_fu_1218_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln75_reg_1915 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_cast_fu_1237_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_cast_reg_1920 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln91_1_fu_1257_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln91_1_reg_1925 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln81_fu_1269_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln81_reg_1933 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_1284_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_16_reg_1938 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln82_fu_1302_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln82_reg_1946 : STD_LOGIC_VECTOR (5 downto 0);
    signal cmp182_fu_1308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp182_reg_1951 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_fu_1296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_tile_addr_1_reg_1956 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln83_fu_1337_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln83_reg_1964 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln84_fu_1348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln84_reg_1969 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_fu_1331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln91_3_fu_1378_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln91_3_reg_1978 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln88_fu_1394_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln88_reg_1986 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln91_4_fu_1426_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln91_4_reg_1991 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln88_fu_1388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln90_fu_1456_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln90_reg_2004 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln90_fu_1450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_tile_0_load_reg_2014 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal in_tile_0_load_reg_2019 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_2024 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_28_cast_fu_1486_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_cast_reg_2034 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal add_ln101_fu_1504_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln101_reg_2042 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln102_fu_1541_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln102_reg_2047 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln101_fu_1498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_1554_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_reg_2052 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal add_ln102_fu_1576_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln102_reg_2060 : STD_LOGIC_VECTOR (5 downto 0);
    signal cmp266_fu_1582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp266_reg_2065 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_fu_1570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln105_1_fu_1618_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln105_1_reg_2070 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal add_ln103_fu_1652_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln103_reg_2083 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln104_fu_1663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_reg_2088 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_fu_1646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln105_4_fu_1678_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln105_4_reg_2092 : STD_LOGIC_VECTOR (21 downto 0);
    signal h_reg_290 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_532_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_reg_302 : STD_LOGIC_VECTOR (8 downto 0);
    signal tn_reg_314 : STD_LOGIC_VECTOR (3 downto 0);
    signal th_reg_325 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln43_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tw_reg_336 : STD_LOGIC_VECTOR (5 downto 0);
    signal ih_reg_347 : STD_LOGIC_VECTOR (5 downto 0);
    signal iw_reg_358 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tn_1_reg_369 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln74_fu_1172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kh_reg_380 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln75_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kw_reg_391 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tn_2_reg_402 : STD_LOGIC_VECTOR (3 downto 0);
    signal th_1_reg_413 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln81_fu_1263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tw_1_reg_425 : STD_LOGIC_VECTOR (5 downto 0);
    signal kh_1_reg_437 : STD_LOGIC_VECTOR (3 downto 0);
    signal acc_7_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal kw_1_reg_459 : STD_LOGIC_VECTOR (3 downto 0);
    signal acc_8_reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal tn_3_reg_482 : STD_LOGIC_VECTOR (3 downto 0);
    signal th_2_reg_493 : STD_LOGIC_VECTOR (5 downto 0);
    signal tw_2_reg_504 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal zext_ln45_fu_697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_3_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_3_fu_927_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_4_fu_1035_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_10_fu_1197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_11_fu_1207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_3_fu_1322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_5_fu_1441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_7_fu_1477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_5_fu_1633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_7_fu_1683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_164 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln31_fu_592_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln44_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_7_fu_556_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_568_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln34_fu_582_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln37_fu_626_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_618_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_fu_634_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_fu_652_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_680_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_676_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_689_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln45_1_fu_711_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln45_fu_715_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln42_fu_728_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_2_fu_749_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln45_1_fu_753_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln43_fu_763_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln44_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_797_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_789_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln63_fu_805_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln58_1_fu_819_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln58_fu_815_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_840_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_846_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_44_fu_850_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_cast_fu_869_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_855_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp1_i_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_46_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal spec_select_i_cast_cast_fu_878_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_45_fu_873_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal gy_fu_892_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_904_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln63_1_fu_900_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln63_2_fu_918_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln63_1_fu_922_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln59_1_fu_936_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln60_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln59_fu_932_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln62_fu_962_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln62_fu_968_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_1_fu_972_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_996_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_977_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10_fu_1004_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln11_fu_991_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal gx_fu_1018_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln63_fu_1026_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln63_2_fu_1030_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_1049_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln76_1_fu_1057_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln76_fu_1045_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln71_fu_1067_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln30_fu_1083_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_47_fu_1086_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_1096_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln76_3_fu_1104_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln76_2_fu_1092_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln76_5_fu_1118_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln76_2_fu_1122_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln76_fu_1131_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl6_fu_1135_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln76_6_fu_1127_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln76_4_fu_1114_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln76_4_fu_1149_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_fu_1158_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln76_7_fu_1154_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln76_9_fu_1188_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln76_6_fu_1192_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln76_8_fu_1184_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln76_7_fu_1202_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln85_fu_1233_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_1245_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln91_fu_1253_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln85_fu_1229_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln85_1_fu_1275_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln85_fu_1279_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln82_fu_1292_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln85_2_fu_1313_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln85_1_fu_1317_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln83_fu_1327_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln84_fu_1343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln91_1_fu_1353_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln91_2_fu_1357_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln91_fu_1366_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl8_fu_1370_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln91_2_fu_1362_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln88_fu_1384_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_48_fu_1400_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_1414_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_1406_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln91_3_fu_1422_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln91_4_fu_1432_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln91_5_fu_1436_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln90_fu_1446_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln91_fu_1462_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln91_6_fu_1468_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln91_6_fu_1472_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln105_fu_1482_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln101_fu_1494_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln30_1_fu_1510_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_49_fu_1513_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_1523_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln105_1_fu_1531_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln105_fu_1519_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln105_fu_1535_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln105_2_fu_1545_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln105_1_fu_1549_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln102_1_fu_1566_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln102_fu_1562_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_50_fu_1587_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln105_3_fu_1593_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln105_2_fu_1597_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln105_1_fu_1606_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_fu_1610_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln105_fu_1602_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln105_4_fu_1624_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln105_3_fu_1628_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln103_1_fu_1642_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln104_fu_1658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln103_fu_1638_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln105_fu_1668_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln105_6_fu_1674_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv1_out_tile_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv1_in_tile_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv1_w_tile_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    out_tile_U : component srcnn_conv1_out_tile_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_tile_address0,
        ce0 => out_tile_ce0,
        we0 => out_tile_we0,
        d0 => out_tile_d0,
        q0 => out_tile_q0);

    in_tile_0_U : component srcnn_conv1_in_tile_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => in_tile_0_address0,
        ce0 => in_tile_0_ce0,
        we0 => in_tile_0_we0,
        d0 => in_tile_0_d0,
        q0 => in_tile_0_q0);

    w_tile_0_U : component srcnn_conv1_w_tile_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 648,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_tile_0_address0,
        ce0 => w_tile_0_ce0,
        we0 => w_tile_0_we0,
        d0 => w_tile_0_d0,
        q0 => w_tile_0_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    acc_7_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                acc_7_reg_448 <= out_tile_q0;
            elsif (((icmp_ln90_fu_1450_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                acc_7_reg_448 <= acc_8_reg_470;
            end if; 
        end if;
    end process;

    acc_8_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_fu_1388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_1 = and_ln84_reg_1969))) then 
                acc_8_reg_470 <= acc_7_reg_448;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                acc_8_reg_470 <= grp_fu_704_p_dout0;
            end if; 
        end if;
    end process;

    h_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln36_fu_606_p2 = ap_const_lv1_0))) then 
                h_reg_290 <= add_ln34_reg_1712;
            elsif (((tmp_6_fu_532_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                h_reg_290 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    ih_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln41_fu_664_p2 = ap_const_lv1_1))) then 
                ih_reg_347 <= ap_const_lv6_0;
            elsif (((icmp_ln59_fu_940_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                ih_reg_347 <= add_ln58_reg_1829;
            end if; 
        end if;
    end process;

    iw_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                iw_reg_358 <= add_ln59_reg_1852;
            elsif (((icmp_ln58_fu_823_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                iw_reg_358 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    kh_1_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                kh_1_reg_437 <= ap_const_lv4_0;
            elsif (((icmp_ln90_fu_1450_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                kh_1_reg_437 <= add_ln88_reg_1986;
            end if; 
        end if;
    end process;

    kh_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_fu_1071_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                kh_reg_380 <= ap_const_lv4_0;
            elsif (((icmp_ln75_fu_1212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                kh_reg_380 <= add_ln74_reg_1897;
            end if; 
        end if;
    end process;

    kw_1_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_fu_1388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_1 = and_ln84_reg_1969))) then 
                kw_1_reg_459 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                kw_1_reg_459 <= add_ln90_reg_2004;
            end if; 
        end if;
    end process;

    kw_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_1172_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                kw_reg_391 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                kw_reg_391 <= add_ln75_reg_1915;
            end if; 
        end if;
    end process;

    n_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n_fu_164 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln33_fu_544_p2 = ap_const_lv1_0))) then 
                n_fu_164 <= add_ln31_fu_592_p2;
            end if; 
        end if;
    end process;

    th_1_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_1263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                th_1_reg_413 <= ap_const_lv6_0;
            elsif (((icmp_ln83_fu_1331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                th_1_reg_413 <= add_ln82_reg_1946;
            end if; 
        end if;
    end process;

    th_2_reg_493_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_fu_1498_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                th_2_reg_493 <= ap_const_lv6_0;
            elsif (((icmp_ln103_fu_1646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                th_2_reg_493 <= add_ln102_reg_2060;
            end if; 
        end if;
    end process;

    th_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                th_reg_325 <= ap_const_lv6_0;
            elsif (((icmp_ln43_fu_767_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                th_reg_325 <= add_ln42_reg_1800;
            end if; 
        end if;
    end process;

    tn_1_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_823_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                tn_1_reg_369 <= ap_const_lv4_0;
            elsif (((icmp_ln74_fu_1172_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                tn_1_reg_369 <= add_ln71_reg_1874;
            end if; 
        end if;
    end process;

    tn_2_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_fu_1071_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                tn_2_reg_402 <= ap_const_lv4_0;
            elsif (((icmp_ln82_fu_1296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                tn_2_reg_402 <= add_ln81_reg_1933;
            end if; 
        end if;
    end process;

    tn_3_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_1263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                tn_3_reg_482 <= ap_const_lv4_0;
            elsif (((icmp_ln102_fu_1570_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                tn_3_reg_482 <= add_ln101_reg_2042;
            end if; 
        end if;
    end process;

    tn_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln36_fu_606_p2 = ap_const_lv1_1))) then 
                tn_reg_314 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln42_fu_732_p2 = ap_const_lv1_1))) then 
                tn_reg_314 <= add_ln41_reg_1772;
            end if; 
        end if;
    end process;

    tw_1_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln88_fu_1388_p2 = ap_const_lv1_1) or (ap_const_lv1_0 = and_ln84_reg_1969)))) then 
                tw_1_reg_425 <= add_ln83_reg_1964;
            elsif (((icmp_ln82_fu_1296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                tw_1_reg_425 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    tw_2_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                tw_2_reg_504 <= add_ln103_reg_2083;
            elsif (((icmp_ln102_fu_1570_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                tw_2_reg_504 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    tw_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_767_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                tw_reg_336 <= add_ln43_fu_773_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln42_fu_732_p2 = ap_const_lv1_0))) then 
                tw_reg_336 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    w_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_fu_1498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                w_reg_302 <= add_ln37_reg_1742;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln33_fu_544_p2 = ap_const_lv1_1))) then 
                w_reg_302 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                add_ln101_reg_2042 <= add_ln101_fu_1504_p2;
                    tmp_28_cast_reg_2034(7 downto 5) <= tmp_28_cast_fu_1486_p3(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                add_ln102_reg_2060 <= add_ln102_fu_1576_p2;
                    tmp_18_reg_2052(12 downto 5) <= tmp_18_fu_1554_p3(12 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                add_ln103_reg_2083 <= add_ln103_fu_1652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln103_fu_1646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_1 = and_ln104_fu_1663_p2))) then
                add_ln105_4_reg_2092 <= add_ln105_4_fu_1678_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln33_fu_544_p2 = ap_const_lv1_1))) then
                add_ln34_reg_1712 <= add_ln34_fu_550_p2;
                sub77_reg_1729 <= sub77_fu_586_p2;
                tH_reg_1722 <= tH_fu_574_p3;
                trunc_ln34_reg_1717 <= trunc_ln34_fu_564_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln36_fu_606_p2 = ap_const_lv1_1))) then
                add_ln37_reg_1742 <= add_ln37_fu_612_p2;
                tW_reg_1752 <= tW_fu_640_p3;
                    zext_ln37_1_reg_1759(7 downto 0) <= zext_ln37_1_fu_648_p1(7 downto 0);
                    zext_ln37_reg_1747(7 downto 0) <= zext_ln37_fu_630_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln41_reg_1772 <= add_ln41_fu_670_p2;
                    tmp_16_cast_reg_1764(7 downto 5) <= tmp_16_cast_fu_656_p3(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln42_reg_1800 <= add_ln42_fu_738_p2;
                    tmp_3_reg_1792(12 downto 5) <= tmp_3_fu_720_p3(12 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln58_reg_1829 <= add_ln58_fu_829_p2;
                    add_ln63_reg_1821(10 downto 3) <= add_ln63_fu_809_p2(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln59_reg_1852 <= add_ln59_fu_946_p2;
                in_tile_0_addr_reg_1844 <= zext_ln63_3_fu_927_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln71_reg_1874 <= add_ln71_fu_1077_p2;
                add_ln76_reg_1866 <= add_ln76_fu_1061_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln74_reg_1897 <= add_ln74_fu_1178_p2;
                add_ln76_3_reg_1884 <= add_ln76_3_fu_1143_p2;
                add_ln76_5_reg_1889 <= add_ln76_5_fu_1166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln75_reg_1915 <= add_ln75_fu_1218_p2;
                w_tile_0_addr_reg_1902 <= zext_ln76_10_fu_1197_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_fu_1071_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                add_ln76_1_reg_1879 <= add_ln76_1_fu_1108_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln81_reg_1933 <= add_ln81_fu_1269_p2;
                add_ln91_1_reg_1925 <= add_ln91_1_fu_1257_p2;
                    tmp_24_cast_reg_1920(7 downto 5) <= tmp_24_cast_fu_1237_p3(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln82_reg_1946 <= add_ln82_fu_1302_p2;
                    tmp_16_reg_1938(12 downto 5) <= tmp_16_fu_1284_p3(12 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln83_reg_1964 <= add_ln83_fu_1337_p2;
                out_tile_addr_1_reg_1956 <= zext_ln85_3_fu_1322_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_1 = and_ln84_reg_1969))) then
                add_ln88_reg_1986 <= add_ln88_fu_1394_p2;
                add_ln91_3_reg_1978 <= add_ln91_3_fu_1378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln90_reg_2004 <= add_ln90_fu_1456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_fu_1388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_1 = and_ln84_reg_1969))) then
                    add_ln91_4_reg_1991(10 downto 3) <= add_ln91_4_fu_1426_p2(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln103_fu_1646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                and_ln104_reg_2088 <= and_ln104_fu_1663_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_940_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                and_ln60_reg_1857 <= and_ln60_fu_957_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln83_fu_1331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                and_ln84_reg_1969 <= and_ln84_fu_1348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                bitcast_ln45_reg_1787 <= bitcast_ln45_fu_707_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_fu_1296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                cmp182_reg_1951 <= cmp182_fu_1308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln102_fu_1570_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                cmp266_reg_2065 <= cmp266_fu_1582_p2;
                sub_ln105_1_reg_2070 <= sub_ln105_1_fu_1618_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln42_fu_732_p2 = ap_const_lv1_0))) then
                cmp37_reg_1805 <= cmp37_fu_744_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_823_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                cmp78_reg_1834 <= cmp78_fu_835_p2;
                sub_ln63_reg_1839 <= sub_ln63_fu_912_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                in_tile_0_load_reg_2019 <= in_tile_0_q0;
                w_tile_0_load_reg_2014 <= w_tile_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                mul_reg_2024 <= grp_fu_708_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n_1_reg_1694 <= n_fu_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_fu_1498_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                sext_ln102_reg_2047 <= sext_ln102_fu_1541_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln41_fu_664_p2 = ap_const_lv1_1))) then
                sub81_reg_1782 <= sub81_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln33_reg_1704(8 downto 0) <= zext_ln33_fu_540_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    zext_ln36_reg_1734(8 downto 0) <= zext_ln36_fu_602_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln33_reg_1704(9) <= '0';
    zext_ln36_reg_1734(9) <= '0';
    zext_ln37_reg_1747(9 downto 8) <= "00";
    zext_ln37_1_reg_1759(8) <= '0';
    tmp_16_cast_reg_1764(4 downto 0) <= "00000";
    tmp_3_reg_1792(4 downto 0) <= "00000";
    add_ln63_reg_1821(2 downto 0) <= "000";
    tmp_24_cast_reg_1920(4 downto 0) <= "00000";
    tmp_16_reg_1938(4 downto 0) <= "00000";
    add_ln91_4_reg_1991(2 downto 0) <= "000";
    tmp_28_cast_reg_2034(4 downto 0) <= "00000";
    tmp_18_reg_2052(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln33_fu_544_p2, ap_CS_fsm_state4, icmp_ln36_fu_606_p2, ap_CS_fsm_state5, icmp_ln41_fu_664_p2, ap_CS_fsm_state7, icmp_ln42_fu_732_p2, ap_CS_fsm_state8, ap_CS_fsm_state9, icmp_ln58_fu_823_p2, ap_CS_fsm_state10, icmp_ln59_fu_940_p2, ap_CS_fsm_state12, icmp_ln71_fu_1071_p2, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state17, icmp_ln82_fu_1296_p2, ap_CS_fsm_state18, and_ln84_fu_1348_p2, and_ln84_reg_1969, icmp_ln83_fu_1331_p2, ap_CS_fsm_state20, icmp_ln88_fu_1388_p2, ap_CS_fsm_state21, icmp_ln90_fu_1450_p2, ap_CS_fsm_state30, icmp_ln101_fu_1498_p2, ap_CS_fsm_state31, icmp_ln102_fu_1570_p2, ap_CS_fsm_state32, icmp_ln103_fu_1646_p2, tmp_6_fu_532_p3, icmp_ln43_fu_767_p2, icmp_ln74_fu_1172_p2, icmp_ln75_fu_1212_p2, icmp_ln81_fu_1263_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_6_fu_532_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln33_fu_544_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln36_fu_606_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln41_fu_664_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln42_fu_732_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln43_fu_767_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln58_fu_823_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln59_fu_940_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln71_fu_1071_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln74_fu_1172_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln75_fu_1212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln81_fu_1263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln82_fu_1296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln83_fu_1331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif (((icmp_ln83_fu_1331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = and_ln84_fu_1348_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln88_fu_1388_p2 = ap_const_lv1_1) or (ap_const_lv1_0 = and_ln84_reg_1969)))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln90_fu_1450_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state30 => 
                if (((icmp_ln101_fu_1498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                if (((icmp_ln102_fu_1570_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                if (((icmp_ln103_fu_1646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln101_fu_1504_p2 <= std_logic_vector(unsigned(tn_3_reg_482) + unsigned(ap_const_lv4_1));
    add_ln102_fu_1576_p2 <= std_logic_vector(unsigned(th_2_reg_493) + unsigned(ap_const_lv6_1));
    add_ln103_fu_1652_p2 <= std_logic_vector(unsigned(tw_2_reg_504) + unsigned(ap_const_lv6_1));
    add_ln105_1_fu_1549_p2 <= std_logic_vector(unsigned(tmp_28_cast_reg_2034) + unsigned(zext_ln105_2_fu_1545_p1));
    add_ln105_2_fu_1597_p2 <= std_logic_vector(signed(sext_ln102_reg_2047) + signed(zext_ln105_3_fu_1593_p1));
    add_ln105_3_fu_1628_p2 <= std_logic_vector(unsigned(tmp_18_reg_2052) + unsigned(zext_ln105_4_fu_1624_p1));
    add_ln105_4_fu_1678_p2 <= std_logic_vector(unsigned(sub_ln105_1_reg_2070) + unsigned(zext_ln105_6_fu_1674_p1));
    add_ln105_fu_1668_p2 <= std_logic_vector(unsigned(zext_ln103_fu_1638_p1) + unsigned(w_reg_302));
    add_ln11_fu_991_p2 <= std_logic_vector(signed(sext_ln62_fu_968_p1) + signed(zext_ln37_reg_1747));
    add_ln31_fu_592_p2 <= std_logic_vector(unsigned(n_fu_164) + unsigned(ap_const_lv7_8));
    add_ln34_fu_550_p2 <= std_logic_vector(unsigned(h_reg_290) + unsigned(ap_const_lv9_20));
    add_ln37_fu_612_p2 <= std_logic_vector(unsigned(w_reg_302) + unsigned(ap_const_lv9_20));
    add_ln41_fu_670_p2 <= std_logic_vector(unsigned(tn_reg_314) + unsigned(ap_const_lv4_1));
    add_ln42_fu_738_p2 <= std_logic_vector(unsigned(th_reg_325) + unsigned(ap_const_lv6_1));
    add_ln43_fu_773_p2 <= std_logic_vector(unsigned(tw_reg_336) + unsigned(ap_const_lv6_1));
    add_ln45_1_fu_753_p2 <= std_logic_vector(unsigned(tmp_3_reg_1792) + unsigned(zext_ln45_2_fu_749_p1));
    add_ln45_fu_715_p2 <= std_logic_vector(unsigned(tmp_16_cast_reg_1764) + unsigned(zext_ln45_1_fu_711_p1));
    add_ln58_fu_829_p2 <= std_logic_vector(unsigned(ih_reg_347) + unsigned(ap_const_lv6_1));
    add_ln59_fu_946_p2 <= std_logic_vector(unsigned(iw_reg_358) + unsigned(ap_const_lv6_1));
    add_ln62_1_fu_972_p2 <= std_logic_vector(signed(sext_ln62_fu_968_p1) + signed(zext_ln36_reg_1734));
    add_ln62_fu_962_p2 <= std_logic_vector(unsigned(zext_ln59_fu_932_p1) + unsigned(ap_const_lv7_7C));
    add_ln63_1_fu_922_p2 <= std_logic_vector(unsigned(add_ln63_reg_1821) + unsigned(zext_ln63_2_fu_918_p1));
    add_ln63_2_fu_1030_p2 <= std_logic_vector(unsigned(sub_ln63_reg_1839) + unsigned(sext_ln63_fu_1026_p1));
    add_ln63_fu_809_p2 <= std_logic_vector(unsigned(tmp_s_fu_789_p3) + unsigned(zext_ln63_fu_805_p1));
    add_ln71_fu_1077_p2 <= std_logic_vector(unsigned(tn_1_reg_369) + unsigned(ap_const_lv4_1));
    add_ln74_fu_1178_p2 <= std_logic_vector(unsigned(kh_reg_380) + unsigned(ap_const_lv4_1));
    add_ln75_fu_1218_p2 <= std_logic_vector(unsigned(kw_reg_391) + unsigned(ap_const_lv4_1));
    add_ln76_1_fu_1108_p2 <= std_logic_vector(unsigned(zext_ln76_3_fu_1104_p1) + unsigned(zext_ln76_2_fu_1092_p1));
    add_ln76_2_fu_1122_p2 <= std_logic_vector(unsigned(add_ln76_reg_1866) + unsigned(zext_ln76_5_fu_1118_p1));
    add_ln76_3_fu_1143_p2 <= std_logic_vector(unsigned(p_shl6_fu_1135_p3) + unsigned(zext_ln76_6_fu_1127_p1));
    add_ln76_4_fu_1149_p2 <= std_logic_vector(unsigned(add_ln76_1_reg_1879) + unsigned(zext_ln76_4_fu_1114_p1));
    add_ln76_5_fu_1166_p2 <= std_logic_vector(unsigned(p_shl5_fu_1158_p3) + unsigned(zext_ln76_7_fu_1154_p1));
    add_ln76_6_fu_1192_p2 <= std_logic_vector(unsigned(add_ln76_3_reg_1884) + unsigned(zext_ln76_9_fu_1188_p1));
    add_ln76_7_fu_1202_p2 <= std_logic_vector(unsigned(add_ln76_5_reg_1889) + unsigned(zext_ln76_8_fu_1184_p1));
    add_ln76_fu_1061_p2 <= std_logic_vector(unsigned(zext_ln76_1_fu_1057_p1) + unsigned(zext_ln76_fu_1045_p1));
    add_ln81_fu_1269_p2 <= std_logic_vector(unsigned(tn_2_reg_402) + unsigned(ap_const_lv4_1));
    add_ln82_fu_1302_p2 <= std_logic_vector(unsigned(th_1_reg_413) + unsigned(ap_const_lv6_1));
    add_ln83_fu_1337_p2 <= std_logic_vector(unsigned(tw_1_reg_425) + unsigned(ap_const_lv6_1));
    add_ln85_1_fu_1317_p2 <= std_logic_vector(unsigned(tmp_16_reg_1938) + unsigned(zext_ln85_2_fu_1313_p1));
    add_ln85_fu_1279_p2 <= std_logic_vector(unsigned(tmp_24_cast_reg_1920) + unsigned(zext_ln85_1_fu_1275_p1));
    add_ln88_fu_1394_p2 <= std_logic_vector(unsigned(kh_1_reg_437) + unsigned(ap_const_lv4_1));
    add_ln90_fu_1456_p2 <= std_logic_vector(unsigned(kw_1_reg_459) + unsigned(ap_const_lv4_1));
    add_ln91_1_fu_1257_p2 <= std_logic_vector(unsigned(zext_ln91_fu_1253_p1) + unsigned(zext_ln85_fu_1229_p1));
    add_ln91_2_fu_1357_p2 <= std_logic_vector(unsigned(add_ln91_1_reg_1925) + unsigned(zext_ln91_1_fu_1353_p1));
    add_ln91_3_fu_1378_p2 <= std_logic_vector(unsigned(p_shl8_fu_1370_p3) + unsigned(zext_ln91_2_fu_1362_p1));
    add_ln91_4_fu_1426_p2 <= std_logic_vector(unsigned(tmp_19_fu_1406_p3) + unsigned(zext_ln91_3_fu_1422_p1));
    add_ln91_5_fu_1436_p2 <= std_logic_vector(unsigned(add_ln91_3_reg_1978) + unsigned(zext_ln91_4_fu_1432_p1));
    add_ln91_6_fu_1472_p2 <= std_logic_vector(unsigned(add_ln91_4_reg_1991) + unsigned(zext_ln91_6_fu_1468_p1));
    add_ln91_fu_1462_p2 <= std_logic_vector(unsigned(zext_ln90_fu_1446_p1) + unsigned(tw_1_reg_425));
    and_ln104_fu_1663_p2 <= (icmp_ln104_fu_1658_p2 and cmp266_reg_2065);
    and_ln44_fu_784_p2 <= (icmp_ln44_fu_779_p2 and cmp37_reg_1805);
    and_ln60_fu_957_p2 <= (icmp_ln60_fu_952_p2 and cmp78_reg_1834);
    and_ln84_fu_1348_p2 <= (icmp_ln84_fu_1343_p2 and cmp182_reg_1951);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_6_fu_532_p3)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_6_fu_532_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_6_fu_532_p3)
    begin
        if (((tmp_6_fu_532_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln45_fu_707_p1 <= conv1_biases_q0;
    cmp182_fu_1308_p2 <= "1" when (unsigned(zext_ln82_fu_1292_p1) < unsigned(tH_reg_1722)) else "0";
    cmp1_i_fu_863_p2 <= "1" when (signed(empty_44_fu_850_p2) > signed(ap_const_lv10_FE)) else "0";
    cmp266_fu_1582_p2 <= "1" when (unsigned(zext_ln102_1_fu_1566_p1) < unsigned(tH_reg_1722)) else "0";
    cmp37_fu_744_p2 <= "1" when (unsigned(zext_ln42_fu_728_p1) < unsigned(tH_reg_1722)) else "0";
    cmp78_fu_835_p2 <= "1" when (unsigned(zext_ln58_1_fu_819_p1) < unsigned(sub77_reg_1729)) else "0";
    conv1_biases_address0 <= zext_ln45_fu_697_p1(6 - 1 downto 0);

    conv1_biases_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv1_biases_ce0 <= ap_const_logic_1;
        else 
            conv1_biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_weights_address0 <= zext_ln76_11_fu_1207_p1(13 - 1 downto 0);

    conv1_weights_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv1_weights_ce0 <= ap_const_logic_1;
        else 
            conv1_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_44_fu_850_p2 <= std_logic_vector(signed(tmp_cast_fu_846_p1) + signed(zext_ln33_reg_1704));
    empty_45_fu_873_p2 <= std_logic_vector(signed(tmp1_cast_fu_869_p1) + signed(trunc_ln34_reg_1717));
    empty_46_fu_886_p2 <= (tmp_9_fu_855_p3 or cmp1_i_fu_863_p2);
    empty_47_fu_1086_p2 <= std_logic_vector(unsigned(zext_ln71_fu_1067_p1) + unsigned(trunc_ln30_fu_1083_p1));
    empty_48_fu_1400_p2 <= std_logic_vector(unsigned(zext_ln88_fu_1384_p1) + unsigned(th_1_reg_413));
    empty_49_fu_1513_p2 <= std_logic_vector(unsigned(zext_ln101_fu_1494_p1) + unsigned(trunc_ln30_1_fu_1510_p1));
    empty_50_fu_1587_p2 <= std_logic_vector(unsigned(zext_ln102_fu_1562_p1) + unsigned(h_reg_290));
    empty_fu_676_p1 <= tn_reg_314(3 - 1 downto 0);
    feat1_address0 <= zext_ln105_7_fu_1683_p1(22 - 1 downto 0);

    feat1_ce0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            feat1_ce0 <= ap_const_logic_1;
        else 
            feat1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feat1_d0 <= out_tile_q0;

    feat1_we0_assign_proc : process(and_ln104_reg_2088, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_1 = and_ln104_reg_2088))) then 
            feat1_we0 <= ap_const_logic_1;
        else 
            feat1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_704_p_ce <= ap_const_logic_1;
    grp_fu_704_p_din0 <= acc_8_reg_470;
    grp_fu_704_p_din1 <= mul_reg_2024;
    grp_fu_704_p_opcode <= ap_const_lv2_0;
    grp_fu_708_p_ce <= ap_const_logic_1;
    grp_fu_708_p_din0 <= w_tile_0_load_reg_2014;
    grp_fu_708_p_din1 <= in_tile_0_load_reg_2019;
    gx_fu_1018_p3 <= 
        select_ln10_fu_1004_p3 when (or_ln10_fu_1012_p2(0) = '1') else 
        add_ln11_fu_991_p2;
    gy_fu_892_p3 <= 
        spec_select_i_cast_cast_fu_878_p3 when (empty_46_fu_886_p2(0) = '1') else 
        empty_45_fu_873_p2;
    icmp_ln101_fu_1498_p2 <= "1" when (tn_3_reg_482 = ap_const_lv4_8) else "0";
    icmp_ln102_fu_1570_p2 <= "1" when (th_2_reg_493 = ap_const_lv6_20) else "0";
    icmp_ln103_fu_1646_p2 <= "1" when (tw_2_reg_504 = ap_const_lv6_20) else "0";
    icmp_ln104_fu_1658_p2 <= "1" when (unsigned(zext_ln103_1_fu_1642_p1) < unsigned(tW_reg_1752)) else "0";
    icmp_ln11_fu_985_p2 <= "1" when (signed(add_ln62_1_fu_972_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln33_fu_544_p2 <= "1" when (unsigned(h_reg_290) < unsigned(ap_const_lv9_FF)) else "0";
    icmp_ln36_fu_606_p2 <= "1" when (unsigned(w_reg_302) < unsigned(ap_const_lv9_FF)) else "0";
    icmp_ln41_fu_664_p2 <= "1" when (tn_reg_314 = ap_const_lv4_8) else "0";
    icmp_ln42_fu_732_p2 <= "1" when (th_reg_325 = ap_const_lv6_20) else "0";
    icmp_ln43_fu_767_p2 <= "1" when (tw_reg_336 = ap_const_lv6_20) else "0";
    icmp_ln44_fu_779_p2 <= "1" when (unsigned(zext_ln43_fu_763_p1) < unsigned(tW_reg_1752)) else "0";
    icmp_ln58_fu_823_p2 <= "1" when (ih_reg_347 = ap_const_lv6_28) else "0";
    icmp_ln59_fu_940_p2 <= "1" when (iw_reg_358 = ap_const_lv6_28) else "0";
    icmp_ln60_fu_952_p2 <= "1" when (unsigned(zext_ln59_1_fu_936_p1) < unsigned(sub81_reg_1782)) else "0";
    icmp_ln71_fu_1071_p2 <= "1" when (tn_1_reg_369 = ap_const_lv4_8) else "0";
    icmp_ln74_fu_1172_p2 <= "1" when (kh_reg_380 = ap_const_lv4_9) else "0";
    icmp_ln75_fu_1212_p2 <= "1" when (kw_reg_391 = ap_const_lv4_9) else "0";
    icmp_ln81_fu_1263_p2 <= "1" when (tn_2_reg_402 = ap_const_lv4_8) else "0";
    icmp_ln82_fu_1296_p2 <= "1" when (th_1_reg_413 = ap_const_lv6_20) else "0";
    icmp_ln83_fu_1331_p2 <= "1" when (tw_1_reg_425 = ap_const_lv6_20) else "0";
    icmp_ln84_fu_1343_p2 <= "1" when (unsigned(zext_ln83_fu_1327_p1) < unsigned(tW_reg_1752)) else "0";
    icmp_ln88_fu_1388_p2 <= "1" when (kh_1_reg_437 = ap_const_lv4_9) else "0";
    icmp_ln90_fu_1450_p2 <= "1" when (kw_1_reg_459 = ap_const_lv4_9) else "0";

    in_tile_0_address0_assign_proc : process(in_tile_0_addr_reg_1844, ap_CS_fsm_state21, ap_CS_fsm_state11, zext_ln91_7_fu_1477_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            in_tile_0_address0 <= zext_ln91_7_fu_1477_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            in_tile_0_address0 <= in_tile_0_addr_reg_1844;
        else 
            in_tile_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    in_tile_0_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            in_tile_0_ce0 <= ap_const_logic_1;
        else 
            in_tile_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_tile_0_d0 <= input_ftmap_q0;

    in_tile_0_we0_assign_proc : process(and_ln60_reg_1857, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = and_ln60_reg_1857))) then 
            in_tile_0_we0 <= ap_const_logic_1;
        else 
            in_tile_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_ftmap_address0 <= zext_ln63_4_fu_1035_p1(16 - 1 downto 0);

    input_ftmap_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_ftmap_ce0 <= ap_const_logic_1;
        else 
            input_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln10_fu_1012_p2 <= (tmp_14_fu_977_p3 or icmp_ln11_fu_985_p2);

    out_tile_address0_assign_proc : process(ap_CS_fsm_state8, out_tile_addr_1_reg_1956, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state32, zext_ln45_3_fu_758_p1, zext_ln85_3_fu_1322_p1, zext_ln105_5_fu_1633_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            out_tile_address0 <= zext_ln105_5_fu_1633_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            out_tile_address0 <= out_tile_addr_1_reg_1956;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            out_tile_address0 <= zext_ln85_3_fu_1322_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_tile_address0 <= zext_ln45_3_fu_758_p1(13 - 1 downto 0);
        else 
            out_tile_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    out_tile_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_tile_ce0 <= ap_const_logic_1;
        else 
            out_tile_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_tile_d0_assign_proc : process(bitcast_ln45_reg_1787, ap_CS_fsm_state8, ap_CS_fsm_state20, acc_7_reg_448)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            out_tile_d0 <= acc_7_reg_448;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_tile_d0 <= bitcast_ln45_reg_1787;
        else 
            out_tile_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_tile_we0_assign_proc : process(ap_CS_fsm_state8, and_ln84_reg_1969, ap_CS_fsm_state20, icmp_ln88_fu_1388_p2, icmp_ln43_fu_767_p2, and_ln44_fu_784_p2)
    begin
        if ((((icmp_ln88_fu_1388_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_1 = and_ln84_reg_1969)) or ((icmp_ln43_fu_767_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = and_ln44_fu_784_p2)))) then 
            out_tile_we0 <= ap_const_logic_1;
        else 
            out_tile_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl5_fu_1158_p3 <= (add_ln76_4_fu_1149_p2 & ap_const_lv3_0);
    p_shl6_fu_1135_p3 <= (trunc_ln76_fu_1131_p1 & ap_const_lv3_0);
    p_shl8_fu_1370_p3 <= (trunc_ln91_fu_1366_p1 & ap_const_lv3_0);
    p_shl_fu_1610_p3 <= (trunc_ln105_1_fu_1606_p1 & ap_const_lv8_0);
    select_ln10_fu_1004_p3 <= 
        ap_const_lv10_0 when (tmp_15_fu_996_p3(0) = '1') else 
        ap_const_lv10_FE;
        sext_ln102_fu_1541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln105_fu_1535_p2),16));

        sext_ln105_fu_1602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln105_2_fu_1597_p2),22));

        sext_ln62_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln62_fu_962_p2),10));

        sext_ln63_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gx_fu_1018_p3),16));

    spec_select_i_cast_cast_fu_878_p3 <= 
        ap_const_lv8_0 when (tmp_9_fu_855_p3(0) = '1') else 
        ap_const_lv8_FE;
    sub77_fu_586_p2 <= std_logic_vector(unsigned(zext_ln34_fu_582_p1) + unsigned(ap_const_lv9_8));
    sub81_fu_702_p2 <= std_logic_vector(unsigned(zext_ln37_1_reg_1759) + unsigned(ap_const_lv9_8));
    sub_ln105_1_fu_1618_p2 <= std_logic_vector(unsigned(p_shl_fu_1610_p3) - unsigned(sext_ln105_fu_1602_p1));
    sub_ln105_fu_1535_p2 <= std_logic_vector(unsigned(zext_ln105_1_fu_1531_p1) - unsigned(zext_ln105_fu_1519_p1));
    sub_ln63_fu_912_p2 <= std_logic_vector(unsigned(tmp_10_fu_904_p3) - unsigned(zext_ln63_1_fu_900_p1));
    tH_fu_574_p3 <= 
        xor_ln34_fu_568_p2 when (tmp_7_fu_556_p3(0) = '1') else 
        ap_const_lv8_20;
    tW_fu_640_p3 <= 
        xor_ln37_fu_634_p2 when (tmp_8_fu_618_p3(0) = '1') else 
        ap_const_lv8_20;
        tmp1_cast_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_840_p2),8));

    tmp_10_fu_904_p3 <= (gy_fu_892_p3 & ap_const_lv8_0);
    tmp_11_fu_1049_p3 <= (tn_1_reg_369 & ap_const_lv3_0);
    tmp_12_fu_1096_p3 <= (empty_47_fu_1086_p2 & ap_const_lv3_0);
    tmp_13_fu_1245_p3 <= (tn_2_reg_402 & ap_const_lv3_0);
    tmp_14_fu_977_p3 <= add_ln62_1_fu_972_p2(9 downto 9);
    tmp_15_fu_996_p3 <= add_ln62_1_fu_972_p2(9 downto 9);
    tmp_16_cast_fu_656_p3 <= (trunc_ln45_fu_652_p1 & ap_const_lv5_0);
    tmp_16_fu_1284_p3 <= (add_ln85_fu_1279_p2 & ap_const_lv5_0);
    tmp_17_fu_1523_p3 <= (empty_49_fu_1513_p2 & ap_const_lv8_0);
    tmp_18_fu_1554_p3 <= (add_ln105_1_fu_1549_p2 & ap_const_lv5_0);
    tmp_19_fu_1406_p3 <= (empty_48_fu_1400_p2 & ap_const_lv5_0);
    tmp_20_fu_1414_p3 <= (empty_48_fu_1400_p2 & ap_const_lv3_0);
    tmp_24_cast_fu_1237_p3 <= (trunc_ln85_fu_1233_p1 & ap_const_lv5_0);
    tmp_28_cast_fu_1486_p3 <= (trunc_ln105_fu_1482_p1 & ap_const_lv5_0);
    tmp_2_fu_797_p3 <= (ih_reg_347 & ap_const_lv3_0);
    tmp_3_fu_720_p3 <= (add_ln45_fu_715_p2 & ap_const_lv5_0);
    tmp_4_fu_680_p4 <= n_1_reg_1694(5 downto 3);
    tmp_5_fu_689_p3 <= (tmp_4_fu_680_p4 & empty_fu_676_p1);
    tmp_6_fu_532_p3 <= n_fu_164(6 downto 6);
    tmp_7_fu_556_p3 <= add_ln34_fu_550_p2(8 downto 8);
    tmp_8_fu_618_p3 <= add_ln37_fu_612_p2(8 downto 8);
    tmp_9_fu_855_p3 <= empty_44_fu_850_p2(9 downto 9);
        tmp_cast_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_840_p2),10));

    tmp_fu_840_p2 <= std_logic_vector(unsigned(zext_ln58_fu_815_p1) + unsigned(ap_const_lv7_7C));
    tmp_s_fu_789_p3 <= (ih_reg_347 & ap_const_lv5_0);
    trunc_ln105_1_fu_1606_p1 <= add_ln105_2_fu_1597_p2(14 - 1 downto 0);
    trunc_ln105_fu_1482_p1 <= tn_3_reg_482(3 - 1 downto 0);
    trunc_ln30_1_fu_1510_p1 <= n_1_reg_1694(6 - 1 downto 0);
    trunc_ln30_fu_1083_p1 <= n_1_reg_1694(6 - 1 downto 0);
    trunc_ln34_fu_564_p1 <= h_reg_290(8 - 1 downto 0);
    trunc_ln37_fu_626_p1 <= w_reg_302(8 - 1 downto 0);
    trunc_ln45_fu_652_p1 <= tn_reg_314(3 - 1 downto 0);
    trunc_ln76_fu_1131_p1 <= add_ln76_2_fu_1122_p2(7 - 1 downto 0);
    trunc_ln85_fu_1233_p1 <= tn_2_reg_402(3 - 1 downto 0);
    trunc_ln91_fu_1366_p1 <= add_ln91_2_fu_1357_p2(7 - 1 downto 0);

    w_tile_0_address0_assign_proc : process(w_tile_0_addr_reg_1902, ap_CS_fsm_state21, ap_CS_fsm_state15, zext_ln91_5_fu_1441_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            w_tile_0_address0 <= zext_ln91_5_fu_1441_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            w_tile_0_address0 <= w_tile_0_addr_reg_1902;
        else 
            w_tile_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    w_tile_0_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            w_tile_0_ce0 <= ap_const_logic_1;
        else 
            w_tile_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_tile_0_d0 <= conv1_weights_q0;

    w_tile_0_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            w_tile_0_we0 <= ap_const_logic_1;
        else 
            w_tile_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln34_fu_568_p2 <= (trunc_ln34_fu_564_p1 xor ap_const_lv8_FF);
    xor_ln37_fu_634_p2 <= (trunc_ln37_fu_626_p1 xor ap_const_lv8_FF);
    zext_ln101_fu_1494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tn_3_reg_482),6));
    zext_ln102_1_fu_1566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_2_reg_493),8));
    zext_ln102_fu_1562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_2_reg_493),9));
    zext_ln103_1_fu_1642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tw_2_reg_504),8));
    zext_ln103_fu_1638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tw_2_reg_504),9));
    zext_ln105_1_fu_1531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_1523_p3),15));
    zext_ln105_2_fu_1545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_2_reg_493),8));
    zext_ln105_3_fu_1593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_50_fu_1587_p2),16));
    zext_ln105_4_fu_1624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tw_2_reg_504),13));
    zext_ln105_5_fu_1633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln105_3_fu_1628_p2),64));
    zext_ln105_6_fu_1674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln105_fu_1668_p2),22));
    zext_ln105_7_fu_1683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln105_4_reg_2092),64));
    zext_ln105_fu_1519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_49_fu_1513_p2),15));
    zext_ln33_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_290),10));
    zext_ln34_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tH_fu_574_p3),9));
    zext_ln36_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_302),10));
    zext_ln37_1_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tW_fu_640_p3),9));
    zext_ln37_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln37_fu_626_p1),10));
    zext_ln42_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_reg_325),8));
    zext_ln43_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tw_reg_336),8));
    zext_ln45_1_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_reg_325),8));
    zext_ln45_2_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tw_reg_336),13));
    zext_ln45_3_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_1_fu_753_p2),64));
    zext_ln45_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_689_p3),64));
    zext_ln58_1_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ih_reg_347),9));
    zext_ln58_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ih_reg_347),7));
    zext_ln59_1_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iw_reg_358),9));
    zext_ln59_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iw_reg_358),7));
    zext_ln63_1_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gy_fu_892_p3),16));
    zext_ln63_2_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iw_reg_358),11));
    zext_ln63_3_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_1_fu_922_p2),64));
    zext_ln63_4_fu_1035_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_2_fu_1030_p2),64));
    zext_ln63_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_797_p3),11));
    zext_ln71_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tn_1_reg_369),6));
    zext_ln76_10_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_6_fu_1192_p2),64));
    zext_ln76_11_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_7_fu_1202_p2),64));
    zext_ln76_1_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1049_p3),8));
    zext_ln76_2_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_47_fu_1086_p2),10));
    zext_ln76_3_fu_1104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1096_p3),10));
    zext_ln76_4_fu_1114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kh_reg_380),10));
    zext_ln76_5_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kh_reg_380),8));
    zext_ln76_6_fu_1127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_2_fu_1122_p2),10));
    zext_ln76_7_fu_1154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_4_fu_1149_p2),13));
    zext_ln76_8_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kw_reg_391),13));
    zext_ln76_9_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kw_reg_391),10));
    zext_ln76_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tn_1_reg_369),8));
    zext_ln82_fu_1292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_1_reg_413),8));
    zext_ln83_fu_1327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tw_1_reg_425),8));
    zext_ln85_1_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_1_reg_413),8));
    zext_ln85_2_fu_1313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tw_1_reg_425),13));
    zext_ln85_3_fu_1322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_1_fu_1317_p2),64));
    zext_ln85_fu_1229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tn_2_reg_402),8));
    zext_ln88_fu_1384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kh_1_reg_437),6));
    zext_ln90_fu_1446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kw_1_reg_459),6));
    zext_ln91_1_fu_1353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kh_1_reg_437),8));
    zext_ln91_2_fu_1362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_2_fu_1357_p2),10));
    zext_ln91_3_fu_1422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_1414_p3),11));
    zext_ln91_4_fu_1432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kw_1_reg_459),10));
    zext_ln91_5_fu_1441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_5_fu_1436_p2),64));
    zext_ln91_6_fu_1468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_fu_1462_p2),11));
    zext_ln91_7_fu_1477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_6_fu_1472_p2),64));
    zext_ln91_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_1245_p3),8));
end behav;

-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_srcnn_Pipeline_VITIS_LOOP_11_2_VITIS_LOOP_12_3_VITIS_LOOP_15_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    acc : IN STD_LOGIC_VECTOR (31 downto 0);
    sub_ln21 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln18 : IN STD_LOGIC_VECTOR (10 downto 0);
    conv2_weights_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv2_weights_ce0 : OUT STD_LOGIC;
    conv2_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    feat1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    feat1_ce0 : OUT STD_LOGIC;
    feat1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    feat2_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    feat2_ce0 : OUT STD_LOGIC;
    feat2_we0 : OUT STD_LOGIC;
    feat2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_479_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_479_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_479_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_479_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_479_p_ce : OUT STD_LOGIC;
    grp_fu_483_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_483_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_483_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_483_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_srcnn_Pipeline_VITIS_LOOP_11_2_VITIS_LOOP_12_3_VITIS_LOOP_15_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv22_3F8040 : STD_LOGIC_VECTOR (21 downto 0) := "1111111000000001000000";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv15_3FC0 : STD_LOGIC_VECTOR (14 downto 0) := "011111111000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln11_reg_567 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sub_ln21_cast_fu_167_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln21_cast_reg_562 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln11_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln11_reg_567_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_571 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_571_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln11_2_fu_248_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln11_2_reg_576 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln11_2_reg_576_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln11_2_reg_576_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln11_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_reg_581 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_reg_581_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_2_fu_298_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_2_reg_586 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_2_reg_586_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_2_reg_586_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln15_1_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_1_reg_601 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_1_reg_601_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_1_reg_601_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal feat1_load_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal conv2_weights_load_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln18_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln12_1_fu_453_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln18_4_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln18_5_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_4_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_2_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_acc_2_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ic_fu_82 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_fu_389_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_fu_86 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten19_fu_90 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln12_3_fu_407_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten33_fu_98 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln11_1_fu_213_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln11_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln15_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln11_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln11_fu_240_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln12_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln12_fu_278_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_fu_290_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_318_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln18_3_fu_326_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln18_2_fu_314_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln18_fu_330_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln18_fu_336_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln21_fu_256_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln18_fu_340_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln18_fu_350_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_fu_354_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln18_1_fu_346_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln18_1_fu_362_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln21_2_fu_306_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln18_1_fu_368_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln18_1_fu_310_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln18_2_fu_379_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln12_1_fu_401_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln11_1_fu_447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln21_1_fu_465_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln21_3_fu_468_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln21_fu_477_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl5_fu_481_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln21_fu_473_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln21_1_fu_489_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln21_3_fu_495_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln21_4_fu_498_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    acc_2_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    acc_2_fu_78 <= acc;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    acc_2_fu_78 <= grp_fu_479_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ic_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                ic_fu_82 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln11_fu_207_p2 = ap_const_lv1_0))) then 
                ic_fu_82 <= add_ln15_fu_389_p2;
            end if; 
        end if;
    end process;

    indvar_flatten19_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                indvar_flatten19_fu_90 <= ap_const_lv15_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln11_fu_207_p2 = ap_const_lv1_0))) then 
                indvar_flatten19_fu_90 <= select_ln12_3_fu_407_p3;
            end if; 
        end if;
    end process;

    indvar_flatten33_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                indvar_flatten33_fu_98 <= ap_const_lv22_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln11_fu_207_p2 = ap_const_lv1_0))) then 
                indvar_flatten33_fu_98 <= add_ln11_1_fu_213_p2;
            end if; 
        end if;
    end process;

    x_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                x_fu_86 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln11_fu_207_p2 = ap_const_lv1_0))) then 
                x_fu_86 <= select_ln12_2_fu_298_p3;
            end if; 
        end if;
    end process;

    y_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                y_fu_94 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln11_fu_207_p2 = ap_const_lv1_0))) then 
                y_fu_94 <= select_ln11_2_fu_248_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                acc_3_reg_630 <= grp_fu_479_p_dout0;
                sub_ln21_cast_reg_562 <= sub_ln21_cast_fu_167_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln11_fu_207_p2 = ap_const_lv1_0))) then
                and_ln11_reg_581 <= and_ln11_fu_272_p2;
                icmp_ln12_reg_571 <= icmp_ln12_fu_234_p2;
                icmp_ln15_1_reg_601 <= icmp_ln15_1_fu_395_p2;
                select_ln11_2_reg_576 <= select_ln11_2_fu_248_p3;
                select_ln12_2_reg_586 <= select_ln12_2_fu_298_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                and_ln11_reg_581_pp0_iter1_reg <= and_ln11_reg_581;
                icmp_ln11_reg_567 <= icmp_ln11_fu_207_p2;
                icmp_ln11_reg_567_pp0_iter1_reg <= icmp_ln11_reg_567;
                icmp_ln12_reg_571_pp0_iter1_reg <= icmp_ln12_reg_571;
                icmp_ln15_1_reg_601_pp0_iter1_reg <= icmp_ln15_1_reg_601;
                icmp_ln15_1_reg_601_pp0_iter2_reg <= icmp_ln15_1_reg_601_pp0_iter1_reg;
                select_ln11_2_reg_576_pp0_iter1_reg <= select_ln11_2_reg_576;
                select_ln11_2_reg_576_pp0_iter2_reg <= select_ln11_2_reg_576_pp0_iter1_reg;
                select_ln12_2_reg_586_pp0_iter1_reg <= select_ln12_2_reg_586;
                select_ln12_2_reg_586_pp0_iter2_reg <= select_ln12_2_reg_586_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                conv2_weights_load_reg_610 <= conv2_weights_q0;
                feat1_load_reg_605 <= feat1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_i_reg_620 <= grp_fu_483_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter2_stage1, ap_idle_pp0_0to1, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to3, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln11_1_fu_213_p2 <= std_logic_vector(unsigned(indvar_flatten33_fu_98) + unsigned(ap_const_lv22_1));
    add_ln11_fu_228_p2 <= std_logic_vector(unsigned(y_fu_94) + unsigned(ap_const_lv8_1));
    add_ln12_1_fu_401_p2 <= std_logic_vector(unsigned(indvar_flatten19_fu_90) + unsigned(ap_const_lv15_1));
    add_ln12_fu_278_p2 <= std_logic_vector(unsigned(select_ln11_fu_240_p3) + unsigned(ap_const_lv8_1));
    add_ln15_fu_389_p2 <= std_logic_vector(unsigned(select_ln12_fu_290_p3) + unsigned(ap_const_lv7_1));
    add_ln18_1_fu_368_p2 <= std_logic_vector(unsigned(sub_ln18_1_fu_362_p2) + unsigned(zext_ln21_2_fu_306_p1));
    add_ln18_2_fu_379_p2 <= std_logic_vector(unsigned(zext_ln18) + unsigned(zext_ln18_1_fu_310_p1));
    add_ln18_fu_340_p2 <= std_logic_vector(signed(sext_ln18_fu_336_p1) + signed(zext_ln21_fu_256_p1));
    add_ln21_3_fu_468_p2 <= std_logic_vector(signed(sub_ln21_cast_reg_562) + signed(zext_ln21_1_fu_465_p1));
    add_ln21_4_fu_498_p2 <= std_logic_vector(unsigned(sub_ln21_1_fu_489_p2) + unsigned(zext_ln21_3_fu_495_p1));
    and_ln11_fu_272_p2 <= (xor_ln11_fu_260_p2 and icmp_ln15_fu_266_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln11_reg_567)
    begin
        if (((icmp_ln11_reg_567 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, icmp_ln11_reg_567_pp0_iter1_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln11_reg_567_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_acc_2_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, acc_2_fu_78, ap_block_pp0_stage0, grp_fu_479_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_acc_2_load <= grp_fu_479_p_dout0;
        else 
            ap_sig_allocacmp_acc_2_load <= acc_2_fu_78;
        end if; 
    end process;

    bitcast_ln18_fu_440_p1 <= conv2_weights_load_reg_610;
    conv2_weights_address0 <= zext_ln18_5_fu_384_p1(11 - 1 downto 0);

    conv2_weights_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            conv2_weights_ce0 <= ap_const_logic_1;
        else 
            conv2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feat1_address0 <= zext_ln18_4_fu_374_p1(22 - 1 downto 0);

    feat1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            feat1_ce0 <= ap_const_logic_1;
        else 
            feat1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feat2_address0 <= zext_ln21_4_fu_504_p1(21 - 1 downto 0);

    feat2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            feat2_ce0 <= ap_const_logic_1;
        else 
            feat2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feat2_d0 <= acc_3_reg_630;

    feat2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln15_1_reg_601_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln15_1_reg_601_pp0_iter2_reg = ap_const_lv1_1))) then 
            feat2_we0 <= ap_const_logic_1;
        else 
            feat2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_479_p_ce <= ap_const_logic_1;
    grp_fu_479_p_din0 <= select_ln12_1_fu_453_p3;
    grp_fu_479_p_din1 <= mul_i_reg_620;
    grp_fu_479_p_opcode <= ap_const_lv2_0;
    grp_fu_483_p_ce <= ap_const_logic_1;
    grp_fu_483_p_din0 <= feat1_load_reg_605;
    grp_fu_483_p_din1 <= bitcast_ln18_fu_440_p1;
    icmp_ln11_fu_207_p2 <= "1" when (indvar_flatten33_fu_98 = ap_const_lv22_3F8040) else "0";
    icmp_ln12_fu_234_p2 <= "1" when (indvar_flatten19_fu_90 = ap_const_lv15_3FC0) else "0";
    icmp_ln15_1_fu_395_p2 <= "1" when (add_ln15_fu_389_p2 = ap_const_lv7_40) else "0";
    icmp_ln15_fu_266_p2 <= "1" when (ic_fu_82 = ap_const_lv7_40) else "0";
    or_ln12_fu_284_p2 <= (icmp_ln12_fu_234_p2 or and_ln11_fu_272_p2);
    p_shl3_fu_354_p3 <= (trunc_ln18_fu_350_p1 & ap_const_lv8_0);
    p_shl5_fu_481_p3 <= (trunc_ln21_fu_477_p1 & ap_const_lv8_0);
    select_ln11_1_fu_447_p3 <= 
        acc when (icmp_ln12_reg_571_pp0_iter1_reg(0) = '1') else 
        ap_sig_allocacmp_acc_2_load;
    select_ln11_2_fu_248_p3 <= 
        add_ln11_fu_228_p2 when (icmp_ln12_fu_234_p2(0) = '1') else 
        y_fu_94;
    select_ln11_fu_240_p3 <= 
        ap_const_lv8_0 when (icmp_ln12_fu_234_p2(0) = '1') else 
        x_fu_86;
    select_ln12_1_fu_453_p3 <= 
        acc when (and_ln11_reg_581_pp0_iter1_reg(0) = '1') else 
        select_ln11_1_fu_447_p3;
    select_ln12_2_fu_298_p3 <= 
        add_ln12_fu_278_p2 when (and_ln11_fu_272_p2(0) = '1') else 
        select_ln11_fu_240_p3;
    select_ln12_3_fu_407_p3 <= 
        ap_const_lv15_1 when (icmp_ln12_fu_234_p2(0) = '1') else 
        add_ln12_1_fu_401_p2;
    select_ln12_fu_290_p3 <= 
        ap_const_lv7_0 when (or_ln12_fu_284_p2(0) = '1') else 
        ic_fu_82;
        sext_ln18_1_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_fu_340_p2),22));

        sext_ln18_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_fu_330_p2),17));

        sext_ln21_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln21_3_fu_468_p2),21));

    sub_ln18_1_fu_362_p2 <= std_logic_vector(unsigned(p_shl3_fu_354_p3) - unsigned(sext_ln18_1_fu_346_p1));
    sub_ln18_fu_330_p2 <= std_logic_vector(unsigned(zext_ln18_3_fu_326_p1) - unsigned(zext_ln18_2_fu_314_p1));
    sub_ln21_1_fu_489_p2 <= std_logic_vector(unsigned(p_shl5_fu_481_p3) - unsigned(sext_ln21_fu_473_p1));
        sub_ln21_cast_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln21),16));

    tmp_s_fu_318_p3 <= (select_ln12_fu_290_p3 & ap_const_lv8_0);
    trunc_ln18_fu_350_p1 <= add_ln18_fu_340_p2(14 - 1 downto 0);
    trunc_ln21_fu_477_p1 <= add_ln21_3_fu_468_p2(13 - 1 downto 0);
    xor_ln11_fu_260_p2 <= (icmp_ln12_fu_234_p2 xor ap_const_lv1_1);
    zext_ln18_1_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_fu_290_p3),11));
    zext_ln18_2_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_fu_290_p3),16));
    zext_ln18_3_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_318_p3),16));
    zext_ln18_4_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_1_fu_368_p2),64));
    zext_ln18_5_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_2_fu_379_p2),64));
    zext_ln21_1_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln11_2_reg_576_pp0_iter2_reg),16));
    zext_ln21_2_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_2_fu_298_p3),22));
    zext_ln21_3_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_2_reg_586_pp0_iter2_reg),21));
    zext_ln21_4_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_4_fu_498_p2),64));
    zext_ln21_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln11_2_fu_248_p3),17));
end behav;

-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1_Pipeline_VITIS_LOOP_24_8_VITIS_LOOP_27_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    select_ln18_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    select_ln19_8 : IN STD_LOGIC_VECTOR (8 downto 0);
    add_ln32 : IN STD_LOGIC_VECTOR (9 downto 0);
    conv1_weights_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv1_weights_ce0 : OUT STD_LOGIC;
    conv1_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    select_ln15_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln20_2 : IN STD_LOGIC_VECTOR (4 downto 0);
    input_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_ftmap_ce0 : OUT STD_LOGIC;
    input_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_6_out_ap_vld : OUT STD_LOGIC;
    grp_fu_1176_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1176_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1176_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1176_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1176_p_ce : OUT STD_LOGIC;
    grp_fu_1180_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1180_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1180_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1180_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv1_Pipeline_VITIS_LOOP_24_8_VITIS_LOOP_27_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_51 : STD_LOGIC_VECTOR (6 downto 0) := "1010001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln24_reg_563 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln24_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_563_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal input_ftmap_load_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal conv1_weights_load_reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal bitcast_ln32_1_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln32_4_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln32_6_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_4_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_acc_4_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal kx_fu_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln27_fu_492_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_kx_load : STD_LOGIC_VECTOR (3 downto 0);
    signal ky_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln24_1_fu_294_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_ky_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_98 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_1_fu_265_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal add_ln26_1_fu_211_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln26_fu_217_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln19_8_cast_fu_181_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_fu_221_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln200_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln224_fu_233_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln224_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln224_fu_241_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln27_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_274_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln32_fu_302_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_1_fu_306_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_fu_316_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln32_1_fu_312_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_2_fu_330_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln26_1_fu_336_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_3_fu_340_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln200_3_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln224_3_fu_352_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln224_4_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln224_3_fu_360_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln26_fu_370_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal iy_fu_251_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln24_2_fu_378_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_390_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln32_2_fu_386_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln24_fu_286_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_2_fu_324_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln32_3_fu_404_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln32_3_fu_408_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln15_2_cast_fu_177_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln20_2_cast_fu_173_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln30_1_fu_419_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln30_2_fu_429_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln30_fu_435_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln30_fu_425_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_fu_439_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln200_2_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln224_2_fu_451_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln224_2_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln224_4_fu_459_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ix_fu_469_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln32_fu_398_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln32_5_fu_477_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln32_4_fu_481_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    acc_4_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                acc_4_fu_86 <= select_ln18_2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                acc_4_fu_86 <= grp_fu_1176_p_dout0;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln24_fu_259_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_98 <= add_ln24_1_fu_265_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_98 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    kx_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln24_fu_259_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    kx_fu_90 <= add_ln27_fu_492_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    kx_fu_90 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    ky_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln24_fu_259_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ky_fu_94 <= select_ln24_1_fu_294_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ky_fu_94 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_563 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv1_weights_load_reg_582 <= conv1_weights_q0;
                input_ftmap_load_reg_577 <= input_ftmap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln24_reg_563 <= icmp_ln24_fu_259_p2;
                icmp_ln24_reg_563_pp0_iter1_reg <= icmp_ln24_reg_563;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_reg_597 <= grp_fu_1180_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    acc_6_out <= acc_4_fu_86;

    acc_6_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln24_reg_563_pp0_iter1_reg, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln24_reg_563_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            acc_6_out_ap_vld <= ap_const_logic_1;
        else 
            acc_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln24_1_fu_265_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln24_fu_274_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ky_2) + unsigned(ap_const_lv4_1));
    add_ln26_1_fu_211_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ky_2) + unsigned(ap_const_lv4_C));
    add_ln26_2_fu_330_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ky_2) + unsigned(ap_const_lv4_D));
    add_ln26_3_fu_340_p2 <= std_logic_vector(signed(sext_ln26_1_fu_336_p1) + signed(select_ln19_8_cast_fu_181_p1));
    add_ln26_fu_221_p2 <= std_logic_vector(signed(sext_ln26_fu_217_p1) + signed(select_ln19_8_cast_fu_181_p1));
    add_ln27_fu_492_p2 <= std_logic_vector(unsigned(select_ln24_fu_286_p3) + unsigned(ap_const_lv4_1));
    add_ln30_1_fu_419_p2 <= std_logic_vector(unsigned(select_ln15_2_cast_fu_177_p1) + unsigned(zext_ln20_2_cast_fu_173_p1));
    add_ln30_2_fu_429_p2 <= std_logic_vector(unsigned(select_ln24_fu_286_p3) + unsigned(ap_const_lv4_C));
    add_ln30_fu_439_p2 <= std_logic_vector(signed(sext_ln30_fu_435_p1) + signed(zext_ln30_fu_425_p1));
    add_ln32_1_fu_306_p2 <= std_logic_vector(unsigned(add_ln32) + unsigned(zext_ln32_fu_302_p1));
    add_ln32_2_fu_324_p2 <= std_logic_vector(unsigned(p_shl2_fu_316_p3) + unsigned(zext_ln32_1_fu_312_p1));
    add_ln32_3_fu_408_p2 <= std_logic_vector(unsigned(add_ln32_2_fu_324_p2) + unsigned(zext_ln32_3_fu_404_p1));
    add_ln32_4_fu_481_p2 <= std_logic_vector(unsigned(sub_ln32_fu_398_p2) + unsigned(zext_ln32_5_fu_477_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln24_reg_563)
    begin
        if (((icmp_ln24_reg_563 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_acc_4_load_1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, acc_4_fu_86, ap_block_pp0_stage2, grp_fu_1176_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_sig_allocacmp_acc_4_load_1 <= grp_fu_1176_p_dout0;
        else 
            ap_sig_allocacmp_acc_4_load_1 <= acc_4_fu_86;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_kx_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, kx_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_kx_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_kx_load <= kx_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_ky_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, ky_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_ky_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_ky_2 <= ky_fu_94;
        end if; 
    end process;

    bitcast_ln32_1_fu_517_p1 <= conv1_weights_load_reg_582;
    bitcast_ln32_fu_513_p1 <= input_ftmap_load_reg_577;
    conv1_weights_address0 <= zext_ln32_4_fu_414_p1(13 - 1 downto 0);

    conv1_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv1_weights_ce0 <= ap_const_logic_1;
        else 
            conv1_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1176_p_ce <= ap_const_logic_1;
    grp_fu_1176_p_din0 <= ap_sig_allocacmp_acc_4_load_1;
    grp_fu_1176_p_din1 <= mul_reg_597;
    grp_fu_1176_p_opcode <= ap_const_lv2_0;
    grp_fu_1180_p_ce <= ap_const_logic_1;
    grp_fu_1180_p_din0 <= bitcast_ln32_fu_513_p1;
    grp_fu_1180_p_din1 <= bitcast_ln32_1_fu_517_p1;
    icmp_ln200_2_fu_445_p2 <= "1" when (signed(add_ln30_fu_439_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln200_3_fu_346_p2 <= "1" when (signed(add_ln26_3_fu_340_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln200_fu_227_p2 <= "1" when (signed(add_ln26_fu_221_p2) > signed(ap_const_lv10_FE)) else "0";
    icmp_ln224_2_fu_463_p2 <= "1" when (signed(select_ln224_2_fu_451_p3) > signed(ap_const_lv10_0)) else "0";
    icmp_ln224_4_fu_364_p2 <= "1" when (signed(select_ln224_3_fu_352_p3) > signed(ap_const_lv10_0)) else "0";
    icmp_ln224_fu_245_p2 <= "1" when (signed(select_ln224_fu_233_p3) > signed(ap_const_lv10_0)) else "0";
    icmp_ln24_fu_259_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_51) else "0";
    icmp_ln27_fu_280_p2 <= "1" when (ap_sig_allocacmp_kx_load = ap_const_lv4_9) else "0";
    input_ftmap_address0 <= zext_ln32_6_fu_487_p1(16 - 1 downto 0);

    input_ftmap_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_ftmap_ce0 <= ap_const_logic_1;
        else 
            input_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ix_fu_469_p3 <= 
        trunc_ln224_4_fu_459_p1 when (icmp_ln224_2_fu_463_p2(0) = '1') else 
        ap_const_lv9_0;
    iy_fu_251_p3 <= 
        trunc_ln224_fu_241_p1 when (icmp_ln224_fu_245_p2(0) = '1') else 
        ap_const_lv8_0;
    p_shl2_fu_316_p3 <= (add_ln32_1_fu_306_p2 & ap_const_lv3_0);
    select_ln15_2_cast_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_2),9));
    select_ln19_8_cast_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_8),10));
    select_ln224_2_fu_451_p3 <= 
        ap_const_lv10_FE when (icmp_ln200_2_fu_445_p2(0) = '1') else 
        add_ln30_fu_439_p2;
    select_ln224_3_fu_352_p3 <= 
        ap_const_lv10_FE when (icmp_ln200_3_fu_346_p2(0) = '1') else 
        add_ln26_3_fu_340_p2;
    select_ln224_fu_233_p3 <= 
        ap_const_lv10_FE when (icmp_ln200_fu_227_p2(0) = '1') else 
        add_ln26_fu_221_p2;
    select_ln24_1_fu_294_p3 <= 
        add_ln24_fu_274_p2 when (icmp_ln27_fu_280_p2(0) = '1') else 
        ap_sig_allocacmp_ky_2;
    select_ln24_2_fu_378_p3 <= 
        select_ln26_fu_370_p3 when (icmp_ln27_fu_280_p2(0) = '1') else 
        iy_fu_251_p3;
    select_ln24_fu_286_p3 <= 
        ap_const_lv4_0 when (icmp_ln27_fu_280_p2(0) = '1') else 
        ap_sig_allocacmp_kx_load;
    select_ln26_fu_370_p3 <= 
        trunc_ln224_3_fu_360_p1 when (icmp_ln224_4_fu_364_p2(0) = '1') else 
        ap_const_lv8_0;
        sext_ln26_1_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_2_fu_330_p2),10));

        sext_ln26_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_1_fu_211_p2),10));

        sext_ln30_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_2_fu_429_p2),10));

    sub_ln32_fu_398_p2 <= std_logic_vector(unsigned(tmp_s_fu_390_p3) - unsigned(zext_ln32_2_fu_386_p1));
    tmp_s_fu_390_p3 <= (select_ln24_2_fu_378_p3 & ap_const_lv8_0);
    trunc_ln224_3_fu_360_p1 <= select_ln224_3_fu_352_p3(8 - 1 downto 0);
    trunc_ln224_4_fu_459_p1 <= select_ln224_2_fu_451_p3(9 - 1 downto 0);
    trunc_ln224_fu_241_p1 <= select_ln224_fu_233_p3(8 - 1 downto 0);
    zext_ln20_2_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln20_2),9));
    zext_ln30_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_1_fu_419_p2),10));
    zext_ln32_1_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_1_fu_306_p2),13));
    zext_ln32_2_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_2_fu_378_p3),16));
    zext_ln32_3_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_fu_286_p3),13));
    zext_ln32_4_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_3_fu_408_p2),64));
    zext_ln32_5_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_fu_469_p3),16));
    zext_ln32_6_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_4_fu_481_p2),64));
    zext_ln32_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_1_fu_294_p3),10));
end behav;

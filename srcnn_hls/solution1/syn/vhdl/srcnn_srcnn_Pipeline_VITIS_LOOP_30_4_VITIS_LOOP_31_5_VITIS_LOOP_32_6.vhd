-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_srcnn_Pipeline_VITIS_LOOP_30_4_VITIS_LOOP_31_5_VITIS_LOOP_32_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    feat2_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    feat2_ce0 : OUT STD_LOGIC;
    feat2_we0 : OUT STD_LOGIC;
    feat2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    feat2_address1 : OUT STD_LOGIC_VECTOR (20 downto 0);
    feat2_ce1 : OUT STD_LOGIC;
    feat2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_487_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_487_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_487_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_487_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_487_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_srcnn_Pipeline_VITIS_LOOP_30_4_VITIS_LOOP_31_5_VITIS_LOOP_32_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv21_1FC020 : STD_LOGIC_VECTOR (20 downto 0) := "111111100000000100000";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv16_FE01 : STD_LOGIC_VECTOR (15 downto 0) := "1111111000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln30_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal feat2_addr_reg_437 : STD_LOGIC_VECTOR (20 downto 0);
    signal feat2_addr_reg_437_pp0_iter2_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal feat2_load_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln34_4_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal x_fu_62 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_fu_304_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal y_fu_66 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln31_1_fu_249_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten40_fu_70 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln31_2_fu_316_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_fu_74 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln30_1_fu_177_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten53_fu_78 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln30_1_fu_139_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln31_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln30_fu_157_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_189_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln34_1_fu_197_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln34_fu_185_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln34_fu_201_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln32_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln30_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_169_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln30_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_fu_229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln31_fu_207_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln34_2_fu_257_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_fu_261_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_fu_271_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_fu_275_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln34_fu_267_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal select_ln31_fu_241_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln34_1_fu_283_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln34_3_fu_289_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln34_1_fu_293_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln31_1_fu_310_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln224_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_352_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln224_fu_362_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln224_1_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln224_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln224_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    c_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_74 <= ap_const_lv6_0;
                elsif (((icmp_ln30_fu_133_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    c_fu_74 <= select_ln30_1_fu_177_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten40_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten40_fu_70 <= ap_const_lv16_0;
                elsif (((icmp_ln30_fu_133_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten40_fu_70 <= select_ln31_2_fu_316_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten53_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten53_fu_78 <= ap_const_lv21_0;
                elsif (((icmp_ln30_fu_133_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten53_fu_78 <= add_ln30_1_fu_139_p2;
                end if;
            end if; 
        end if;
    end process;

    x_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_62 <= ap_const_lv8_0;
                elsif (((icmp_ln30_fu_133_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    x_fu_62 <= add_ln32_fu_304_p2;
                end if;
            end if; 
        end if;
    end process;

    y_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_66 <= ap_const_lv8_0;
                elsif (((icmp_ln30_fu_133_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    y_fu_66 <= select_ln31_1_fu_249_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_133_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                feat2_addr_reg_437 <= zext_ln34_4_fu_299_p1(21 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                feat2_addr_reg_437_pp0_iter2_reg <= feat2_addr_reg_437;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                feat2_load_reg_443 <= feat2_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln30_1_fu_139_p2 <= std_logic_vector(unsigned(indvar_flatten53_fu_78) + unsigned(ap_const_lv21_1));
    add_ln30_fu_157_p2 <= std_logic_vector(unsigned(c_fu_74) + unsigned(ap_const_lv6_1));
    add_ln31_1_fu_310_p2 <= std_logic_vector(unsigned(indvar_flatten40_fu_70) + unsigned(ap_const_lv16_1));
    add_ln31_fu_229_p2 <= std_logic_vector(unsigned(select_ln30_fu_169_p3) + unsigned(ap_const_lv8_1));
    add_ln32_fu_304_p2 <= std_logic_vector(unsigned(select_ln31_fu_241_p3) + unsigned(ap_const_lv8_1));
    add_ln34_1_fu_293_p2 <= std_logic_vector(unsigned(sub_ln34_1_fu_283_p2) + unsigned(zext_ln34_3_fu_289_p1));
    add_ln34_fu_261_p2 <= std_logic_vector(signed(sext_ln31_fu_207_p1) + signed(zext_ln34_2_fu_257_p1));
    and_ln224_fu_384_p2 <= (or_ln224_fu_378_p2 and grp_fu_487_p_dout0);
    and_ln30_fu_223_p2 <= (xor_ln30_fu_211_p2 and icmp_ln32_fu_217_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln30_fu_133_p2)
    begin
        if (((icmp_ln30_fu_133_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln224_fu_349_p1 <= feat2_load_reg_443;
    feat2_address0 <= feat2_addr_reg_437_pp0_iter2_reg;
    feat2_address1 <= zext_ln34_4_fu_299_p1(21 - 1 downto 0);

    feat2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            feat2_ce0 <= ap_const_logic_1;
        else 
            feat2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    feat2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            feat2_ce1 <= ap_const_logic_1;
        else 
            feat2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    feat2_d0 <= 
        feat2_load_reg_443 when (and_ln224_fu_384_p2(0) = '1') else 
        ap_const_lv32_0;

    feat2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            feat2_we0 <= ap_const_logic_1;
        else 
            feat2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_487_p_ce <= ap_const_logic_1;
    grp_fu_487_p_din0 <= feat2_q1;
    grp_fu_487_p_din1 <= ap_const_lv32_0;
    grp_fu_487_p_opcode <= ap_const_lv5_2;
    icmp_ln224_1_fu_372_p2 <= "1" when (trunc_ln224_fu_362_p1 = ap_const_lv23_0) else "0";
    icmp_ln224_fu_366_p2 <= "0" when (tmp_3_fu_352_p4 = ap_const_lv8_FF) else "1";
    icmp_ln30_fu_133_p2 <= "1" when (indvar_flatten53_fu_78 = ap_const_lv21_1FC020) else "0";
    icmp_ln31_fu_163_p2 <= "1" when (indvar_flatten40_fu_70 = ap_const_lv16_FE01) else "0";
    icmp_ln32_fu_217_p2 <= "1" when (x_fu_62 = ap_const_lv8_FF) else "0";
    or_ln224_fu_378_p2 <= (icmp_ln224_fu_366_p2 or icmp_ln224_1_fu_372_p2);
    or_ln31_fu_235_p2 <= (icmp_ln31_fu_163_p2 or and_ln30_fu_223_p2);
    p_shl6_fu_275_p3 <= (trunc_ln34_fu_271_p1 & ap_const_lv8_0);
    select_ln30_1_fu_177_p3 <= 
        add_ln30_fu_157_p2 when (icmp_ln31_fu_163_p2(0) = '1') else 
        c_fu_74;
    select_ln30_fu_169_p3 <= 
        ap_const_lv8_0 when (icmp_ln31_fu_163_p2(0) = '1') else 
        y_fu_66;
    select_ln31_1_fu_249_p3 <= 
        add_ln31_fu_229_p2 when (and_ln30_fu_223_p2(0) = '1') else 
        select_ln30_fu_169_p3;
    select_ln31_2_fu_316_p3 <= 
        ap_const_lv16_1 when (icmp_ln31_fu_163_p2(0) = '1') else 
        add_ln31_1_fu_310_p2;
    select_ln31_fu_241_p3 <= 
        ap_const_lv8_0 when (or_ln31_fu_235_p2(0) = '1') else 
        x_fu_62;
        sext_ln31_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln34_fu_201_p2),16));

        sext_ln34_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln34_fu_261_p2),21));

    sub_ln34_1_fu_283_p2 <= std_logic_vector(unsigned(p_shl6_fu_275_p3) - unsigned(sext_ln34_fu_267_p1));
    sub_ln34_fu_201_p2 <= std_logic_vector(unsigned(zext_ln34_1_fu_197_p1) - unsigned(zext_ln34_fu_185_p1));
    tmp_3_fu_352_p4 <= bitcast_ln224_fu_349_p1(30 downto 23);
    tmp_8_fu_189_p3 <= (select_ln30_1_fu_177_p3 & ap_const_lv8_0);
    trunc_ln224_fu_362_p1 <= bitcast_ln224_fu_349_p1(23 - 1 downto 0);
    trunc_ln34_fu_271_p1 <= add_ln34_fu_261_p2(13 - 1 downto 0);
    xor_ln30_fu_211_p2 <= (icmp_ln31_fu_163_p2 xor ap_const_lv1_1);
    zext_ln34_1_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_189_p3),15));
    zext_ln34_2_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_1_fu_249_p3),16));
    zext_ln34_3_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_fu_241_p3),21));
    zext_ln34_4_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_1_fu_293_p2),64));
    zext_ln34_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_1_fu_177_p3),15));
end behav;

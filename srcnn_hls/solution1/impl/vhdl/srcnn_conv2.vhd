-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv2_weights_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv2_weights_ce0 : OUT STD_LOGIC;
    conv2_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_biases_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv2_biases_ce0 : OUT STD_LOGIC;
    conv2_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    feat1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    feat1_ce0 : OUT STD_LOGIC;
    feat1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    feat2_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    feat2_ce0 : OUT STD_LOGIC;
    feat2_we0 : OUT STD_LOGIC;
    feat2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3424_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3424_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3424_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_3424_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3424_p_ce : OUT STD_LOGIC;
    grp_fu_3428_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3428_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3428_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3428_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sext_ln17_fu_215_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln17_reg_424 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_219_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_reg_429 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln10_fu_233_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln10_reg_437 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln10_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln20_2_fu_243_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln20_2_reg_452 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln20_1_fu_272_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln20_1_reg_457 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln11_fu_284_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln11_reg_465 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln20_4_fu_294_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln20_4_reg_470 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal feat2_addr_reg_475 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln12_fu_318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln12_reg_483 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln15_fu_407_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_reg_501 : STD_LOGIC_VECTOR (6 downto 0);
    signal feat1_load_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal conv2_weights_load_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln17_fu_413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal y_reg_123 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln12_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_reg_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln15_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ic_reg_145 : STD_LOGIC_VECTOR (6 downto 0);
    signal acc_4_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln10_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_6_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_3_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_4_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal oc_fu_68 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_fu_197_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln20_1_fu_205_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln20_fu_193_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln20_fu_209_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln10_fu_184_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln20_3_fu_247_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln20_fu_251_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln20_fu_260_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_fu_264_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln20_fu_256_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln20_5_fu_298_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln20_2_fu_302_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_1_fu_332_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln17_2_fu_340_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln17_1_fu_328_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln17_fu_344_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln17_1_fu_350_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln17_fu_354_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln17_fu_363_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_fu_367_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln17_2_fu_359_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln17_1_fu_375_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln17_1_fu_381_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln17_fu_324_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln17_2_fu_391_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    acc_4_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln12_fu_312_p2 = ap_const_lv1_0))) then 
                acc_4_reg_156 <= acc_reg_447;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                acc_4_reg_156 <= grp_fu_3424_p_dout0;
            end if; 
        end if;
    end process;

    ic_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln12_fu_312_p2 = ap_const_lv1_0))) then 
                ic_reg_145 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                ic_reg_145 <= add_ln15_reg_501;
            end if; 
        end if;
    end process;

    oc_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                oc_fu_68 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln11_fu_278_p2 = ap_const_lv1_1))) then 
                oc_fu_68 <= add_ln10_reg_437;
            end if; 
        end if;
    end process;

    x_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln11_fu_278_p2 = ap_const_lv1_0))) then 
                x_reg_134 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln15_fu_401_p2 = ap_const_lv1_1))) then 
                x_reg_134 <= add_ln12_reg_483;
            end if; 
        end if;
    end process;

    y_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                y_reg_123 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln12_fu_312_p2 = ap_const_lv1_1))) then 
                y_reg_123 <= add_ln11_reg_465;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                acc_reg_447 <= acc_fu_239_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln10_reg_437 <= add_ln10_fu_233_p2;
                sext_ln17_reg_424 <= sext_ln17_fu_215_p1;
                    tmp_s_reg_429(10 downto 6) <= tmp_s_fu_219_p3(10 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln11_reg_465 <= add_ln11_fu_284_p2;
                sub_ln20_1_reg_457 <= sub_ln20_1_fu_272_p2;
                    zext_ln20_2_reg_452(7 downto 0) <= zext_ln20_2_fu_243_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln12_reg_483 <= add_ln12_fu_318_p2;
                feat2_addr_reg_475 <= zext_ln20_6_fu_307_p1(21 - 1 downto 0);
                    zext_ln20_4_reg_470(7 downto 0) <= zext_ln20_4_fu_294_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln15_reg_501 <= add_ln15_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                conv2_weights_load_reg_511 <= conv2_weights_q0;
                feat1_load_reg_506 <= feat1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                mul_reg_521 <= grp_fu_3428_p_dout0;
            end if;
        end if;
    end process;
    tmp_s_reg_429(5 downto 0) <= "000000";
    zext_ln20_2_reg_452(16 downto 8) <= "000000000";
    zext_ln20_4_reg_470(21 downto 8) <= "00000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_227_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln12_fu_312_p2, icmp_ln15_fu_401_p2, icmp_ln11_fu_278_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln11_fu_278_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln12_fu_312_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln15_fu_401_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    acc_fu_239_p1 <= conv2_biases_q0;
    add_ln10_fu_233_p2 <= std_logic_vector(unsigned(oc_fu_68) + unsigned(ap_const_lv6_1));
    add_ln11_fu_284_p2 <= std_logic_vector(unsigned(y_reg_123) + unsigned(ap_const_lv8_1));
    add_ln12_fu_318_p2 <= std_logic_vector(unsigned(x_reg_134) + unsigned(ap_const_lv8_1));
    add_ln15_fu_407_p2 <= std_logic_vector(unsigned(ic_reg_145) + unsigned(ap_const_lv7_1));
    add_ln17_1_fu_381_p2 <= std_logic_vector(unsigned(sub_ln17_1_fu_375_p2) + unsigned(zext_ln20_4_reg_470));
    add_ln17_2_fu_391_p2 <= std_logic_vector(unsigned(tmp_s_reg_429) + unsigned(zext_ln17_fu_324_p1));
    add_ln17_fu_354_p2 <= std_logic_vector(signed(sext_ln17_1_fu_350_p1) + signed(zext_ln20_2_reg_452));
    add_ln20_2_fu_302_p2 <= std_logic_vector(unsigned(sub_ln20_1_reg_457) + unsigned(zext_ln20_5_fu_298_p1));
    add_ln20_fu_251_p2 <= std_logic_vector(signed(sext_ln17_reg_424) + signed(zext_ln20_3_fu_247_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_227_p2)
    begin
        if ((((icmp_ln10_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_227_p2)
    begin
        if (((icmp_ln10_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln17_fu_413_p1 <= conv2_weights_load_reg_511;
    conv2_biases_address0 <= zext_ln10_fu_188_p1(5 - 1 downto 0);

    conv2_biases_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv2_biases_ce0 <= ap_const_logic_1;
        else 
            conv2_biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_weights_address0 <= zext_ln17_4_fu_396_p1(11 - 1 downto 0);

    conv2_weights_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv2_weights_ce0 <= ap_const_logic_1;
        else 
            conv2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feat1_address0 <= zext_ln17_3_fu_386_p1(22 - 1 downto 0);

    feat1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            feat1_ce0 <= ap_const_logic_1;
        else 
            feat1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feat2_address0 <= feat2_addr_reg_475;

    feat2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            feat2_ce0 <= ap_const_logic_1;
        else 
            feat2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feat2_d0 <= acc_4_reg_156;

    feat2_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln15_fu_401_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln15_fu_401_p2 = ap_const_lv1_1))) then 
            feat2_we0 <= ap_const_logic_1;
        else 
            feat2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_3424_p_ce <= ap_const_logic_1;
    grp_fu_3424_p_din0 <= acc_4_reg_156;
    grp_fu_3424_p_din1 <= mul_reg_521;
    grp_fu_3424_p_opcode <= ap_const_lv2_0;
    grp_fu_3428_p_ce <= ap_const_logic_1;
    grp_fu_3428_p_din0 <= feat1_load_reg_506;
    grp_fu_3428_p_din1 <= bitcast_ln17_fu_413_p1;
    icmp_ln10_fu_227_p2 <= "1" when (oc_fu_68 = ap_const_lv6_20) else "0";
    icmp_ln11_fu_278_p2 <= "1" when (y_reg_123 = ap_const_lv8_FF) else "0";
    icmp_ln12_fu_312_p2 <= "1" when (x_reg_134 = ap_const_lv8_FF) else "0";
    icmp_ln15_fu_401_p2 <= "1" when (ic_reg_145 = ap_const_lv7_40) else "0";
    p_shl1_fu_264_p3 <= (trunc_ln20_fu_260_p1 & ap_const_lv8_0);
    p_shl2_fu_367_p3 <= (trunc_ln17_fu_363_p1 & ap_const_lv8_0);
        sext_ln17_1_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln17_fu_344_p2),17));

        sext_ln17_2_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln17_fu_354_p2),22));

        sext_ln17_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln20_fu_209_p2),16));

        sext_ln20_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln20_fu_251_p2),21));

    sub_ln17_1_fu_375_p2 <= std_logic_vector(unsigned(p_shl2_fu_367_p3) - unsigned(sext_ln17_2_fu_359_p1));
    sub_ln17_fu_344_p2 <= std_logic_vector(unsigned(zext_ln17_2_fu_340_p1) - unsigned(zext_ln17_1_fu_328_p1));
    sub_ln20_1_fu_272_p2 <= std_logic_vector(unsigned(p_shl1_fu_264_p3) - unsigned(sext_ln20_fu_256_p1));
    sub_ln20_fu_209_p2 <= std_logic_vector(unsigned(zext_ln20_1_fu_205_p1) - unsigned(zext_ln20_fu_193_p1));
    tmp_1_fu_332_p3 <= (ic_reg_145 & ap_const_lv8_0);
    tmp_fu_197_p3 <= (oc_fu_68 & ap_const_lv8_0);
    tmp_s_fu_219_p3 <= (trunc_ln10_fu_184_p1 & ap_const_lv6_0);
    trunc_ln10_fu_184_p1 <= oc_fu_68(5 - 1 downto 0);
    trunc_ln17_fu_363_p1 <= add_ln17_fu_354_p2(14 - 1 downto 0);
    trunc_ln20_fu_260_p1 <= add_ln20_fu_251_p2(13 - 1 downto 0);
    zext_ln10_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(oc_fu_68),64));
    zext_ln17_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ic_reg_145),16));
    zext_ln17_2_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_332_p3),16));
    zext_ln17_3_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_1_fu_381_p2),64));
    zext_ln17_4_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_2_fu_391_p2),64));
    zext_ln17_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ic_reg_145),11));
    zext_ln20_1_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_197_p3),15));
    zext_ln20_2_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_123),17));
    zext_ln20_3_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_123),16));
    zext_ln20_4_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_134),22));
    zext_ln20_5_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_134),21));
    zext_ln20_6_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_2_fu_302_p2),64));
    zext_ln20_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(oc_fu_68),15));
end behav;

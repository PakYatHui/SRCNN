-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_ftmap_ce0 : OUT STD_LOGIC;
    input_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_weights_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv1_weights_ce0 : OUT STD_LOGIC;
    conv1_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_biases_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    conv1_biases_ce0 : OUT STD_LOGIC;
    conv1_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_weights_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv2_weights_ce0 : OUT STD_LOGIC;
    conv2_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_biases_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv2_biases_ce0 : OUT STD_LOGIC;
    conv2_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_weights_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv3_weights_ce0 : OUT STD_LOGIC;
    conv3_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_biases : IN STD_LOGIC_VECTOR (31 downto 0);
    output_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_ftmap_ce0 : OUT STD_LOGIC;
    output_ftmap_we0 : OUT STD_LOGIC;
    output_ftmap_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "srcnn_srcnn,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.016000,HLS_SYN_LAT=-56745544,HLS_SYN_TPT=none,HLS_SYN_MEM=11086,HLS_SYN_DSP=0,HLS_SYN_FF=2065,HLS_SYN_LUT=4071,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal feat1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal feat1_ce0 : STD_LOGIC;
    signal feat1_we0 : STD_LOGIC;
    signal feat1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal feat1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal feat2_address0 : STD_LOGIC_VECTOR (20 downto 0);
    signal feat2_ce0 : STD_LOGIC;
    signal feat2_we0 : STD_LOGIC;
    signal feat2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal feat2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln18_fu_278_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln18_reg_578 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln18_fu_288_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_reg_586 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln21_1_fu_324_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln21_1_reg_598 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln19_fu_336_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln19_reg_606 : STD_LOGIC_VECTOR (7 downto 0);
    signal feat1_addr_reg_611 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln20_fu_366_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_reg_619 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln21_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln30_fu_437_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln30_reg_642 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln30_fu_447_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_reg_650 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln30_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln33_1_fu_483_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln33_1_reg_660 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln31_fu_495_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_reg_668 : STD_LOGIC_VECTOR (7 downto 0);
    signal feat2_addr_reg_673 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln32_fu_525_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_reg_681 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln33_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_1_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_1_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_200_ap_start : STD_LOGIC;
    signal grp_conv1_fu_200_ap_done : STD_LOGIC;
    signal grp_conv1_fu_200_ap_idle : STD_LOGIC;
    signal grp_conv1_fu_200_ap_ready : STD_LOGIC;
    signal grp_conv1_fu_200_input_ftmap_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_conv1_fu_200_input_ftmap_ce0 : STD_LOGIC;
    signal grp_conv1_fu_200_conv1_weights_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv1_fu_200_conv1_weights_ce0 : STD_LOGIC;
    signal grp_conv1_fu_200_conv1_biases_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_conv1_fu_200_conv1_biases_ce0 : STD_LOGIC;
    signal grp_conv1_fu_200_feat1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_conv1_fu_200_feat1_ce0 : STD_LOGIC;
    signal grp_conv1_fu_200_feat1_we0 : STD_LOGIC;
    signal grp_conv1_fu_200_feat1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_200_grp_fu_704_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_200_grp_fu_704_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_200_grp_fu_704_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_200_grp_fu_704_p_ce : STD_LOGIC;
    signal grp_conv1_fu_200_grp_fu_708_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_200_grp_fu_708_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_200_grp_fu_708_p_ce : STD_LOGIC;
    signal grp_conv2_fu_218_ap_start : STD_LOGIC;
    signal grp_conv2_fu_218_ap_done : STD_LOGIC;
    signal grp_conv2_fu_218_ap_idle : STD_LOGIC;
    signal grp_conv2_fu_218_ap_ready : STD_LOGIC;
    signal grp_conv2_fu_218_conv2_weights_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv2_fu_218_conv2_weights_ce0 : STD_LOGIC;
    signal grp_conv2_fu_218_conv2_biases_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv2_fu_218_conv2_biases_ce0 : STD_LOGIC;
    signal grp_conv2_fu_218_feat1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_conv2_fu_218_feat1_ce0 : STD_LOGIC;
    signal grp_conv2_fu_218_feat2_address0 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_conv2_fu_218_feat2_ce0 : STD_LOGIC;
    signal grp_conv2_fu_218_feat2_we0 : STD_LOGIC;
    signal grp_conv2_fu_218_feat2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_218_grp_fu_704_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_218_grp_fu_704_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_218_grp_fu_704_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_218_grp_fu_704_p_ce : STD_LOGIC;
    signal grp_conv2_fu_218_grp_fu_708_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_218_grp_fu_708_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_218_grp_fu_708_p_ce : STD_LOGIC;
    signal grp_conv3_fu_230_ap_start : STD_LOGIC;
    signal grp_conv3_fu_230_ap_done : STD_LOGIC;
    signal grp_conv3_fu_230_ap_idle : STD_LOGIC;
    signal grp_conv3_fu_230_ap_ready : STD_LOGIC;
    signal grp_conv3_fu_230_conv3_weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv3_fu_230_conv3_weights_ce0 : STD_LOGIC;
    signal grp_conv3_fu_230_output_ftmap_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_conv3_fu_230_output_ftmap_ce0 : STD_LOGIC;
    signal grp_conv3_fu_230_output_ftmap_we0 : STD_LOGIC;
    signal grp_conv3_fu_230_output_ftmap_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_230_feat2_address0 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_conv3_fu_230_feat2_ce0 : STD_LOGIC;
    signal grp_conv3_fu_230_grp_fu_704_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_230_grp_fu_704_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_230_grp_fu_704_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_230_grp_fu_704_p_ce : STD_LOGIC;
    signal grp_conv3_fu_230_grp_fu_708_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_230_grp_fu_708_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_230_grp_fu_708_p_ce : STD_LOGIC;
    signal y_reg_156 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln20_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_reg_167 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln19_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal y_1_reg_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln32_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_reg_189 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln31_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_conv1_fu_200_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_conv2_fu_218_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_conv3_fu_230_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln21_4_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_4_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_fu_114 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_1_fu_118 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln21_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_241_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_260_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln21_1_fu_268_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln21_fu_256_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln21_fu_272_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln21_2_fu_299_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln21_fu_303_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln21_fu_312_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_fu_316_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln21_fu_308_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln21_3_fu_346_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln21_1_fu_350_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal bitcast_ln21_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_376_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_1_fu_386_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln21_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_419_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln33_1_fu_427_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln33_fu_415_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln33_fu_431_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln33_2_fu_458_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln33_fu_462_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln33_fu_471_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_fu_475_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln33_fu_467_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln33_3_fu_505_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln33_1_fu_509_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal bitcast_ln33_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_535_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_1_fu_545_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln33_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_704_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_704_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_704_ce : STD_LOGIC;
    signal grp_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_708_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_708_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_708_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_conv1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_ftmap_ce0 : OUT STD_LOGIC;
        input_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_weights_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        conv1_weights_ce0 : OUT STD_LOGIC;
        conv1_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_biases_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        conv1_biases_ce0 : OUT STD_LOGIC;
        conv1_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        feat1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        feat1_ce0 : OUT STD_LOGIC;
        feat1_we0 : OUT STD_LOGIC;
        feat1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_704_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_704_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_704_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_704_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_704_p_ce : OUT STD_LOGIC;
        grp_fu_708_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_708_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_708_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_708_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_conv2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv2_weights_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv2_weights_ce0 : OUT STD_LOGIC;
        conv2_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv2_biases_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        conv2_biases_ce0 : OUT STD_LOGIC;
        conv2_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        feat1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        feat1_ce0 : OUT STD_LOGIC;
        feat1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        feat2_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
        feat2_ce0 : OUT STD_LOGIC;
        feat2_we0 : OUT STD_LOGIC;
        feat2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_704_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_704_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_704_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_704_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_704_p_ce : OUT STD_LOGIC;
        grp_fu_708_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_708_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_708_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_708_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_conv3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv3_weights_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv3_weights_ce0 : OUT STD_LOGIC;
        conv3_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_0_0_val : IN STD_LOGIC_VECTOR (31 downto 0);
        output_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_ftmap_ce0 : OUT STD_LOGIC;
        output_ftmap_we0 : OUT STD_LOGIC;
        output_ftmap_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        feat2_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
        feat2_ce0 : OUT STD_LOGIC;
        feat2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_704_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_704_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_704_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_704_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_704_p_ce : OUT STD_LOGIC;
        grp_fu_708_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_708_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_708_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_708_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_feat1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_feat2_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    feat1_U : component srcnn_feat1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4161600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => feat1_address0,
        ce0 => feat1_ce0,
        we0 => feat1_we0,
        d0 => feat1_d0,
        q0 => feat1_q0);

    feat2_U : component srcnn_feat2_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 2080800,
        AddressWidth => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => feat2_address0,
        ce0 => feat2_ce0,
        we0 => feat2_we0,
        d0 => feat2_d0,
        q0 => feat2_q0);

    grp_conv1_fu_200 : component srcnn_conv1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv1_fu_200_ap_start,
        ap_done => grp_conv1_fu_200_ap_done,
        ap_idle => grp_conv1_fu_200_ap_idle,
        ap_ready => grp_conv1_fu_200_ap_ready,
        input_ftmap_address0 => grp_conv1_fu_200_input_ftmap_address0,
        input_ftmap_ce0 => grp_conv1_fu_200_input_ftmap_ce0,
        input_ftmap_q0 => input_ftmap_q0,
        conv1_weights_address0 => grp_conv1_fu_200_conv1_weights_address0,
        conv1_weights_ce0 => grp_conv1_fu_200_conv1_weights_ce0,
        conv1_weights_q0 => conv1_weights_q0,
        conv1_biases_address0 => grp_conv1_fu_200_conv1_biases_address0,
        conv1_biases_ce0 => grp_conv1_fu_200_conv1_biases_ce0,
        conv1_biases_q0 => conv1_biases_q0,
        feat1_address0 => grp_conv1_fu_200_feat1_address0,
        feat1_ce0 => grp_conv1_fu_200_feat1_ce0,
        feat1_we0 => grp_conv1_fu_200_feat1_we0,
        feat1_d0 => grp_conv1_fu_200_feat1_d0,
        grp_fu_704_p_din0 => grp_conv1_fu_200_grp_fu_704_p_din0,
        grp_fu_704_p_din1 => grp_conv1_fu_200_grp_fu_704_p_din1,
        grp_fu_704_p_opcode => grp_conv1_fu_200_grp_fu_704_p_opcode,
        grp_fu_704_p_dout0 => grp_fu_704_p2,
        grp_fu_704_p_ce => grp_conv1_fu_200_grp_fu_704_p_ce,
        grp_fu_708_p_din0 => grp_conv1_fu_200_grp_fu_708_p_din0,
        grp_fu_708_p_din1 => grp_conv1_fu_200_grp_fu_708_p_din1,
        grp_fu_708_p_dout0 => grp_fu_708_p2,
        grp_fu_708_p_ce => grp_conv1_fu_200_grp_fu_708_p_ce);

    grp_conv2_fu_218 : component srcnn_conv2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv2_fu_218_ap_start,
        ap_done => grp_conv2_fu_218_ap_done,
        ap_idle => grp_conv2_fu_218_ap_idle,
        ap_ready => grp_conv2_fu_218_ap_ready,
        conv2_weights_address0 => grp_conv2_fu_218_conv2_weights_address0,
        conv2_weights_ce0 => grp_conv2_fu_218_conv2_weights_ce0,
        conv2_weights_q0 => conv2_weights_q0,
        conv2_biases_address0 => grp_conv2_fu_218_conv2_biases_address0,
        conv2_biases_ce0 => grp_conv2_fu_218_conv2_biases_ce0,
        conv2_biases_q0 => conv2_biases_q0,
        feat1_address0 => grp_conv2_fu_218_feat1_address0,
        feat1_ce0 => grp_conv2_fu_218_feat1_ce0,
        feat1_q0 => feat1_q0,
        feat2_address0 => grp_conv2_fu_218_feat2_address0,
        feat2_ce0 => grp_conv2_fu_218_feat2_ce0,
        feat2_we0 => grp_conv2_fu_218_feat2_we0,
        feat2_d0 => grp_conv2_fu_218_feat2_d0,
        grp_fu_704_p_din0 => grp_conv2_fu_218_grp_fu_704_p_din0,
        grp_fu_704_p_din1 => grp_conv2_fu_218_grp_fu_704_p_din1,
        grp_fu_704_p_opcode => grp_conv2_fu_218_grp_fu_704_p_opcode,
        grp_fu_704_p_dout0 => grp_fu_704_p2,
        grp_fu_704_p_ce => grp_conv2_fu_218_grp_fu_704_p_ce,
        grp_fu_708_p_din0 => grp_conv2_fu_218_grp_fu_708_p_din0,
        grp_fu_708_p_din1 => grp_conv2_fu_218_grp_fu_708_p_din1,
        grp_fu_708_p_dout0 => grp_fu_708_p2,
        grp_fu_708_p_ce => grp_conv2_fu_218_grp_fu_708_p_ce);

    grp_conv3_fu_230 : component srcnn_conv3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv3_fu_230_ap_start,
        ap_done => grp_conv3_fu_230_ap_done,
        ap_idle => grp_conv3_fu_230_ap_idle,
        ap_ready => grp_conv3_fu_230_ap_ready,
        conv3_weights_address0 => grp_conv3_fu_230_conv3_weights_address0,
        conv3_weights_ce0 => grp_conv3_fu_230_conv3_weights_ce0,
        conv3_weights_q0 => conv3_weights_q0,
        b_0_0_val => empty_reg_655,
        output_ftmap_address0 => grp_conv3_fu_230_output_ftmap_address0,
        output_ftmap_ce0 => grp_conv3_fu_230_output_ftmap_ce0,
        output_ftmap_we0 => grp_conv3_fu_230_output_ftmap_we0,
        output_ftmap_d0 => grp_conv3_fu_230_output_ftmap_d0,
        feat2_address0 => grp_conv3_fu_230_feat2_address0,
        feat2_ce0 => grp_conv3_fu_230_feat2_ce0,
        feat2_q0 => feat2_q0,
        grp_fu_704_p_din0 => grp_conv3_fu_230_grp_fu_704_p_din0,
        grp_fu_704_p_din1 => grp_conv3_fu_230_grp_fu_704_p_din1,
        grp_fu_704_p_opcode => grp_conv3_fu_230_grp_fu_704_p_opcode,
        grp_fu_704_p_dout0 => grp_fu_704_p2,
        grp_fu_704_p_ce => grp_conv3_fu_230_grp_fu_704_p_ce,
        grp_fu_708_p_din0 => grp_conv3_fu_230_grp_fu_708_p_din0,
        grp_fu_708_p_din1 => grp_conv3_fu_230_grp_fu_708_p_din1,
        grp_fu_708_p_dout0 => grp_fu_708_p2,
        grp_fu_708_p_ce => grp_conv3_fu_230_grp_fu_708_p_ce);

    fcmp_32ns_32ns_1_2_no_dsp_1_U22 : component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_241_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_241_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U23 : component srcnn_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_704_p0,
        din1 => grp_fu_704_p1,
        ce => grp_fu_704_ce,
        dout => grp_fu_704_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U24 : component srcnn_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_708_p0,
        din1 => grp_fu_708_p1,
        ce => grp_fu_708_ce,
        dout => grp_fu_708_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv1_fu_200_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv1_fu_200_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_conv1_fu_200_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv1_fu_200_ap_ready = ap_const_logic_1)) then 
                    grp_conv1_fu_200_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv2_fu_218_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv2_fu_218_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln18_fu_282_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_conv2_fu_218_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2_fu_218_ap_ready = ap_const_logic_1)) then 
                    grp_conv2_fu_218_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv3_fu_230_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv3_fu_230_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln30_fu_441_p2 = ap_const_lv1_1))) then 
                    grp_conv3_fu_230_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv3_fu_230_ap_ready = ap_const_logic_1)) then 
                    grp_conv3_fu_230_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_1_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_282_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_1_fu_118 <= ap_const_lv6_0;
            elsif (((icmp_ln31_fu_489_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                c_1_fu_118 <= add_ln30_reg_650;
            end if; 
        end if;
    end process;

    c_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_fu_114 <= ap_const_lv7_0;
            elsif (((icmp_ln19_fu_330_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_fu_114 <= add_ln18_reg_586;
            end if; 
        end if;
    end process;

    x_1_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                x_1_reg_189 <= add_ln32_reg_681;
            elsif (((icmp_ln31_fu_489_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                x_1_reg_189 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    x_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                x_reg_167 <= add_ln20_reg_619;
            elsif (((icmp_ln19_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_reg_167 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    y_1_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln30_fu_441_p2 = ap_const_lv1_0))) then 
                y_1_reg_178 <= ap_const_lv8_0;
            elsif (((icmp_ln32_fu_519_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                y_1_reg_178 <= add_ln31_reg_668;
            end if; 
        end if;
    end process;

    y_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_reg_156 <= ap_const_lv8_0;
            elsif (((icmp_ln20_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_reg_156 <= add_ln19_reg_606;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln18_reg_586 <= add_ln18_fu_288_p2;
                sext_ln18_reg_578 <= sext_ln18_fu_278_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln19_reg_606 <= add_ln19_fu_336_p2;
                sub_ln21_1_reg_598 <= sub_ln21_1_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln20_reg_619 <= add_ln20_fu_366_p2;
                feat1_addr_reg_611 <= zext_ln21_4_fu_355_p1(22 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln30_reg_650 <= add_ln30_fu_447_p2;
                sext_ln30_reg_642 <= sext_ln30_fu_437_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln31_reg_668 <= add_ln31_fu_495_p2;
                sub_ln33_1_reg_660 <= sub_ln33_1_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln32_reg_681 <= add_ln32_fu_525_p2;
                feat2_addr_reg_673 <= zext_ln33_4_fu_514_p1(21 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln30_fu_441_p2 = ap_const_lv1_1))) then
                empty_reg_655 <= empty_fu_453_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln21_1_reg_634 <= icmp_ln21_1_fu_396_p2;
                icmp_ln21_reg_629 <= icmp_ln21_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                icmp_ln33_1_reg_696 <= icmp_ln33_1_fu_555_p2;
                icmp_ln33_reg_691 <= icmp_ln33_fu_549_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state9, icmp_ln30_fu_441_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, grp_conv1_fu_200_ap_done, grp_conv2_fu_218_ap_done, grp_conv3_fu_230_ap_done, icmp_ln20_fu_360_p2, icmp_ln18_fu_282_p2, icmp_ln19_fu_330_p2, icmp_ln32_fu_519_p2, icmp_ln31_fu_489_p2, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_conv1_fu_200_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln18_fu_282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln19_fu_330_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln20_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                if (((grp_conv2_fu_218_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln30_fu_441_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln31_fu_489_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln32_fu_519_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state14 => 
                if (((grp_conv3_fu_230_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln18_fu_288_p2 <= std_logic_vector(unsigned(c_fu_114) + unsigned(ap_const_lv7_1));
    add_ln19_fu_336_p2 <= std_logic_vector(unsigned(y_reg_156) + unsigned(ap_const_lv8_1));
    add_ln20_fu_366_p2 <= std_logic_vector(unsigned(x_reg_167) + unsigned(ap_const_lv8_1));
    add_ln21_1_fu_350_p2 <= std_logic_vector(unsigned(sub_ln21_1_reg_598) + unsigned(zext_ln21_3_fu_346_p1));
    add_ln21_fu_303_p2 <= std_logic_vector(signed(sext_ln18_reg_578) + signed(zext_ln21_2_fu_299_p1));
    add_ln30_fu_447_p2 <= std_logic_vector(unsigned(c_1_fu_118) + unsigned(ap_const_lv6_1));
    add_ln31_fu_495_p2 <= std_logic_vector(unsigned(y_1_reg_178) + unsigned(ap_const_lv8_1));
    add_ln32_fu_525_p2 <= std_logic_vector(unsigned(x_1_reg_189) + unsigned(ap_const_lv8_1));
    add_ln33_1_fu_509_p2 <= std_logic_vector(unsigned(sub_ln33_1_reg_660) + unsigned(zext_ln33_3_fu_505_p1));
    add_ln33_fu_462_p2 <= std_logic_vector(signed(sext_ln30_reg_642) + signed(zext_ln33_2_fu_458_p1));
    and_ln21_fu_406_p2 <= (or_ln21_fu_402_p2 and grp_fu_241_p2);
    and_ln33_fu_565_p2 <= (or_ln33_fu_561_p2 and grp_fu_241_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(grp_conv3_fu_230_ap_done)
    begin
        if ((grp_conv3_fu_230_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_conv1_fu_200_ap_done)
    begin
        if ((grp_conv1_fu_200_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_conv2_fu_218_ap_done)
    begin
        if ((grp_conv2_fu_218_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_conv3_fu_230_ap_done, ap_CS_fsm_state14)
    begin
        if (((grp_conv3_fu_230_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_conv3_fu_230_ap_done, ap_CS_fsm_state14)
    begin
        if (((grp_conv3_fu_230_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln21_fu_372_p1 <= feat1_q0;
    bitcast_ln33_fu_531_p1 <= feat2_q0;
    conv1_biases_address0 <= grp_conv1_fu_200_conv1_biases_address0;
    conv1_biases_ce0 <= grp_conv1_fu_200_conv1_biases_ce0;
    conv1_weights_address0 <= grp_conv1_fu_200_conv1_weights_address0;
    conv1_weights_ce0 <= grp_conv1_fu_200_conv1_weights_ce0;
    conv2_biases_address0 <= grp_conv2_fu_218_conv2_biases_address0;
    conv2_biases_ce0 <= grp_conv2_fu_218_conv2_biases_ce0;
    conv2_weights_address0 <= grp_conv2_fu_218_conv2_weights_address0;
    conv2_weights_ce0 <= grp_conv2_fu_218_conv2_weights_ce0;
    conv3_weights_address0 <= grp_conv3_fu_230_conv3_weights_address0;
    conv3_weights_ce0 <= grp_conv3_fu_230_conv3_weights_ce0;
    empty_fu_453_p1 <= conv3_biases;

    feat1_address0_assign_proc : process(feat1_addr_reg_611, ap_CS_fsm_state5, grp_conv1_fu_200_feat1_address0, grp_conv2_fu_218_feat1_address0, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state8, zext_ln21_4_fu_355_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            feat1_address0 <= feat1_addr_reg_611;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            feat1_address0 <= zext_ln21_4_fu_355_p1(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            feat1_address0 <= grp_conv2_fu_218_feat1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            feat1_address0 <= grp_conv1_fu_200_feat1_address0;
        else 
            feat1_address0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    feat1_ce0_assign_proc : process(ap_CS_fsm_state5, grp_conv1_fu_200_feat1_ce0, grp_conv2_fu_218_feat1_ce0, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            feat1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            feat1_ce0 <= grp_conv2_fu_218_feat1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            feat1_ce0 <= grp_conv1_fu_200_feat1_ce0;
        else 
            feat1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    feat1_d0_assign_proc : process(grp_conv1_fu_200_feat1_d0, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            feat1_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            feat1_d0 <= grp_conv1_fu_200_feat1_d0;
        else 
            feat1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    feat1_we0_assign_proc : process(grp_conv1_fu_200_feat1_we0, ap_CS_fsm_state7, ap_CS_fsm_state2, and_ln21_fu_406_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln21_fu_406_p2))) then 
            feat1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            feat1_we0 <= grp_conv1_fu_200_feat1_we0;
        else 
            feat1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    feat2_address0_assign_proc : process(feat2_addr_reg_673, ap_CS_fsm_state11, grp_conv2_fu_218_feat2_address0, grp_conv3_fu_230_feat2_address0, ap_CS_fsm_state13, ap_CS_fsm_state8, ap_CS_fsm_state14, zext_ln33_4_fu_514_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            feat2_address0 <= feat2_addr_reg_673;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            feat2_address0 <= zext_ln33_4_fu_514_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            feat2_address0 <= grp_conv3_fu_230_feat2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            feat2_address0 <= grp_conv2_fu_218_feat2_address0;
        else 
            feat2_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    feat2_ce0_assign_proc : process(ap_CS_fsm_state11, grp_conv2_fu_218_feat2_ce0, grp_conv3_fu_230_feat2_ce0, ap_CS_fsm_state13, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            feat2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            feat2_ce0 <= grp_conv3_fu_230_feat2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            feat2_ce0 <= grp_conv2_fu_218_feat2_ce0;
        else 
            feat2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    feat2_d0_assign_proc : process(grp_conv2_fu_218_feat2_d0, ap_CS_fsm_state13, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            feat2_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            feat2_d0 <= grp_conv2_fu_218_feat2_d0;
        else 
            feat2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    feat2_we0_assign_proc : process(grp_conv2_fu_218_feat2_we0, ap_CS_fsm_state13, ap_CS_fsm_state8, and_ln33_fu_565_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = and_ln33_fu_565_p2))) then 
            feat2_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            feat2_we0 <= grp_conv2_fu_218_feat2_we0;
        else 
            feat2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv1_fu_200_ap_start <= grp_conv1_fu_200_ap_start_reg;
    grp_conv2_fu_218_ap_start <= grp_conv2_fu_218_ap_start_reg;
    grp_conv3_fu_230_ap_start <= grp_conv3_fu_230_ap_start_reg;

    grp_fu_241_p0_assign_proc : process(feat1_q0, feat2_q0, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_241_p0 <= feat2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_241_p0 <= feat1_q0;
        else 
            grp_fu_241_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_704_ce_assign_proc : process(grp_conv1_fu_200_grp_fu_704_p_ce, grp_conv2_fu_218_grp_fu_704_p_ce, grp_conv3_fu_230_grp_fu_704_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_704_ce <= grp_conv3_fu_230_grp_fu_704_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_704_ce <= grp_conv2_fu_218_grp_fu_704_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_704_ce <= grp_conv1_fu_200_grp_fu_704_p_ce;
        else 
            grp_fu_704_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_704_p0_assign_proc : process(grp_conv1_fu_200_grp_fu_704_p_din0, grp_conv2_fu_218_grp_fu_704_p_din0, grp_conv3_fu_230_grp_fu_704_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_704_p0 <= grp_conv3_fu_230_grp_fu_704_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_704_p0 <= grp_conv2_fu_218_grp_fu_704_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_704_p0 <= grp_conv1_fu_200_grp_fu_704_p_din0;
        else 
            grp_fu_704_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_704_p1_assign_proc : process(grp_conv1_fu_200_grp_fu_704_p_din1, grp_conv2_fu_218_grp_fu_704_p_din1, grp_conv3_fu_230_grp_fu_704_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_704_p1 <= grp_conv3_fu_230_grp_fu_704_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_704_p1 <= grp_conv2_fu_218_grp_fu_704_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_704_p1 <= grp_conv1_fu_200_grp_fu_704_p_din1;
        else 
            grp_fu_704_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_708_ce_assign_proc : process(grp_conv1_fu_200_grp_fu_708_p_ce, grp_conv2_fu_218_grp_fu_708_p_ce, grp_conv3_fu_230_grp_fu_708_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_708_ce <= grp_conv3_fu_230_grp_fu_708_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_708_ce <= grp_conv2_fu_218_grp_fu_708_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_708_ce <= grp_conv1_fu_200_grp_fu_708_p_ce;
        else 
            grp_fu_708_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_708_p0_assign_proc : process(grp_conv1_fu_200_grp_fu_708_p_din0, grp_conv2_fu_218_grp_fu_708_p_din0, grp_conv3_fu_230_grp_fu_708_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_708_p0 <= grp_conv3_fu_230_grp_fu_708_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_708_p0 <= grp_conv2_fu_218_grp_fu_708_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_708_p0 <= grp_conv1_fu_200_grp_fu_708_p_din0;
        else 
            grp_fu_708_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_708_p1_assign_proc : process(grp_conv1_fu_200_grp_fu_708_p_din1, grp_conv2_fu_218_grp_fu_708_p_din1, grp_conv3_fu_230_grp_fu_708_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_708_p1 <= grp_conv3_fu_230_grp_fu_708_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_708_p1 <= grp_conv2_fu_218_grp_fu_708_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_708_p1 <= grp_conv1_fu_200_grp_fu_708_p_din1;
        else 
            grp_fu_708_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln18_fu_282_p2 <= "1" when (c_fu_114 = ap_const_lv7_40) else "0";
    icmp_ln19_fu_330_p2 <= "1" when (y_reg_156 = ap_const_lv8_FF) else "0";
    icmp_ln20_fu_360_p2 <= "1" when (x_reg_167 = ap_const_lv8_FF) else "0";
    icmp_ln21_1_fu_396_p2 <= "1" when (trunc_ln21_1_fu_386_p1 = ap_const_lv23_0) else "0";
    icmp_ln21_fu_390_p2 <= "0" when (tmp_fu_376_p4 = ap_const_lv8_FF) else "1";
    icmp_ln30_fu_441_p2 <= "1" when (c_1_fu_118 = ap_const_lv6_20) else "0";
    icmp_ln31_fu_489_p2 <= "1" when (y_1_reg_178 = ap_const_lv8_FF) else "0";
    icmp_ln32_fu_519_p2 <= "1" when (x_1_reg_189 = ap_const_lv8_FF) else "0";
    icmp_ln33_1_fu_555_p2 <= "1" when (trunc_ln33_1_fu_545_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_fu_549_p2 <= "0" when (tmp_2_fu_535_p4 = ap_const_lv8_FF) else "1";
    input_ftmap_address0 <= grp_conv1_fu_200_input_ftmap_address0;
    input_ftmap_ce0 <= grp_conv1_fu_200_input_ftmap_ce0;
    or_ln21_fu_402_p2 <= (icmp_ln21_reg_629 or icmp_ln21_1_reg_634);
    or_ln33_fu_561_p2 <= (icmp_ln33_reg_691 or icmp_ln33_1_reg_696);
    output_ftmap_address0 <= grp_conv3_fu_230_output_ftmap_address0;
    output_ftmap_ce0 <= grp_conv3_fu_230_output_ftmap_ce0;
    output_ftmap_d0 <= grp_conv3_fu_230_output_ftmap_d0;
    output_ftmap_we0 <= grp_conv3_fu_230_output_ftmap_we0;
    p_shl1_fu_316_p3 <= (trunc_ln21_fu_312_p1 & ap_const_lv8_0);
    p_shl3_fu_475_p3 <= (trunc_ln33_fu_471_p1 & ap_const_lv8_0);
        sext_ln18_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln21_fu_272_p2),17));

        sext_ln21_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln21_fu_303_p2),22));

        sext_ln30_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln33_fu_431_p2),16));

        sext_ln33_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln33_fu_462_p2),21));

    sub_ln21_1_fu_324_p2 <= std_logic_vector(unsigned(p_shl1_fu_316_p3) - unsigned(sext_ln21_fu_308_p1));
    sub_ln21_fu_272_p2 <= std_logic_vector(unsigned(zext_ln21_1_fu_268_p1) - unsigned(zext_ln21_fu_256_p1));
    sub_ln33_1_fu_483_p2 <= std_logic_vector(unsigned(p_shl3_fu_475_p3) - unsigned(sext_ln33_fu_467_p1));
    sub_ln33_fu_431_p2 <= std_logic_vector(unsigned(zext_ln33_1_fu_427_p1) - unsigned(zext_ln33_fu_415_p1));
    tmp_2_fu_535_p4 <= bitcast_ln33_fu_531_p1(30 downto 23);
    tmp_4_fu_260_p3 <= (c_fu_114 & ap_const_lv8_0);
    tmp_5_fu_419_p3 <= (c_1_fu_118 & ap_const_lv8_0);
    tmp_fu_376_p4 <= bitcast_ln21_fu_372_p1(30 downto 23);
    trunc_ln21_1_fu_386_p1 <= bitcast_ln21_fu_372_p1(23 - 1 downto 0);
    trunc_ln21_fu_312_p1 <= add_ln21_fu_303_p2(14 - 1 downto 0);
    trunc_ln33_1_fu_545_p1 <= bitcast_ln33_fu_531_p1(23 - 1 downto 0);
    trunc_ln33_fu_471_p1 <= add_ln33_fu_462_p2(13 - 1 downto 0);
    zext_ln21_1_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_260_p3),16));
    zext_ln21_2_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_156),17));
    zext_ln21_3_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_167),22));
    zext_ln21_4_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_1_fu_350_p2),64));
    zext_ln21_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_114),16));
    zext_ln33_1_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_419_p3),15));
    zext_ln33_2_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_reg_178),16));
    zext_ln33_3_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_189),21));
    zext_ln33_4_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln33_1_fu_509_p2),64));
    zext_ln33_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_1_fu_118),15));
end behav;

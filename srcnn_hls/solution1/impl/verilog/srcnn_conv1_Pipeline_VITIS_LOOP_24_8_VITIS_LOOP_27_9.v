// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv1_Pipeline_VITIS_LOOP_24_8_VITIS_LOOP_27_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        select_ln18_2,
        select_ln19_8,
        add_ln32,
        conv1_weights_address0,
        conv1_weights_ce0,
        conv1_weights_q0,
        select_ln15_2,
        zext_ln20_2,
        input_ftmap_address0,
        input_ftmap_ce0,
        input_ftmap_q0,
        acc_6_out,
        acc_6_out_ap_vld,
        grp_fu_1176_p_din0,
        grp_fu_1176_p_din1,
        grp_fu_1176_p_opcode,
        grp_fu_1176_p_dout0,
        grp_fu_1176_p_ce,
        grp_fu_1180_p_din0,
        grp_fu_1180_p_din1,
        grp_fu_1180_p_dout0,
        grp_fu_1180_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] select_ln18_2;
input  [8:0] select_ln19_8;
input  [9:0] add_ln32;
output  [12:0] conv1_weights_address0;
output   conv1_weights_ce0;
input  [31:0] conv1_weights_q0;
input  [7:0] select_ln15_2;
input  [4:0] zext_ln20_2;
output  [15:0] input_ftmap_address0;
output   input_ftmap_ce0;
input  [31:0] input_ftmap_q0;
output  [31:0] acc_6_out;
output   acc_6_out_ap_vld;
output  [31:0] grp_fu_1176_p_din0;
output  [31:0] grp_fu_1176_p_din1;
output  [1:0] grp_fu_1176_p_opcode;
input  [31:0] grp_fu_1176_p_dout0;
output   grp_fu_1176_p_ce;
output  [31:0] grp_fu_1180_p_din0;
output  [31:0] grp_fu_1180_p_din1;
input  [31:0] grp_fu_1180_p_dout0;
output   grp_fu_1180_p_ce;

reg ap_idle;
reg conv1_weights_ce0;
reg input_ftmap_ce0;
reg acc_6_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_state9_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln24_reg_563;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln24_fu_259_p2;
reg   [0:0] icmp_ln24_reg_563_pp0_iter1_reg;
reg   [31:0] input_ftmap_load_reg_577;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] conv1_weights_load_reg_582;
wire   [31:0] bitcast_ln32_fu_513_p1;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] bitcast_ln32_1_fu_517_p1;
reg   [31:0] mul_reg_597;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln32_4_fu_414_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln32_6_fu_487_p1;
reg   [31:0] acc_4_fu_86;
reg   [31:0] ap_sig_allocacmp_acc_4_load_1;
wire    ap_block_pp0_stage2;
wire    ap_loop_init;
reg   [3:0] kx_fu_90;
wire   [3:0] add_ln27_fu_492_p2;
reg   [3:0] ap_sig_allocacmp_kx_load;
reg   [3:0] ky_fu_94;
wire   [3:0] select_ln24_1_fu_294_p3;
reg   [3:0] ap_sig_allocacmp_ky_2;
reg   [6:0] indvar_flatten_fu_98;
wire   [6:0] add_ln24_1_fu_265_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire    ap_block_pp0_stage2_01001;
wire   [3:0] add_ln26_1_fu_211_p2;
wire  signed [9:0] sext_ln26_fu_217_p1;
wire   [9:0] select_ln19_8_cast_fu_181_p1;
wire   [9:0] add_ln26_fu_221_p2;
wire   [0:0] icmp_ln200_fu_227_p2;
wire   [9:0] select_ln224_fu_233_p3;
wire   [0:0] icmp_ln224_fu_245_p2;
wire   [7:0] trunc_ln224_fu_241_p1;
wire   [0:0] icmp_ln27_fu_280_p2;
wire   [3:0] add_ln24_fu_274_p2;
wire   [9:0] zext_ln32_fu_302_p1;
wire   [9:0] add_ln32_1_fu_306_p2;
wire   [12:0] p_shl2_fu_316_p3;
wire   [12:0] zext_ln32_1_fu_312_p1;
wire   [3:0] add_ln26_2_fu_330_p2;
wire  signed [9:0] sext_ln26_1_fu_336_p1;
wire   [9:0] add_ln26_3_fu_340_p2;
wire   [0:0] icmp_ln200_3_fu_346_p2;
wire   [9:0] select_ln224_3_fu_352_p3;
wire   [0:0] icmp_ln224_4_fu_364_p2;
wire   [7:0] trunc_ln224_3_fu_360_p1;
wire   [7:0] select_ln26_fu_370_p3;
wire   [7:0] iy_fu_251_p3;
wire   [7:0] select_ln24_2_fu_378_p3;
wire   [15:0] tmp_s_fu_390_p3;
wire   [15:0] zext_ln32_2_fu_386_p1;
wire   [3:0] select_ln24_fu_286_p3;
wire   [12:0] add_ln32_2_fu_324_p2;
wire   [12:0] zext_ln32_3_fu_404_p1;
wire   [12:0] add_ln32_3_fu_408_p2;
wire   [8:0] select_ln15_2_cast_fu_177_p1;
wire   [8:0] zext_ln20_2_cast_fu_173_p1;
wire   [8:0] add_ln30_1_fu_419_p2;
wire   [3:0] add_ln30_2_fu_429_p2;
wire  signed [9:0] sext_ln30_fu_435_p1;
wire   [9:0] zext_ln30_fu_425_p1;
wire   [9:0] add_ln30_fu_439_p2;
wire   [0:0] icmp_ln200_2_fu_445_p2;
wire   [9:0] select_ln224_2_fu_451_p3;
wire   [0:0] icmp_ln224_2_fu_463_p2;
wire   [8:0] trunc_ln224_4_fu_459_p1;
wire   [8:0] ix_fu_469_p3;
wire   [15:0] sub_ln32_fu_398_p2;
wire   [15:0] zext_ln32_5_fu_477_p1;
wire   [15:0] add_ln32_4_fu_481_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage2_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        acc_4_fu_86 <= select_ln18_2;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        acc_4_fu_86 <= grp_fu_1176_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln24_fu_259_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_98 <= add_ln24_1_fu_265_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_98 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln24_fu_259_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            kx_fu_90 <= add_ln27_fu_492_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            kx_fu_90 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln24_fu_259_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            ky_fu_94 <= select_ln24_1_fu_294_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            ky_fu_94 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv1_weights_load_reg_582 <= conv1_weights_q0;
        input_ftmap_load_reg_577 <= input_ftmap_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln24_reg_563 <= icmp_ln24_fu_259_p2;
        icmp_ln24_reg_563_pp0_iter1_reg <= icmp_ln24_reg_563;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_reg_597 <= grp_fu_1180_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_563_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        acc_6_out_ap_vld = 1'b1;
    end else begin
        acc_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_563 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_sig_allocacmp_acc_4_load_1 = grp_fu_1176_p_dout0;
    end else begin
        ap_sig_allocacmp_acc_4_load_1 = acc_4_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_kx_load = 4'd0;
    end else begin
        ap_sig_allocacmp_kx_load = kx_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_ky_2 = 4'd0;
    end else begin
        ap_sig_allocacmp_ky_2 = ky_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_weights_ce0 = 1'b1;
    end else begin
        conv1_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_ftmap_ce0 = 1'b1;
    end else begin
        input_ftmap_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_6_out = acc_4_fu_86;

assign add_ln24_1_fu_265_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln24_fu_274_p2 = (ap_sig_allocacmp_ky_2 + 4'd1);

assign add_ln26_1_fu_211_p2 = ($signed(ap_sig_allocacmp_ky_2) + $signed(4'd12));

assign add_ln26_2_fu_330_p2 = ($signed(ap_sig_allocacmp_ky_2) + $signed(4'd13));

assign add_ln26_3_fu_340_p2 = ($signed(sext_ln26_1_fu_336_p1) + $signed(select_ln19_8_cast_fu_181_p1));

assign add_ln26_fu_221_p2 = ($signed(sext_ln26_fu_217_p1) + $signed(select_ln19_8_cast_fu_181_p1));

assign add_ln27_fu_492_p2 = (select_ln24_fu_286_p3 + 4'd1);

assign add_ln30_1_fu_419_p2 = (select_ln15_2_cast_fu_177_p1 + zext_ln20_2_cast_fu_173_p1);

assign add_ln30_2_fu_429_p2 = ($signed(select_ln24_fu_286_p3) + $signed(4'd12));

assign add_ln30_fu_439_p2 = ($signed(sext_ln30_fu_435_p1) + $signed(zext_ln30_fu_425_p1));

assign add_ln32_1_fu_306_p2 = (add_ln32 + zext_ln32_fu_302_p1);

assign add_ln32_2_fu_324_p2 = (p_shl2_fu_316_p3 + zext_ln32_1_fu_312_p1);

assign add_ln32_3_fu_408_p2 = (add_ln32_2_fu_324_p2 + zext_ln32_3_fu_404_p1);

assign add_ln32_4_fu_481_p2 = (sub_ln32_fu_398_p2 + zext_ln32_5_fu_477_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign bitcast_ln32_1_fu_517_p1 = conv1_weights_load_reg_582;

assign bitcast_ln32_fu_513_p1 = input_ftmap_load_reg_577;

assign conv1_weights_address0 = zext_ln32_4_fu_414_p1;

assign grp_fu_1176_p_ce = 1'b1;

assign grp_fu_1176_p_din0 = ap_sig_allocacmp_acc_4_load_1;

assign grp_fu_1176_p_din1 = mul_reg_597;

assign grp_fu_1176_p_opcode = 2'd0;

assign grp_fu_1180_p_ce = 1'b1;

assign grp_fu_1180_p_din0 = bitcast_ln32_fu_513_p1;

assign grp_fu_1180_p_din1 = bitcast_ln32_1_fu_517_p1;

assign icmp_ln200_2_fu_445_p2 = (($signed(add_ln30_fu_439_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln200_3_fu_346_p2 = (($signed(add_ln26_3_fu_340_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_227_p2 = (($signed(add_ln26_fu_221_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln224_2_fu_463_p2 = (($signed(select_ln224_2_fu_451_p3) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln224_4_fu_364_p2 = (($signed(select_ln224_3_fu_352_p3) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_245_p2 = (($signed(select_ln224_fu_233_p3) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_259_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd81) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_280_p2 = ((ap_sig_allocacmp_kx_load == 4'd9) ? 1'b1 : 1'b0);

assign input_ftmap_address0 = zext_ln32_6_fu_487_p1;

assign ix_fu_469_p3 = ((icmp_ln224_2_fu_463_p2[0:0] == 1'b1) ? trunc_ln224_4_fu_459_p1 : 9'd0);

assign iy_fu_251_p3 = ((icmp_ln224_fu_245_p2[0:0] == 1'b1) ? trunc_ln224_fu_241_p1 : 8'd0);

assign p_shl2_fu_316_p3 = {{add_ln32_1_fu_306_p2}, {3'd0}};

assign select_ln15_2_cast_fu_177_p1 = select_ln15_2;

assign select_ln19_8_cast_fu_181_p1 = select_ln19_8;

assign select_ln224_2_fu_451_p3 = ((icmp_ln200_2_fu_445_p2[0:0] == 1'b1) ? 10'd254 : add_ln30_fu_439_p2);

assign select_ln224_3_fu_352_p3 = ((icmp_ln200_3_fu_346_p2[0:0] == 1'b1) ? 10'd254 : add_ln26_3_fu_340_p2);

assign select_ln224_fu_233_p3 = ((icmp_ln200_fu_227_p2[0:0] == 1'b1) ? 10'd254 : add_ln26_fu_221_p2);

assign select_ln24_1_fu_294_p3 = ((icmp_ln27_fu_280_p2[0:0] == 1'b1) ? add_ln24_fu_274_p2 : ap_sig_allocacmp_ky_2);

assign select_ln24_2_fu_378_p3 = ((icmp_ln27_fu_280_p2[0:0] == 1'b1) ? select_ln26_fu_370_p3 : iy_fu_251_p3);

assign select_ln24_fu_286_p3 = ((icmp_ln27_fu_280_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_kx_load);

assign select_ln26_fu_370_p3 = ((icmp_ln224_4_fu_364_p2[0:0] == 1'b1) ? trunc_ln224_3_fu_360_p1 : 8'd0);

assign sext_ln26_1_fu_336_p1 = $signed(add_ln26_2_fu_330_p2);

assign sext_ln26_fu_217_p1 = $signed(add_ln26_1_fu_211_p2);

assign sext_ln30_fu_435_p1 = $signed(add_ln30_2_fu_429_p2);

assign sub_ln32_fu_398_p2 = (tmp_s_fu_390_p3 - zext_ln32_2_fu_386_p1);

assign tmp_s_fu_390_p3 = {{select_ln24_2_fu_378_p3}, {8'd0}};

assign trunc_ln224_3_fu_360_p1 = select_ln224_3_fu_352_p3[7:0];

assign trunc_ln224_4_fu_459_p1 = select_ln224_2_fu_451_p3[8:0];

assign trunc_ln224_fu_241_p1 = select_ln224_fu_233_p3[7:0];

assign zext_ln20_2_cast_fu_173_p1 = zext_ln20_2;

assign zext_ln30_fu_425_p1 = add_ln30_1_fu_419_p2;

assign zext_ln32_1_fu_312_p1 = add_ln32_1_fu_306_p2;

assign zext_ln32_2_fu_386_p1 = select_ln24_2_fu_378_p3;

assign zext_ln32_3_fu_404_p1 = select_ln24_fu_286_p3;

assign zext_ln32_4_fu_414_p1 = add_ln32_3_fu_408_p2;

assign zext_ln32_5_fu_477_p1 = ix_fu_469_p3;

assign zext_ln32_6_fu_487_p1 = add_ln32_4_fu_481_p2;

assign zext_ln32_fu_302_p1 = select_ln24_1_fu_294_p3;

endmodule //srcnn_conv1_Pipeline_VITIS_LOOP_24_8_VITIS_LOOP_27_9

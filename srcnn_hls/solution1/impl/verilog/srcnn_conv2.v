// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv2_weights_address0,
        conv2_weights_ce0,
        conv2_weights_q0,
        conv2_biases_address0,
        conv2_biases_ce0,
        conv2_biases_q0,
        feat1_address0,
        feat1_ce0,
        feat1_q0,
        feat2_address0,
        feat2_ce0,
        feat2_we0,
        feat2_d0,
        grp_fu_3424_p_din0,
        grp_fu_3424_p_din1,
        grp_fu_3424_p_opcode,
        grp_fu_3424_p_dout0,
        grp_fu_3424_p_ce,
        grp_fu_3428_p_din0,
        grp_fu_3428_p_din1,
        grp_fu_3428_p_dout0,
        grp_fu_3428_p_ce
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] conv2_weights_address0;
output   conv2_weights_ce0;
input  [31:0] conv2_weights_q0;
output  [4:0] conv2_biases_address0;
output   conv2_biases_ce0;
input  [31:0] conv2_biases_q0;
output  [21:0] feat1_address0;
output   feat1_ce0;
input  [31:0] feat1_q0;
output  [20:0] feat2_address0;
output   feat2_ce0;
output   feat2_we0;
output  [31:0] feat2_d0;
output  [31:0] grp_fu_3424_p_din0;
output  [31:0] grp_fu_3424_p_din1;
output  [1:0] grp_fu_3424_p_opcode;
input  [31:0] grp_fu_3424_p_dout0;
output   grp_fu_3424_p_ce;
output  [31:0] grp_fu_3428_p_din0;
output  [31:0] grp_fu_3428_p_din1;
input  [31:0] grp_fu_3428_p_dout0;
output   grp_fu_3428_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv2_weights_ce0;
reg conv2_biases_ce0;
reg feat1_ce0;
reg feat2_ce0;
reg feat2_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [15:0] sext_ln17_fu_215_p1;
reg  signed [15:0] sext_ln17_reg_424;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_s_fu_219_p3;
reg   [10:0] tmp_s_reg_429;
wire   [5:0] add_ln10_fu_233_p2;
reg   [5:0] add_ln10_reg_437;
wire   [0:0] icmp_ln10_fu_227_p2;
wire   [31:0] acc_fu_239_p1;
reg   [31:0] acc_reg_447;
wire    ap_CS_fsm_state3;
wire   [16:0] zext_ln20_2_fu_243_p1;
reg   [16:0] zext_ln20_2_reg_452;
wire    ap_CS_fsm_state4;
wire   [20:0] sub_ln20_1_fu_272_p2;
reg   [20:0] sub_ln20_1_reg_457;
wire   [7:0] add_ln11_fu_284_p2;
reg   [7:0] add_ln11_reg_465;
wire   [21:0] zext_ln20_4_fu_294_p1;
reg   [21:0] zext_ln20_4_reg_470;
wire    ap_CS_fsm_state5;
reg   [20:0] feat2_addr_reg_475;
wire   [7:0] add_ln12_fu_318_p2;
reg   [7:0] add_ln12_reg_483;
wire    ap_CS_fsm_state6;
wire   [6:0] add_ln15_fu_407_p2;
reg   [6:0] add_ln15_reg_501;
reg   [31:0] feat1_load_reg_506;
wire    ap_CS_fsm_state7;
reg   [31:0] conv2_weights_load_reg_511;
wire   [31:0] bitcast_ln17_fu_413_p1;
reg   [31:0] mul_reg_521;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
reg   [7:0] y_reg_123;
wire   [0:0] icmp_ln12_fu_312_p2;
reg   [7:0] x_reg_134;
wire   [0:0] icmp_ln15_fu_401_p2;
wire   [0:0] icmp_ln11_fu_278_p2;
reg   [6:0] ic_reg_145;
reg   [31:0] acc_4_reg_156;
wire   [63:0] zext_ln10_fu_188_p1;
wire   [63:0] zext_ln20_6_fu_307_p1;
wire   [63:0] zext_ln17_3_fu_386_p1;
wire   [63:0] zext_ln17_4_fu_396_p1;
reg   [5:0] oc_fu_68;
wire    ap_CS_fsm_state11;
wire   [13:0] tmp_fu_197_p3;
wire   [14:0] zext_ln20_1_fu_205_p1;
wire   [14:0] zext_ln20_fu_193_p1;
wire   [14:0] sub_ln20_fu_209_p2;
wire   [4:0] trunc_ln10_fu_184_p1;
wire   [15:0] zext_ln20_3_fu_247_p1;
wire  signed [15:0] add_ln20_fu_251_p2;
wire   [12:0] trunc_ln20_fu_260_p1;
wire   [20:0] p_shl1_fu_264_p3;
wire  signed [20:0] sext_ln20_fu_256_p1;
wire   [20:0] zext_ln20_5_fu_298_p1;
wire   [20:0] add_ln20_2_fu_302_p2;
wire   [14:0] tmp_1_fu_332_p3;
wire   [15:0] zext_ln17_2_fu_340_p1;
wire   [15:0] zext_ln17_1_fu_328_p1;
wire   [15:0] sub_ln17_fu_344_p2;
wire  signed [16:0] sext_ln17_1_fu_350_p1;
wire  signed [16:0] add_ln17_fu_354_p2;
wire   [13:0] trunc_ln17_fu_363_p1;
wire   [21:0] p_shl2_fu_367_p3;
wire  signed [21:0] sext_ln17_2_fu_359_p1;
wire   [21:0] sub_ln17_1_fu_375_p2;
wire   [21:0] add_ln17_1_fu_381_p2;
wire   [10:0] zext_ln17_fu_324_p1;
wire   [10:0] add_ln17_2_fu_391_p2;
reg   [13:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln12_fu_312_p2 == 1'd0))) begin
        acc_4_reg_156 <= acc_reg_447;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        acc_4_reg_156 <= grp_fu_3424_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln12_fu_312_p2 == 1'd0))) begin
        ic_reg_145 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        ic_reg_145 <= add_ln15_reg_501;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        oc_fu_68 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln11_fu_278_p2 == 1'd1))) begin
        oc_fu_68 <= add_ln10_reg_437;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln11_fu_278_p2 == 1'd0))) begin
        x_reg_134 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln15_fu_401_p2 == 1'd1))) begin
        x_reg_134 <= add_ln12_reg_483;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_123 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln12_fu_312_p2 == 1'd1))) begin
        y_reg_123 <= add_ln11_reg_465;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        acc_reg_447 <= acc_fu_239_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln10_reg_437 <= add_ln10_fu_233_p2;
        sext_ln17_reg_424 <= sext_ln17_fu_215_p1;
        tmp_s_reg_429[10 : 6] <= tmp_s_fu_219_p3[10 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln11_reg_465 <= add_ln11_fu_284_p2;
        sub_ln20_1_reg_457 <= sub_ln20_1_fu_272_p2;
        zext_ln20_2_reg_452[7 : 0] <= zext_ln20_2_fu_243_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln12_reg_483 <= add_ln12_fu_318_p2;
        feat2_addr_reg_475 <= zext_ln20_6_fu_307_p1;
        zext_ln20_4_reg_470[7 : 0] <= zext_ln20_4_fu_294_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln15_reg_501 <= add_ln15_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv2_weights_load_reg_511 <= conv2_weights_q0;
        feat1_load_reg_506 <= feat1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul_reg_521 <= grp_fu_3428_p_dout0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln10_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv2_biases_ce0 = 1'b1;
    end else begin
        conv2_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv2_weights_ce0 = 1'b1;
    end else begin
        conv2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        feat1_ce0 = 1'b1;
    end else begin
        feat1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        feat2_ce0 = 1'b1;
    end else begin
        feat2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln15_fu_401_p2 == 1'd1))) begin
        feat2_we0 = 1'b1;
    end else begin
        feat2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln11_fu_278_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln12_fu_312_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln15_fu_401_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_239_p1 = conv2_biases_q0;

assign add_ln10_fu_233_p2 = (oc_fu_68 + 6'd1);

assign add_ln11_fu_284_p2 = (y_reg_123 + 8'd1);

assign add_ln12_fu_318_p2 = (x_reg_134 + 8'd1);

assign add_ln15_fu_407_p2 = (ic_reg_145 + 7'd1);

assign add_ln17_1_fu_381_p2 = (sub_ln17_1_fu_375_p2 + zext_ln20_4_reg_470);

assign add_ln17_2_fu_391_p2 = (tmp_s_reg_429 + zext_ln17_fu_324_p1);

assign add_ln17_fu_354_p2 = ($signed(sext_ln17_1_fu_350_p1) + $signed(zext_ln20_2_reg_452));

assign add_ln20_2_fu_302_p2 = (sub_ln20_1_reg_457 + zext_ln20_5_fu_298_p1);

assign add_ln20_fu_251_p2 = ($signed(sext_ln17_reg_424) + $signed(zext_ln20_3_fu_247_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln17_fu_413_p1 = conv2_weights_load_reg_511;

assign conv2_biases_address0 = zext_ln10_fu_188_p1;

assign conv2_weights_address0 = zext_ln17_4_fu_396_p1;

assign feat1_address0 = zext_ln17_3_fu_386_p1;

assign feat2_address0 = feat2_addr_reg_475;

assign feat2_d0 = acc_4_reg_156;

assign grp_fu_3424_p_ce = 1'b1;

assign grp_fu_3424_p_din0 = acc_4_reg_156;

assign grp_fu_3424_p_din1 = mul_reg_521;

assign grp_fu_3424_p_opcode = 2'd0;

assign grp_fu_3428_p_ce = 1'b1;

assign grp_fu_3428_p_din0 = feat1_load_reg_506;

assign grp_fu_3428_p_din1 = bitcast_ln17_fu_413_p1;

assign icmp_ln10_fu_227_p2 = ((oc_fu_68 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_278_p2 = ((y_reg_123 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_312_p2 = ((x_reg_134 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_401_p2 = ((ic_reg_145 == 7'd64) ? 1'b1 : 1'b0);

assign p_shl1_fu_264_p3 = {{trunc_ln20_fu_260_p1}, {8'd0}};

assign p_shl2_fu_367_p3 = {{trunc_ln17_fu_363_p1}, {8'd0}};

assign sext_ln17_1_fu_350_p1 = $signed(sub_ln17_fu_344_p2);

assign sext_ln17_2_fu_359_p1 = add_ln17_fu_354_p2;

assign sext_ln17_fu_215_p1 = $signed(sub_ln20_fu_209_p2);

assign sext_ln20_fu_256_p1 = add_ln20_fu_251_p2;

assign sub_ln17_1_fu_375_p2 = ($signed(p_shl2_fu_367_p3) - $signed(sext_ln17_2_fu_359_p1));

assign sub_ln17_fu_344_p2 = (zext_ln17_2_fu_340_p1 - zext_ln17_1_fu_328_p1);

assign sub_ln20_1_fu_272_p2 = ($signed(p_shl1_fu_264_p3) - $signed(sext_ln20_fu_256_p1));

assign sub_ln20_fu_209_p2 = (zext_ln20_1_fu_205_p1 - zext_ln20_fu_193_p1);

assign tmp_1_fu_332_p3 = {{ic_reg_145}, {8'd0}};

assign tmp_fu_197_p3 = {{oc_fu_68}, {8'd0}};

assign tmp_s_fu_219_p3 = {{trunc_ln10_fu_184_p1}, {6'd0}};

assign trunc_ln10_fu_184_p1 = oc_fu_68[4:0];

assign trunc_ln17_fu_363_p1 = add_ln17_fu_354_p2[13:0];

assign trunc_ln20_fu_260_p1 = add_ln20_fu_251_p2[12:0];

assign zext_ln10_fu_188_p1 = oc_fu_68;

assign zext_ln17_1_fu_328_p1 = ic_reg_145;

assign zext_ln17_2_fu_340_p1 = tmp_1_fu_332_p3;

assign zext_ln17_3_fu_386_p1 = add_ln17_1_fu_381_p2;

assign zext_ln17_4_fu_396_p1 = add_ln17_2_fu_391_p2;

assign zext_ln17_fu_324_p1 = ic_reg_145;

assign zext_ln20_1_fu_205_p1 = tmp_fu_197_p3;

assign zext_ln20_2_fu_243_p1 = y_reg_123;

assign zext_ln20_3_fu_247_p1 = y_reg_123;

assign zext_ln20_4_fu_294_p1 = x_reg_134;

assign zext_ln20_5_fu_298_p1 = x_reg_134;

assign zext_ln20_6_fu_307_p1 = add_ln20_2_fu_302_p2;

assign zext_ln20_fu_193_p1 = oc_fu_68;

always @ (posedge ap_clk) begin
    tmp_s_reg_429[5:0] <= 6'b000000;
    zext_ln20_2_reg_452[16:8] <= 9'b000000000;
    zext_ln20_4_reg_470[21:8] <= 14'b00000000000000;
end

endmodule //srcnn_conv2

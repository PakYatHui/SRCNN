// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_srcnn_Pipeline_VITIS_LOOP_19_1_VITIS_LOOP_20_2_VITIS_LOOP_21_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        feat1_address0,
        feat1_ce0,
        feat1_we0,
        feat1_d0,
        feat1_address1,
        feat1_ce1,
        feat1_q1,
        grp_fu_487_p_din0,
        grp_fu_487_p_din1,
        grp_fu_487_p_opcode,
        grp_fu_487_p_dout0,
        grp_fu_487_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] feat1_address0;
output   feat1_ce0;
output   feat1_we0;
output  [31:0] feat1_d0;
output  [21:0] feat1_address1;
output   feat1_ce1;
input  [31:0] feat1_q1;
output  [31:0] grp_fu_487_p_din0;
output  [31:0] grp_fu_487_p_din1;
output  [4:0] grp_fu_487_p_opcode;
input  [0:0] grp_fu_487_p_dout0;
output   grp_fu_487_p_ce;

reg ap_idle;
reg feat1_ce0;
reg feat1_we0;
reg feat1_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln19_fu_133_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [21:0] feat1_addr_reg_437;
reg   [21:0] feat1_addr_reg_437_pp0_iter2_reg;
reg   [31:0] feat1_load_reg_443;
wire   [63:0] zext_ln23_4_fu_299_p1;
wire    ap_block_pp0_stage0;
reg   [7:0] x_fu_62;
wire   [7:0] add_ln21_fu_304_p2;
wire    ap_loop_init;
reg   [7:0] y_fu_66;
wire   [7:0] select_ln20_1_fu_249_p3;
reg   [15:0] indvar_flatten_fu_70;
wire   [15:0] select_ln20_3_fu_316_p3;
reg   [6:0] c_fu_74;
wire   [6:0] select_ln19_1_fu_177_p3;
reg   [21:0] indvar_flatten12_fu_78;
wire   [21:0] add_ln19_2_fu_139_p2;
wire   [0:0] icmp_ln20_fu_163_p2;
wire   [6:0] add_ln19_fu_157_p2;
wire   [14:0] tmp_fu_189_p3;
wire   [15:0] zext_ln23_1_fu_197_p1;
wire   [15:0] zext_ln23_fu_185_p1;
wire   [15:0] sub_ln23_fu_201_p2;
wire   [0:0] icmp_ln21_fu_217_p2;
wire   [0:0] xor_ln19_fu_211_p2;
wire   [7:0] select_ln19_fu_169_p3;
wire   [0:0] and_ln19_fu_223_p2;
wire   [0:0] or_ln20_fu_235_p2;
wire   [7:0] add_ln20_fu_229_p2;
wire  signed [16:0] sext_ln20_fu_207_p1;
wire   [16:0] zext_ln23_2_fu_257_p1;
wire  signed [16:0] add_ln23_fu_261_p2;
wire   [13:0] trunc_ln23_fu_271_p1;
wire   [21:0] p_shl_fu_275_p3;
wire  signed [21:0] sext_ln23_fu_267_p1;
wire   [7:0] select_ln20_fu_241_p3;
wire   [21:0] sub_ln23_1_fu_283_p2;
wire   [21:0] zext_ln23_3_fu_289_p1;
wire   [21:0] add_ln23_1_fu_293_p2;
wire   [15:0] add_ln20_2_fu_310_p2;
wire   [31:0] bitcast_ln224_fu_349_p1;
wire   [7:0] tmp_1_fu_352_p4;
wire   [22:0] trunc_ln224_fu_362_p1;
wire   [0:0] icmp_ln224_3_fu_372_p2;
wire   [0:0] icmp_ln224_2_fu_366_p2;
wire   [0:0] or_ln224_fu_378_p2;
wire   [0:0] and_ln224_fu_384_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            c_fu_74 <= 7'd0;
        end else if (((icmp_ln19_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            c_fu_74 <= select_ln19_1_fu_177_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_78 <= 22'd0;
        end else if (((icmp_ln19_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten12_fu_78 <= add_ln19_2_fu_139_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_70 <= 16'd0;
        end else if (((icmp_ln19_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_70 <= select_ln20_3_fu_316_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_62 <= 8'd0;
        end else if (((icmp_ln19_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            x_fu_62 <= add_ln21_fu_304_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_66 <= 8'd0;
        end else if (((icmp_ln19_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            y_fu_66 <= select_ln20_1_fu_249_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_133_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        feat1_addr_reg_437 <= zext_ln23_4_fu_299_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        feat1_addr_reg_437_pp0_iter2_reg <= feat1_addr_reg_437;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        feat1_load_reg_443 <= feat1_q1;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_133_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        feat1_ce0 = 1'b1;
    end else begin
        feat1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        feat1_ce1 = 1'b1;
    end else begin
        feat1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        feat1_we0 = 1'b1;
    end else begin
        feat1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_2_fu_139_p2 = (indvar_flatten12_fu_78 + 22'd1);

assign add_ln19_fu_157_p2 = (c_fu_74 + 7'd1);

assign add_ln20_2_fu_310_p2 = (indvar_flatten_fu_70 + 16'd1);

assign add_ln20_fu_229_p2 = (select_ln19_fu_169_p3 + 8'd1);

assign add_ln21_fu_304_p2 = (select_ln20_fu_241_p3 + 8'd1);

assign add_ln23_1_fu_293_p2 = (sub_ln23_1_fu_283_p2 + zext_ln23_3_fu_289_p1);

assign add_ln23_fu_261_p2 = ($signed(sext_ln20_fu_207_p1) + $signed(zext_ln23_2_fu_257_p1));

assign and_ln19_fu_223_p2 = (xor_ln19_fu_211_p2 & icmp_ln21_fu_217_p2);

assign and_ln224_fu_384_p2 = (or_ln224_fu_378_p2 & grp_fu_487_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bitcast_ln224_fu_349_p1 = feat1_load_reg_443;

assign feat1_address0 = feat1_addr_reg_437_pp0_iter2_reg;

assign feat1_address1 = zext_ln23_4_fu_299_p1;

assign feat1_d0 = ((and_ln224_fu_384_p2[0:0] == 1'b1) ? feat1_load_reg_443 : 32'd0);

assign grp_fu_487_p_ce = 1'b1;

assign grp_fu_487_p_din0 = feat1_q1;

assign grp_fu_487_p_din1 = 32'd0;

assign grp_fu_487_p_opcode = 5'd2;

assign icmp_ln19_fu_133_p2 = ((indvar_flatten12_fu_78 == 22'd4161600) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_163_p2 = ((indvar_flatten_fu_70 == 16'd65025) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_217_p2 = ((x_fu_62 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln224_2_fu_366_p2 = ((tmp_1_fu_352_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln224_3_fu_372_p2 = ((trunc_ln224_fu_362_p1 == 23'd0) ? 1'b1 : 1'b0);

assign or_ln20_fu_235_p2 = (icmp_ln20_fu_163_p2 | and_ln19_fu_223_p2);

assign or_ln224_fu_378_p2 = (icmp_ln224_3_fu_372_p2 | icmp_ln224_2_fu_366_p2);

assign p_shl_fu_275_p3 = {{trunc_ln23_fu_271_p1}, {8'd0}};

assign select_ln19_1_fu_177_p3 = ((icmp_ln20_fu_163_p2[0:0] == 1'b1) ? add_ln19_fu_157_p2 : c_fu_74);

assign select_ln19_fu_169_p3 = ((icmp_ln20_fu_163_p2[0:0] == 1'b1) ? 8'd0 : y_fu_66);

assign select_ln20_1_fu_249_p3 = ((and_ln19_fu_223_p2[0:0] == 1'b1) ? add_ln20_fu_229_p2 : select_ln19_fu_169_p3);

assign select_ln20_3_fu_316_p3 = ((icmp_ln20_fu_163_p2[0:0] == 1'b1) ? 16'd1 : add_ln20_2_fu_310_p2);

assign select_ln20_fu_241_p3 = ((or_ln20_fu_235_p2[0:0] == 1'b1) ? 8'd0 : x_fu_62);

assign sext_ln20_fu_207_p1 = $signed(sub_ln23_fu_201_p2);

assign sext_ln23_fu_267_p1 = add_ln23_fu_261_p2;

assign sub_ln23_1_fu_283_p2 = ($signed(p_shl_fu_275_p3) - $signed(sext_ln23_fu_267_p1));

assign sub_ln23_fu_201_p2 = (zext_ln23_1_fu_197_p1 - zext_ln23_fu_185_p1);

assign tmp_1_fu_352_p4 = {{bitcast_ln224_fu_349_p1[30:23]}};

assign tmp_fu_189_p3 = {{select_ln19_1_fu_177_p3}, {8'd0}};

assign trunc_ln224_fu_362_p1 = bitcast_ln224_fu_349_p1[22:0];

assign trunc_ln23_fu_271_p1 = add_ln23_fu_261_p2[13:0];

assign xor_ln19_fu_211_p2 = (icmp_ln20_fu_163_p2 ^ 1'd1);

assign zext_ln23_1_fu_197_p1 = tmp_fu_189_p3;

assign zext_ln23_2_fu_257_p1 = select_ln20_1_fu_249_p3;

assign zext_ln23_3_fu_289_p1 = select_ln20_fu_241_p3;

assign zext_ln23_4_fu_299_p1 = add_ln23_1_fu_293_p2;

assign zext_ln23_fu_185_p1 = select_ln19_1_fu_177_p3;

endmodule //srcnn_srcnn_Pipeline_VITIS_LOOP_19_1_VITIS_LOOP_20_2_VITIS_LOOP_21_3

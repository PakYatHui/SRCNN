// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_srcnn_Pipeline_VITIS_LOOP_11_2_VITIS_LOOP_12_3_VITIS_LOOP_15_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        acc,
        sub_ln21,
        zext_ln18,
        conv2_weights_address0,
        conv2_weights_ce0,
        conv2_weights_q0,
        feat1_address0,
        feat1_ce0,
        feat1_q0,
        feat2_address0,
        feat2_ce0,
        feat2_we0,
        feat2_d0,
        grp_fu_479_p_din0,
        grp_fu_479_p_din1,
        grp_fu_479_p_opcode,
        grp_fu_479_p_dout0,
        grp_fu_479_p_ce,
        grp_fu_483_p_din0,
        grp_fu_483_p_din1,
        grp_fu_483_p_dout0,
        grp_fu_483_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] acc;
input  [14:0] sub_ln21;
input  [10:0] zext_ln18;
output  [10:0] conv2_weights_address0;
output   conv2_weights_ce0;
input  [31:0] conv2_weights_q0;
output  [21:0] feat1_address0;
output   feat1_ce0;
input  [31:0] feat1_q0;
output  [20:0] feat2_address0;
output   feat2_ce0;
output   feat2_we0;
output  [31:0] feat2_d0;
output  [31:0] grp_fu_479_p_din0;
output  [31:0] grp_fu_479_p_din1;
output  [1:0] grp_fu_479_p_opcode;
input  [31:0] grp_fu_479_p_dout0;
output   grp_fu_479_p_ce;
output  [31:0] grp_fu_483_p_din0;
output  [31:0] grp_fu_483_p_din1;
input  [31:0] grp_fu_483_p_dout0;
output   grp_fu_483_p_ce;

reg ap_idle;
reg conv2_weights_ce0;
reg feat1_ce0;
reg feat2_ce0;
reg feat2_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_state9_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln11_reg_567;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state10_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire  signed [15:0] sub_ln21_cast_fu_167_p1;
reg  signed [15:0] sub_ln21_cast_reg_562;
wire   [0:0] icmp_ln11_fu_207_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_state11_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln11_reg_567_pp0_iter1_reg;
wire   [0:0] icmp_ln12_fu_234_p2;
reg   [0:0] icmp_ln12_reg_571;
reg   [0:0] icmp_ln12_reg_571_pp0_iter1_reg;
wire   [7:0] select_ln11_2_fu_248_p3;
reg   [7:0] select_ln11_2_reg_576;
reg   [7:0] select_ln11_2_reg_576_pp0_iter1_reg;
reg   [7:0] select_ln11_2_reg_576_pp0_iter2_reg;
wire   [0:0] and_ln11_fu_272_p2;
reg   [0:0] and_ln11_reg_581;
reg   [0:0] and_ln11_reg_581_pp0_iter1_reg;
wire   [7:0] select_ln12_2_fu_298_p3;
reg   [7:0] select_ln12_2_reg_586;
reg   [7:0] select_ln12_2_reg_586_pp0_iter1_reg;
reg   [7:0] select_ln12_2_reg_586_pp0_iter2_reg;
wire   [0:0] icmp_ln15_1_fu_395_p2;
reg   [0:0] icmp_ln15_1_reg_601;
reg   [0:0] icmp_ln15_1_reg_601_pp0_iter1_reg;
reg   [0:0] icmp_ln15_1_reg_601_pp0_iter2_reg;
reg   [31:0] feat1_load_reg_605;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] conv2_weights_load_reg_610;
wire   [31:0] bitcast_ln18_fu_440_p1;
reg   [31:0] mul_i_reg_620;
wire   [31:0] select_ln12_1_fu_453_p3;
reg   [31:0] acc_3_reg_630;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
wire   [63:0] zext_ln18_4_fu_374_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln18_5_fu_384_p1;
wire   [63:0] zext_ln21_4_fu_504_p1;
reg   [31:0] acc_2_fu_78;
reg   [31:0] ap_sig_allocacmp_acc_2_load;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [6:0] ic_fu_82;
wire   [6:0] add_ln15_fu_389_p2;
reg   [7:0] x_fu_86;
reg   [14:0] indvar_flatten19_fu_90;
wire   [14:0] select_ln12_3_fu_407_p3;
reg   [7:0] y_fu_94;
reg   [21:0] indvar_flatten33_fu_98;
wire   [21:0] add_ln11_1_fu_213_p2;
wire   [7:0] add_ln11_fu_228_p2;
wire   [0:0] icmp_ln15_fu_266_p2;
wire   [0:0] xor_ln11_fu_260_p2;
wire   [7:0] select_ln11_fu_240_p3;
wire   [0:0] or_ln12_fu_284_p2;
wire   [7:0] add_ln12_fu_278_p2;
wire   [6:0] select_ln12_fu_290_p3;
wire   [14:0] tmp_s_fu_318_p3;
wire   [15:0] zext_ln18_3_fu_326_p1;
wire   [15:0] zext_ln18_2_fu_314_p1;
wire   [15:0] sub_ln18_fu_330_p2;
wire  signed [16:0] sext_ln18_fu_336_p1;
wire   [16:0] zext_ln21_fu_256_p1;
wire  signed [16:0] add_ln18_fu_340_p2;
wire   [13:0] trunc_ln18_fu_350_p1;
wire   [21:0] p_shl3_fu_354_p3;
wire  signed [21:0] sext_ln18_1_fu_346_p1;
wire   [21:0] sub_ln18_1_fu_362_p2;
wire   [21:0] zext_ln21_2_fu_306_p1;
wire   [21:0] add_ln18_1_fu_368_p2;
wire   [10:0] zext_ln18_1_fu_310_p1;
wire   [10:0] add_ln18_2_fu_379_p2;
wire   [14:0] add_ln12_1_fu_401_p2;
wire   [31:0] select_ln11_1_fu_447_p3;
wire   [15:0] zext_ln21_1_fu_465_p1;
wire  signed [15:0] add_ln21_3_fu_468_p2;
wire   [12:0] trunc_ln21_fu_477_p1;
wire   [20:0] p_shl5_fu_481_p3;
wire  signed [20:0] sext_ln21_fu_473_p1;
wire   [20:0] sub_ln21_1_fu_489_p2;
wire   [20:0] zext_ln21_3_fu_495_p1;
wire   [20:0] add_ln21_4_fu_498_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage1;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            acc_2_fu_78 <= acc;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            acc_2_fu_78 <= grp_fu_479_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ic_fu_82 <= 7'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln11_fu_207_p2 == 1'd0))) begin
        ic_fu_82 <= add_ln15_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        indvar_flatten19_fu_90 <= 15'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln11_fu_207_p2 == 1'd0))) begin
        indvar_flatten19_fu_90 <= select_ln12_3_fu_407_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        indvar_flatten33_fu_98 <= 22'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln11_fu_207_p2 == 1'd0))) begin
        indvar_flatten33_fu_98 <= add_ln11_1_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        x_fu_86 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln11_fu_207_p2 == 1'd0))) begin
        x_fu_86 <= select_ln12_2_fu_298_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        y_fu_94 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln11_fu_207_p2 == 1'd0))) begin
        y_fu_94 <= select_ln11_2_fu_248_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_3_reg_630 <= grp_fu_479_p_dout0;
        sub_ln21_cast_reg_562 <= sub_ln21_cast_fu_167_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln11_fu_207_p2 == 1'd0))) begin
        and_ln11_reg_581 <= and_ln11_fu_272_p2;
        icmp_ln12_reg_571 <= icmp_ln12_fu_234_p2;
        icmp_ln15_1_reg_601 <= icmp_ln15_1_fu_395_p2;
        select_ln11_2_reg_576 <= select_ln11_2_fu_248_p3;
        select_ln12_2_reg_586 <= select_ln12_2_fu_298_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        and_ln11_reg_581_pp0_iter1_reg <= and_ln11_reg_581;
        icmp_ln11_reg_567 <= icmp_ln11_fu_207_p2;
        icmp_ln11_reg_567_pp0_iter1_reg <= icmp_ln11_reg_567;
        icmp_ln12_reg_571_pp0_iter1_reg <= icmp_ln12_reg_571;
        icmp_ln15_1_reg_601_pp0_iter1_reg <= icmp_ln15_1_reg_601;
        icmp_ln15_1_reg_601_pp0_iter2_reg <= icmp_ln15_1_reg_601_pp0_iter1_reg;
        select_ln11_2_reg_576_pp0_iter1_reg <= select_ln11_2_reg_576;
        select_ln11_2_reg_576_pp0_iter2_reg <= select_ln11_2_reg_576_pp0_iter1_reg;
        select_ln12_2_reg_586_pp0_iter1_reg <= select_ln12_2_reg_586;
        select_ln12_2_reg_586_pp0_iter2_reg <= select_ln12_2_reg_586_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        conv2_weights_load_reg_610 <= conv2_weights_q0;
        feat1_load_reg_605 <= feat1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul_i_reg_620 <= grp_fu_483_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln11_reg_567 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln11_reg_567_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_acc_2_load = grp_fu_479_p_dout0;
    end else begin
        ap_sig_allocacmp_acc_2_load = acc_2_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv2_weights_ce0 = 1'b1;
    end else begin
        conv2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        feat1_ce0 = 1'b1;
    end else begin
        feat1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        feat2_ce0 = 1'b1;
    end else begin
        feat2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln15_1_reg_601_pp0_iter2_reg == 1'd1))) begin
        feat2_we0 = 1'b1;
    end else begin
        feat2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_213_p2 = (indvar_flatten33_fu_98 + 22'd1);

assign add_ln11_fu_228_p2 = (y_fu_94 + 8'd1);

assign add_ln12_1_fu_401_p2 = (indvar_flatten19_fu_90 + 15'd1);

assign add_ln12_fu_278_p2 = (select_ln11_fu_240_p3 + 8'd1);

assign add_ln15_fu_389_p2 = (select_ln12_fu_290_p3 + 7'd1);

assign add_ln18_1_fu_368_p2 = (sub_ln18_1_fu_362_p2 + zext_ln21_2_fu_306_p1);

assign add_ln18_2_fu_379_p2 = (zext_ln18 + zext_ln18_1_fu_310_p1);

assign add_ln18_fu_340_p2 = ($signed(sext_ln18_fu_336_p1) + $signed(zext_ln21_fu_256_p1));

assign add_ln21_3_fu_468_p2 = ($signed(sub_ln21_cast_reg_562) + $signed(zext_ln21_1_fu_465_p1));

assign add_ln21_4_fu_498_p2 = (sub_ln21_1_fu_489_p2 + zext_ln21_3_fu_495_p1);

assign and_ln11_fu_272_p2 = (xor_ln11_fu_260_p2 & icmp_ln15_fu_266_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign bitcast_ln18_fu_440_p1 = conv2_weights_load_reg_610;

assign conv2_weights_address0 = zext_ln18_5_fu_384_p1;

assign feat1_address0 = zext_ln18_4_fu_374_p1;

assign feat2_address0 = zext_ln21_4_fu_504_p1;

assign feat2_d0 = acc_3_reg_630;

assign grp_fu_479_p_ce = 1'b1;

assign grp_fu_479_p_din0 = select_ln12_1_fu_453_p3;

assign grp_fu_479_p_din1 = mul_i_reg_620;

assign grp_fu_479_p_opcode = 2'd0;

assign grp_fu_483_p_ce = 1'b1;

assign grp_fu_483_p_din0 = feat1_load_reg_605;

assign grp_fu_483_p_din1 = bitcast_ln18_fu_440_p1;

assign icmp_ln11_fu_207_p2 = ((indvar_flatten33_fu_98 == 22'd4161600) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_234_p2 = ((indvar_flatten19_fu_90 == 15'd16320) ? 1'b1 : 1'b0);

assign icmp_ln15_1_fu_395_p2 = ((add_ln15_fu_389_p2 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_266_p2 = ((ic_fu_82 == 7'd64) ? 1'b1 : 1'b0);

assign or_ln12_fu_284_p2 = (icmp_ln12_fu_234_p2 | and_ln11_fu_272_p2);

assign p_shl3_fu_354_p3 = {{trunc_ln18_fu_350_p1}, {8'd0}};

assign p_shl5_fu_481_p3 = {{trunc_ln21_fu_477_p1}, {8'd0}};

assign select_ln11_1_fu_447_p3 = ((icmp_ln12_reg_571_pp0_iter1_reg[0:0] == 1'b1) ? acc : ap_sig_allocacmp_acc_2_load);

assign select_ln11_2_fu_248_p3 = ((icmp_ln12_fu_234_p2[0:0] == 1'b1) ? add_ln11_fu_228_p2 : y_fu_94);

assign select_ln11_fu_240_p3 = ((icmp_ln12_fu_234_p2[0:0] == 1'b1) ? 8'd0 : x_fu_86);

assign select_ln12_1_fu_453_p3 = ((and_ln11_reg_581_pp0_iter1_reg[0:0] == 1'b1) ? acc : select_ln11_1_fu_447_p3);

assign select_ln12_2_fu_298_p3 = ((and_ln11_fu_272_p2[0:0] == 1'b1) ? add_ln12_fu_278_p2 : select_ln11_fu_240_p3);

assign select_ln12_3_fu_407_p3 = ((icmp_ln12_fu_234_p2[0:0] == 1'b1) ? 15'd1 : add_ln12_1_fu_401_p2);

assign select_ln12_fu_290_p3 = ((or_ln12_fu_284_p2[0:0] == 1'b1) ? 7'd0 : ic_fu_82);

assign sext_ln18_1_fu_346_p1 = add_ln18_fu_340_p2;

assign sext_ln18_fu_336_p1 = $signed(sub_ln18_fu_330_p2);

assign sext_ln21_fu_473_p1 = add_ln21_3_fu_468_p2;

assign sub_ln18_1_fu_362_p2 = ($signed(p_shl3_fu_354_p3) - $signed(sext_ln18_1_fu_346_p1));

assign sub_ln18_fu_330_p2 = (zext_ln18_3_fu_326_p1 - zext_ln18_2_fu_314_p1);

assign sub_ln21_1_fu_489_p2 = ($signed(p_shl5_fu_481_p3) - $signed(sext_ln21_fu_473_p1));

assign sub_ln21_cast_fu_167_p1 = $signed(sub_ln21);

assign tmp_s_fu_318_p3 = {{select_ln12_fu_290_p3}, {8'd0}};

assign trunc_ln18_fu_350_p1 = add_ln18_fu_340_p2[13:0];

assign trunc_ln21_fu_477_p1 = add_ln21_3_fu_468_p2[12:0];

assign xor_ln11_fu_260_p2 = (icmp_ln12_fu_234_p2 ^ 1'd1);

assign zext_ln18_1_fu_310_p1 = select_ln12_fu_290_p3;

assign zext_ln18_2_fu_314_p1 = select_ln12_fu_290_p3;

assign zext_ln18_3_fu_326_p1 = tmp_s_fu_318_p3;

assign zext_ln18_4_fu_374_p1 = add_ln18_1_fu_368_p2;

assign zext_ln18_5_fu_384_p1 = add_ln18_2_fu_379_p2;

assign zext_ln21_1_fu_465_p1 = select_ln11_2_reg_576_pp0_iter2_reg;

assign zext_ln21_2_fu_306_p1 = select_ln12_2_fu_298_p3;

assign zext_ln21_3_fu_495_p1 = select_ln12_2_reg_586_pp0_iter2_reg;

assign zext_ln21_4_fu_504_p1 = add_ln21_4_fu_498_p2;

assign zext_ln21_fu_256_p1 = select_ln11_2_fu_248_p3;

endmodule //srcnn_srcnn_Pipeline_VITIS_LOOP_11_2_VITIS_LOOP_12_3_VITIS_LOOP_15_4

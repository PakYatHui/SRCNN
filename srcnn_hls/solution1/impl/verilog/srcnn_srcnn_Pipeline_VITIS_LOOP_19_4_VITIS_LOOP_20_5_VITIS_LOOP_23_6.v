// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_srcnn_Pipeline_VITIS_LOOP_19_4_VITIS_LOOP_20_5_VITIS_LOOP_23_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        acc_1,
        zext_ln14_1,
        conv3_weights_address0,
        conv3_weights_ce0,
        conv3_weights_q0,
        zext_ln15_2,
        acc_5_out,
        acc_5_out_ap_vld,
        feat2_address0,
        feat2_ce0,
        feat2_q0,
        grp_fu_479_p_din0,
        grp_fu_479_p_din1,
        grp_fu_479_p_opcode,
        grp_fu_479_p_dout0,
        grp_fu_479_p_ce,
        grp_fu_483_p_din0,
        grp_fu_483_p_din1,
        grp_fu_483_p_dout0,
        grp_fu_483_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] acc_1;
input  [7:0] zext_ln14_1;
output  [9:0] conv3_weights_address0;
output   conv3_weights_ce0;
input  [31:0] conv3_weights_q0;
input  [7:0] zext_ln15_2;
output  [31:0] acc_5_out;
output   acc_5_out_ap_vld;
output  [20:0] feat2_address0;
output   feat2_ce0;
input  [31:0] feat2_q0;
output  [31:0] grp_fu_479_p_din0;
output  [31:0] grp_fu_479_p_din1;
output  [1:0] grp_fu_479_p_opcode;
input  [31:0] grp_fu_479_p_dout0;
output   grp_fu_479_p_ce;
output  [31:0] grp_fu_483_p_din0;
output  [31:0] grp_fu_483_p_din1;
input  [31:0] grp_fu_483_p_dout0;
output   grp_fu_483_p_ce;

reg ap_idle;
reg conv3_weights_ce0;
reg acc_5_out_ap_vld;
reg feat2_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_state9_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln19_reg_743;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln19_fu_269_p2;
reg   [0:0] icmp_ln19_reg_743_pp0_iter1_reg;
reg   [31:0] feat2_load_reg_757;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] conv3_weights_load_reg_762;
wire   [31:0] bitcast_ln28_fu_683_p1;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] mul_i1_reg_772;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln28_8_fu_570_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln28_10_fu_633_p1;
reg   [31:0] acc_fu_90;
reg   [31:0] ap_sig_allocacmp_acc_load_1;
wire    ap_block_pp0_stage2;
wire    ap_loop_init;
reg   [2:0] kx_fu_94;
wire   [2:0] add_ln23_fu_638_p2;
reg   [2:0] ap_sig_allocacmp_kx_load;
reg   [2:0] ky_fu_98;
wire   [2:0] select_ln20_1_fu_432_p3;
reg   [2:0] ap_sig_allocacmp_ky_1;
reg   [5:0] indvar_flatten60_fu_102;
wire   [5:0] select_ln20_3_fu_650_p3;
reg   [5:0] ap_sig_allocacmp_indvar_flatten60_load;
reg   [5:0] ic_fu_106;
wire   [5:0] select_ln19_1_fu_310_p3;
reg   [5:0] ap_sig_allocacmp_ic_load;
reg   [9:0] indvar_flatten99_fu_110;
wire   [9:0] add_ln19_fu_275_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten99_load;
wire    ap_block_pp0_stage2_01001;
wire   [2:0] add_ln21_fu_221_p2;
wire  signed [9:0] sext_ln21_fu_227_p1;
wire   [9:0] zext_ln14_1_cast2_fu_177_p1;
wire   [9:0] iy_raw_fu_231_p2;
wire   [0:0] icmp_ln200_fu_237_p2;
wire   [9:0] select_ln224_fu_243_p3;
wire   [0:0] icmp_ln224_fu_255_p2;
wire   [8:0] trunc_ln224_fu_251_p1;
wire   [0:0] icmp_ln20_fu_296_p2;
wire   [5:0] add_ln19_1_fu_290_p2;
wire   [13:0] tmp_s_fu_326_p3;
wire   [14:0] zext_ln28_2_fu_334_p1;
wire   [14:0] zext_ln28_1_fu_322_p1;
wire   [14:0] sub_ln28_fu_338_p2;
wire   [7:0] tmp_1_fu_348_p3;
wire   [8:0] zext_ln28_3_fu_356_p1;
wire   [8:0] zext_ln28_fu_318_p1;
wire   [8:0] zext_ln14_1_cast_fu_181_p1;
wire   [8:0] add_ln21_2_fu_366_p2;
wire   [0:0] icmp_ln224_2_fu_372_p2;
wire   [8:0] select_ln22_fu_378_p3;
wire   [8:0] iy_fu_261_p3;
wire   [0:0] icmp_ln23_fu_400_p2;
wire   [0:0] xor_ln19_fu_394_p2;
wire   [2:0] select_ln19_fu_302_p3;
wire   [0:0] and_ln19_fu_406_p2;
wire   [0:0] or_ln20_fu_418_p2;
wire   [2:0] add_ln20_fu_412_p2;
wire   [8:0] add_ln28_fu_360_p2;
wire   [8:0] zext_ln28_4_fu_440_p1;
wire   [8:0] add_ln28_1_fu_444_p2;
wire   [7:0] trunc_ln28_fu_454_p1;
wire   [9:0] p_shl1_fu_458_p3;
wire   [9:0] zext_ln28_5_fu_450_p1;
wire   [2:0] add_ln21_3_fu_472_p2;
wire  signed [9:0] sext_ln21_1_fu_478_p1;
wire   [9:0] add_ln21_4_fu_482_p2;
wire   [0:0] icmp_ln200_2_fu_488_p2;
wire   [9:0] select_ln224_2_fu_494_p3;
wire   [0:0] icmp_ln224_3_fu_506_p2;
wire   [8:0] trunc_ln224_1_fu_502_p1;
wire   [8:0] select_ln22_1_fu_512_p3;
wire   [8:0] select_ln19_2_fu_386_p3;
wire   [8:0] select_ln20_2_fu_520_p3;
wire  signed [15:0] sext_ln28_fu_344_p1;
wire   [15:0] zext_ln28_6_fu_528_p1;
wire  signed [15:0] add_ln28_3_fu_532_p2;
wire   [12:0] trunc_ln28_1_fu_542_p1;
wire   [20:0] p_shl9_fu_546_p3;
wire  signed [20:0] sext_ln28_1_fu_538_p1;
wire   [2:0] select_ln20_fu_424_p3;
wire   [9:0] add_ln28_2_fu_466_p2;
wire   [9:0] zext_ln28_7_fu_560_p1;
wire   [9:0] add_ln28_4_fu_564_p2;
wire   [2:0] add_ln25_fu_575_p2;
wire  signed [9:0] sext_ln25_fu_581_p1;
wire   [9:0] zext_ln15_2_cast_fu_173_p1;
wire   [9:0] ix_raw_fu_585_p2;
wire   [0:0] icmp_ln200_1_fu_591_p2;
wire   [9:0] select_ln224_1_fu_597_p3;
wire   [0:0] icmp_ln224_1_fu_609_p2;
wire   [8:0] trunc_ln224_2_fu_605_p1;
wire   [8:0] ix_fu_615_p3;
wire   [20:0] sub_ln28_1_fu_554_p2;
wire   [20:0] zext_ln28_9_fu_623_p1;
wire   [20:0] add_ln28_5_fu_627_p2;
wire   [5:0] add_ln20_1_fu_644_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage2_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        acc_fu_90 <= acc_1;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        acc_fu_90 <= grp_fu_479_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln19_fu_269_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            ic_fu_106 <= select_ln19_1_fu_310_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            ic_fu_106 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln19_fu_269_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten60_fu_102 <= select_ln20_3_fu_650_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten60_fu_102 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln19_fu_269_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten99_fu_110 <= add_ln19_fu_275_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten99_fu_110 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln19_fu_269_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            kx_fu_94 <= add_ln23_fu_638_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            kx_fu_94 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln19_fu_269_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            ky_fu_98 <= select_ln20_1_fu_432_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            ky_fu_98 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_743 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv3_weights_load_reg_762 <= conv3_weights_q0;
        feat2_load_reg_757 <= feat2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln19_reg_743 <= icmp_ln19_fu_269_p2;
        icmp_ln19_reg_743_pp0_iter1_reg <= icmp_ln19_reg_743;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_i1_reg_772 <= grp_fu_483_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_743_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        acc_5_out_ap_vld = 1'b1;
    end else begin
        acc_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_743 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_sig_allocacmp_acc_load_1 = grp_fu_479_p_dout0;
    end else begin
        ap_sig_allocacmp_acc_load_1 = acc_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_ic_load = 6'd0;
    end else begin
        ap_sig_allocacmp_ic_load = ic_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten60_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten60_load = indvar_flatten60_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten99_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten99_load = indvar_flatten99_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_kx_load = 3'd0;
    end else begin
        ap_sig_allocacmp_kx_load = kx_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_ky_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_ky_1 = ky_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv3_weights_ce0 = 1'b1;
    end else begin
        conv3_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        feat2_ce0 = 1'b1;
    end else begin
        feat2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_5_out = acc_fu_90;

assign add_ln19_1_fu_290_p2 = (ap_sig_allocacmp_ic_load + 6'd1);

assign add_ln19_fu_275_p2 = (ap_sig_allocacmp_indvar_flatten99_load + 10'd1);

assign add_ln20_1_fu_644_p2 = (ap_sig_allocacmp_indvar_flatten60_load + 6'd1);

assign add_ln20_fu_412_p2 = (select_ln19_fu_302_p3 + 3'd1);

assign add_ln21_2_fu_366_p2 = ($signed(zext_ln14_1_cast_fu_181_p1) + $signed(9'd510));

assign add_ln21_3_fu_472_p2 = ($signed(select_ln19_fu_302_p3) + $signed(3'd7));

assign add_ln21_4_fu_482_p2 = ($signed(sext_ln21_1_fu_478_p1) + $signed(zext_ln14_1_cast2_fu_177_p1));

assign add_ln21_fu_221_p2 = ($signed(ap_sig_allocacmp_ky_1) + $signed(3'd6));

assign add_ln23_fu_638_p2 = (select_ln20_fu_424_p3 + 3'd1);

assign add_ln25_fu_575_p2 = ($signed(select_ln20_fu_424_p3) + $signed(3'd6));

assign add_ln28_1_fu_444_p2 = (add_ln28_fu_360_p2 + zext_ln28_4_fu_440_p1);

assign add_ln28_2_fu_466_p2 = (p_shl1_fu_458_p3 + zext_ln28_5_fu_450_p1);

assign add_ln28_3_fu_532_p2 = ($signed(sext_ln28_fu_344_p1) + $signed(zext_ln28_6_fu_528_p1));

assign add_ln28_4_fu_564_p2 = (add_ln28_2_fu_466_p2 + zext_ln28_7_fu_560_p1);

assign add_ln28_5_fu_627_p2 = (sub_ln28_1_fu_554_p2 + zext_ln28_9_fu_623_p1);

assign add_ln28_fu_360_p2 = (zext_ln28_3_fu_356_p1 + zext_ln28_fu_318_p1);

assign and_ln19_fu_406_p2 = (xor_ln19_fu_394_p2 & icmp_ln23_fu_400_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign bitcast_ln28_fu_683_p1 = conv3_weights_load_reg_762;

assign conv3_weights_address0 = zext_ln28_8_fu_570_p1;

assign feat2_address0 = zext_ln28_10_fu_633_p1;

assign grp_fu_479_p_ce = 1'b1;

assign grp_fu_479_p_din0 = ap_sig_allocacmp_acc_load_1;

assign grp_fu_479_p_din1 = mul_i1_reg_772;

assign grp_fu_479_p_opcode = 2'd0;

assign grp_fu_483_p_ce = 1'b1;

assign grp_fu_483_p_din0 = feat2_load_reg_757;

assign grp_fu_483_p_din1 = bitcast_ln28_fu_683_p1;

assign icmp_ln19_fu_269_p2 = ((ap_sig_allocacmp_indvar_flatten99_load == 10'd800) ? 1'b1 : 1'b0);

assign icmp_ln200_1_fu_591_p2 = (($signed(ix_raw_fu_585_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln200_2_fu_488_p2 = (($signed(add_ln21_4_fu_482_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_237_p2 = (($signed(iy_raw_fu_231_p2) > $signed(10'd254)) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_296_p2 = ((ap_sig_allocacmp_indvar_flatten60_load == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln224_1_fu_609_p2 = (($signed(select_ln224_1_fu_597_p3) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln224_2_fu_372_p2 = (($signed(add_ln21_2_fu_366_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln224_3_fu_506_p2 = (($signed(select_ln224_2_fu_494_p3) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_255_p2 = (($signed(select_ln224_fu_243_p3) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_400_p2 = ((ap_sig_allocacmp_kx_load == 3'd5) ? 1'b1 : 1'b0);

assign ix_fu_615_p3 = ((icmp_ln224_1_fu_609_p2[0:0] == 1'b1) ? trunc_ln224_2_fu_605_p1 : 9'd0);

assign ix_raw_fu_585_p2 = ($signed(sext_ln25_fu_581_p1) + $signed(zext_ln15_2_cast_fu_173_p1));

assign iy_fu_261_p3 = ((icmp_ln224_fu_255_p2[0:0] == 1'b1) ? trunc_ln224_fu_251_p1 : 9'd0);

assign iy_raw_fu_231_p2 = ($signed(sext_ln21_fu_227_p1) + $signed(zext_ln14_1_cast2_fu_177_p1));

assign or_ln20_fu_418_p2 = (icmp_ln20_fu_296_p2 | and_ln19_fu_406_p2);

assign p_shl1_fu_458_p3 = {{trunc_ln28_fu_454_p1}, {2'd0}};

assign p_shl9_fu_546_p3 = {{trunc_ln28_1_fu_542_p1}, {8'd0}};

assign select_ln19_1_fu_310_p3 = ((icmp_ln20_fu_296_p2[0:0] == 1'b1) ? add_ln19_1_fu_290_p2 : ap_sig_allocacmp_ic_load);

assign select_ln19_2_fu_386_p3 = ((icmp_ln20_fu_296_p2[0:0] == 1'b1) ? select_ln22_fu_378_p3 : iy_fu_261_p3);

assign select_ln19_fu_302_p3 = ((icmp_ln20_fu_296_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_ky_1);

assign select_ln20_1_fu_432_p3 = ((and_ln19_fu_406_p2[0:0] == 1'b1) ? add_ln20_fu_412_p2 : select_ln19_fu_302_p3);

assign select_ln20_2_fu_520_p3 = ((and_ln19_fu_406_p2[0:0] == 1'b1) ? select_ln22_1_fu_512_p3 : select_ln19_2_fu_386_p3);

assign select_ln20_3_fu_650_p3 = ((icmp_ln20_fu_296_p2[0:0] == 1'b1) ? 6'd1 : add_ln20_1_fu_644_p2);

assign select_ln20_fu_424_p3 = ((or_ln20_fu_418_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_kx_load);

assign select_ln224_1_fu_597_p3 = ((icmp_ln200_1_fu_591_p2[0:0] == 1'b1) ? 10'd254 : ix_raw_fu_585_p2);

assign select_ln224_2_fu_494_p3 = ((icmp_ln200_2_fu_488_p2[0:0] == 1'b1) ? 10'd254 : add_ln21_4_fu_482_p2);

assign select_ln224_fu_243_p3 = ((icmp_ln200_fu_237_p2[0:0] == 1'b1) ? 10'd254 : iy_raw_fu_231_p2);

assign select_ln22_1_fu_512_p3 = ((icmp_ln224_3_fu_506_p2[0:0] == 1'b1) ? trunc_ln224_1_fu_502_p1 : 9'd0);

assign select_ln22_fu_378_p3 = ((icmp_ln224_2_fu_372_p2[0:0] == 1'b1) ? add_ln21_2_fu_366_p2 : 9'd0);

assign sext_ln21_1_fu_478_p1 = $signed(add_ln21_3_fu_472_p2);

assign sext_ln21_fu_227_p1 = $signed(add_ln21_fu_221_p2);

assign sext_ln25_fu_581_p1 = $signed(add_ln25_fu_575_p2);

assign sext_ln28_1_fu_538_p1 = add_ln28_3_fu_532_p2;

assign sext_ln28_fu_344_p1 = $signed(sub_ln28_fu_338_p2);

assign sub_ln28_1_fu_554_p2 = ($signed(p_shl9_fu_546_p3) - $signed(sext_ln28_1_fu_538_p1));

assign sub_ln28_fu_338_p2 = (zext_ln28_2_fu_334_p1 - zext_ln28_1_fu_322_p1);

assign tmp_1_fu_348_p3 = {{select_ln19_1_fu_310_p3}, {2'd0}};

assign tmp_s_fu_326_p3 = {{select_ln19_1_fu_310_p3}, {8'd0}};

assign trunc_ln224_1_fu_502_p1 = select_ln224_2_fu_494_p3[8:0];

assign trunc_ln224_2_fu_605_p1 = select_ln224_1_fu_597_p3[8:0];

assign trunc_ln224_fu_251_p1 = select_ln224_fu_243_p3[8:0];

assign trunc_ln28_1_fu_542_p1 = add_ln28_3_fu_532_p2[12:0];

assign trunc_ln28_fu_454_p1 = add_ln28_1_fu_444_p2[7:0];

assign xor_ln19_fu_394_p2 = (icmp_ln20_fu_296_p2 ^ 1'd1);

assign zext_ln14_1_cast2_fu_177_p1 = zext_ln14_1;

assign zext_ln14_1_cast_fu_181_p1 = zext_ln14_1;

assign zext_ln15_2_cast_fu_173_p1 = zext_ln15_2;

assign zext_ln28_10_fu_633_p1 = add_ln28_5_fu_627_p2;

assign zext_ln28_1_fu_322_p1 = select_ln19_1_fu_310_p3;

assign zext_ln28_2_fu_334_p1 = tmp_s_fu_326_p3;

assign zext_ln28_3_fu_356_p1 = tmp_1_fu_348_p3;

assign zext_ln28_4_fu_440_p1 = select_ln20_1_fu_432_p3;

assign zext_ln28_5_fu_450_p1 = add_ln28_1_fu_444_p2;

assign zext_ln28_6_fu_528_p1 = select_ln20_2_fu_520_p3;

assign zext_ln28_7_fu_560_p1 = select_ln20_fu_424_p3;

assign zext_ln28_8_fu_570_p1 = add_ln28_4_fu_564_p2;

assign zext_ln28_9_fu_623_p1 = ix_fu_615_p3;

assign zext_ln28_fu_318_p1 = select_ln19_1_fu_310_p3;

endmodule //srcnn_srcnn_Pipeline_VITIS_LOOP_19_4_VITIS_LOOP_20_5_VITIS_LOOP_23_6
